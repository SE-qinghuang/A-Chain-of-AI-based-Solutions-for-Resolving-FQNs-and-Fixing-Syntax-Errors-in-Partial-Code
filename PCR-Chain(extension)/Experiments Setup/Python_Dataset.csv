"def create(self, req, body = None):
    """"""Return a list of certificates.""""""
    context = req.environ['nova.context']
    authorize(context)
    pk, cert = rpc.call(context, FLAGS.cert_topic,
        {""method"": ""generate_x509_cert"",
            ""args"": {""user_id"": context.user_id,
                ""project_id"": context.project_id})
    context = req.environ['nova.context']
    return{'certificate': _translate_certificate_view(cert, pk)}
","  File ""<string>"", line 8
    ""project_id"": context.project_id})
                                     ^
SyntaxError: invalid syntax
"
"def get_mimetype(res, filename):
    if res in(
        'application/x-download',
        'application/x-application',
        'application/binary',
        'application/octet-stream',
        ):
        guessed_type, _ = mimetypes.guess_type(filename)
        if guessed_type:
        res = guessed_type
    return res
","  File ""<string>"", line 10
    res = guessed_type
      ^
IndentationError: expected an indented block
"
"def _GenApiConfigCallback(args, api_func = GenApiConfig):
    """"""Generate an api file.""""""
    service_configs = api_func(args.service
        hostname = args.hostname,
        application_path = args.application)
    for api_name_version, config in service_configs.iteritems():
        _WriteFile(args.output, api_name_version + '.api', config)
","  File ""<string>"", line 4
    hostname = args.hostname,
           ^
SyntaxError: invalid syntax
"
"def expand_light_count(dimmed_rgb count):
    dmx_channels = []
    for light in range(count):
        dmx_channels.extend(dimmed_rgb)
    return dmx_channels
","  File ""<string>"", line 1
    def expand_light_count(dimmed_rgb count):
                                          ^
SyntaxError: invalid syntax
"
"def read_file(self, tmp_file):
    self.getLogger().debug(""Inside to read_file()"")
    ts = time.time()
    self._logger.debug(ts)
    with open(tmp_file, 'r') as stateFile:
        fileJsonState = json.load(stateFile)
        if fileJsonState is not None:
        self.jsonState = fileJsonState
    stateFile.close()
    self.createWindowExercises()
","  File ""<string>"", line 8
    self.jsonState = fileJsonState
       ^
IndentationError: expected an indented block
"
"class UserNotice(types.Sequence):
    components = (
        types.Component(NOTICE_REF, NoticeReference, optional = True),
        types.Component(EXPLICIT_TEXT, DisplayText, optional = True)
","  File ""<string>"", line 4
    types.Component(EXPLICIT_TEXT, DisplayText, optional = True)
                                                               ^
SyntaxError: unexpected EOF while parsing
"
"class DBVistrail(_DBVistrail):
    def __init__(self, * args, ** kwargs):
    _DBVistrail.__init__(self, * args, ** kwargs)
        self.idScope = IdScope()
        self.idScope.setBeginId('action', 1)
","  File ""<string>"", line 3
    _DBVistrail.__init__(self, * args, ** kwargs)
              ^
IndentationError: expected an indented block
"
"def _wait(timeout, cloud, server, action):
    """"""Wait for the server to reach the desired state for the given action.""""""
    for count in shade._utils._iterate_timeout(
        timeout,
        ""Timeout waiting for server to complete %s"" % action):
        try:
        server = cloud.get_server(server.id)
        except Exception:
        continue
        if server.status == _action_map[action]:
        return
        if server.status == 'ERROR':
        module.fail_json(msg = ""Server reached ERROR state while attempting to %s"" % action)
","  File ""<string>"", line 7
    server = cloud.get_server(server.id)
         ^
IndentationError: expected an indented block
"
"class Comment(models.Model):
    comment_title = models.ForeignKey('Blog')
    comment_body = models.TextField()
    comment_author = models.CharField(max_length = 60)
    comment_created = models.DateField()
    comment_updated = models.DateField()
    def body_first_sixty(self):
        return self.title[: 60]
            def __unicode__(self):
        return self.comment_author
","  File ""<string>"", line 9
    def __unicode__(self):
    ^
IndentationError: unexpected indent
"
"class _ListSetter:
    def __init__(self, L):
        self.L = L
    def setitem(self, (item, value)):
        diff = item - len(self.L) + 1
        if diff > 0:
            self.L.extend([None] * diff)
        self.L[item] = value
","  File ""<string>"", line 4
    def setitem(self, (item, value)):
                      ^
SyntaxError: invalid syntax
"
"def load_processing_settings(settings):
    """"""Load processing specific settings.""""""
    processing_settings_path = settings['processing_settings_path']
    with open(processing_settings_path, 'r') as f:
        settings.update(yaml.load(f.read())))
","  File ""<string>"", line 5
    settings.update(yaml.load(f.read())))
                                        ^
SyntaxError: invalid syntax
"
"def raise_object(self, name):
    """"""Raise the named object to the top of the stacking order.""""""
        try: avatar = self.avatars[name]
        except: self.debug('No avatar called %s' % name)
        else:
            self.sprites.above(avatar)
            self.redraw(avatar.rect)
","  File ""<string>"", line 3
    try: avatar = self.avatars[name]
    ^
IndentationError: unexpected indent
"
"from django.views import generic
from viewflow import views as flow_views
class CreateRequestView(flow_views.StartViewMixin,
    generic.UpdateView):
    fields = [""text""]
    def get_object(self):
    return self.activation.process
class ApproveRequestView(flow_views.TaskViewMixin,
    generic.UpdateView):
    fields = [""approved""]
    def get_object(self):
    return self.activation.process
","  File ""<string>"", line 7
    return self.activation.process
         ^
IndentationError: expected an indented block
"
"def test_monitor_ac_usage_leave_on(fake_events, arduino):
    old_event = fake_events.timestamp
    monitor_ac_usage()
    new_event = Event.last_event()
    old_event = Event.query.filter(Event.timestamp == old_event).first()
    assert naturally_equivalent(old_event new_event)
    assert new_event.event == EventType.on
    assert new_event.event_description is None
","  File ""<string>"", line 6
    assert naturally_equivalent(old_event new_event)
                                                  ^
SyntaxError: invalid syntax
"
"def prevent_l3_port_deletion(self, context, port_id):
    """"""Checks to make sure a port is allowed to be deleted.""""""
    port_db = self._core_plugin._get_port(context, port_id)
    if port_db['device_owner'] in[DEVICE_OWNER_ROUTER_INTF,
        DEVICE_OWNER_ROUTER_GW,
        DEVICE_OWNER_FLOATINGIP]:
        fixed_ips = port_db['fixed_ips']
        if fixed_ips:
        raise l3.L3PortInUse(port_id = port_id,
        device_owner = port_db['device_owner'])
        else:
        LOG.debug(_(""Port %(port_id)s has owner %(port_owner)s, but ""
        ""no IP address, so it can be deleted""),
        {'port_id': port_db['id'],
        'port_owner': port_db['device_owner']})
","  File ""<string>"", line 9
    raise l3.L3PortInUse(port_id = port_id,
        ^
IndentationError: expected an indented block
"
"def _BecomePager(pager):
    a, b, c = select.select([0], [], [0])
    os.environ['LESS'] = 'FRSX'
    try:
        os.execvp(pager, [pager])
    except OSError, e:
        os.execv('/bin/sh', ['sh', '-c', pager])
","  File ""<string>"", line 6
    except OSError, e:
                  ^
SyntaxError: invalid syntax
"
"def usage():
    print((""usage: {0}<maps-entry-line>"").format(sys.argv[0]))
    print((""  maps-entry-line: comes from a /proc/pid/maps file"")
    sys.exit(1)
","  File ""<string>"", line 4
    sys.exit(1)
      ^
SyntaxError: invalid syntax
"
"def test_story_with_pre_tags(self):
    text = '<pre>A\n</pre>' '<pre>B\n</pre>' '<pre>C\n</pre>' '<pre>D\n</pre>' item = {'body_html': text}
    res, diff = preserve(item)
    self.assertEqual(item['body_html'], '<pre>A\nB\nC\nD\n</pre>')
","  File ""<string>"", line 2
    text = '<pre>A\n</pre>' '<pre>B\n</pre>' '<pre>C\n</pre>' '<pre>D\n</pre>' item = {'body_html': text}
                                                                                  ^
SyntaxError: invalid syntax
"
"def PrintFailureHeader(self, test):
    if test.IsNegative():
        negative_marker = '[negative] '
    else:
        negative_marker = ''
    print(""=== %(label)s %(negative)s==="" %{
        'label': test.GetLabel(),
        'negative': negative_marker
    }
    print(""Path: %s"" % ""/"".join(test.path))
","  File ""<string>"", line 10
    print(""Path: %s"" % ""/"".join(test.path))
        ^
SyntaxError: invalid syntax
"
"def is_django_dir(path):
    path = validations.is_local_dir_exists(path)
    manage = os.path.join(path, ""manage.py"")
    try:
        validations.is_local_file_exists(manage)
    except:
        raise ValueError, _(""Directory doesn't look like a Django based project."")
    return path
","  File ""<string>"", line 7
    raise ValueError, _(""Directory doesn't look like a Django based project."")
                    ^
SyntaxError: invalid syntax
"
"def _putline(self, line):
    if self._debugging > 1:
        print '*put*', repr(line)
    self.sock.sendall('%s%s' %(line, CRLF))
","  File ""<string>"", line 3
    print '*put*', repr(line)
                ^
SyntaxError: invalid syntax
"
"def setup_module(module):
    for variable in('LANG', 'LANGUAGE',
        'LC_ALL', 'LC_MESSAGES', 'LC_COLLATE'):
        if variable in os.environ:
        del os.environ[variable]
    run.external = outer is None
    import tempfile
    run.work = tempfile.mktemp()
","  File ""<string>"", line 5
    del os.environ[variable]
      ^
IndentationError: expected an indented block
"
"from settings import *
DEBUG = False
TEMPLATE_DEBUG = DEBUG
THUMBNAIL_DEBUG = DEBUG
} BASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'repylia',
        'USER': 'repylia',
        'PASSWORD': 'tyranosaure',
        'HOST': 'localhost',
    }
}
EMAIL_HOST = 'localhost'
EMAIL_PORT = 25
","  File ""<string>"", line 5
    } BASES = {
    ^
SyntaxError: invalid syntax
"
"def get_logo(size):
    """"""Returns a deluge logo pixbuf based on the size parameter.""""""
    if deluge.common.windows_check() or deluge.common.osx_check():
        return gtk.gdk.pixbuf_new_from_file_at_size(deluge.common.get_pixmap(""deluge.png""), size, size)
    else:
        try:
            return gtk.gdk.pixbuf_new_from_file_at_size(deluge.common.get_pixmap(""deluge.svg""), size, size)
        except Exception, e:
            log.warning(e)
","  File ""<string>"", line 8
    except Exception, e:
                    ^
SyntaxError: invalid syntax
"
"def TestRapiInstanceFailover(instance):
    """"""Test failing over instance via RAPI""""""
    if not IsFailoverSupported(instance):
        print(qa_utils.FormatInfo(""Instance doesn't support failover, skipping"")
            "" test"")
        return
    _WaitForRapiJob(_rapi_client.FailoverInstance(instance.name))
    qa_utils.RunInstanceCheck(instance, True)
    _WaitForRapiJob(_rapi_client.FailoverInstance(instance.name))
","  File ""<string>"", line 5
    "" test"")
          ^
SyntaxError: invalid syntax
"
"class UpdateReplace(Exception):
    '''Raised when resource update requires replacement'''
    _message = _(""The Resource %s requires replacement."")
    def __init__(self, resource_name = 'Unknown',
        message = _(""The Resource %s requires replacement."")):
        try:
        msg = message % resource_name
        except TypeError:
        msg = message
        super(Exception, self).__init__(msg)
","  File ""<string>"", line 7
    msg = message % resource_name
      ^
IndentationError: expected an indented block
"
"def await_completion(self):
    update = self.visible_updates.take()
    try:
        if update.exception:
            t, v, tb = update.exc_info
            raise t, v, tb
    finally:
        self.executor_service.shutdown()
","  File ""<string>"", line 6
    raise t, v, tb
           ^
SyntaxError: invalid syntax
"
"def test_upload__others_invalid(self, _):
    self.reddit.read_only = False
    with self.recorder.use_cassette(
        'TestSubredditStylesheet.test_upload__others_invalid'):
        for method in['upload_header', 'upload_mobile_header',
            'upload_mobile_icon']:
        with pytest.raises(APIException) as excinfo:
            getattr(self.subreddit.stylesheet, method)(
                self.image_path('invalid.jpg'))
        assert excinfo.value.error_type == 'IMAGE_ERROR'
","  File ""<string>"", line 7
    with pytest.raises(APIException) as excinfo:
       ^
IndentationError: expected an indented block
"
"class Limiter(object):
    limit = timedelta(seconds = 1)
    last = datetime.now()
    def wait(self):
        """"""Blocks until self.limit has passed since last call.""""""
        now = datetime.now()
        dt = now - self.last
        if dt < self.limit:
            sleep_time = (self.limit - dt).seconds
                + float(0.000001) *(self.limit - dt).microseconds
            sleep(sleep_time)
        self.last = datetime.now()
        return dt
","  File ""<string>"", line 10
    + float(0.000001) *(self.limit - dt).microseconds
    ^
IndentationError: unexpected indent
"
"class FipRulePriorityAllocator(ItemAllocator):
    """"""Manages allocation of floating ips rule priorities.""""""
    def __init__(self, data_store_path, priority_rule_start,
        priority_rule_end):
        """"""Create the necessary pool and create the item allocator""""""
        pool = set(FipPriority(str(s)) for s in range(priority_rule_start,
            priority_rule_end))
            super(FipRulePriorityAllocator, self).__init__(data_store_path,
                FipPriority,
                pool)
","  File ""<string>"", line 8
    super(FipRulePriorityAllocator, self).__init__(data_store_path,
    ^
IndentationError: unexpected indent
"
"def sum(lst):
    tmp = 0
    for i in range(len(lst):
        tmp = tmp + lst[i]
    return tmp
","  File ""<string>"", line 3
    for i in range(len(lst):
                           ^
SyntaxError: invalid syntax
"
"def _find_existing_gist_by_name(self, gist_args, nb_filename, py_filename):
    match_counter = 0
    matchID = None
    for gist in gist_args:
        gist_files = gist.get(""files"", None)
        if(gist_files is not None and nb_filename in gist_files and
            py_filename in gist_files):
            match_counter += 1
            if ""id"" in gist:
            matchID = gist[""id""]
    if match_counter > 1:
        raise_error(""You had multiple gists with the same name as this ""
            ""notebook. Aborting."")
    return matchID
","  File ""<string>"", line 10
    matchID = gist[""id""]
          ^
IndentationError: expected an indented block
"
"def check_adoptions():
    log.debug(""Checking proposals for successful adoption..."")
    for proposal in Proposal.all():
        if(not proposal.adopted and proposal.is_adopt_polling()
            and proposal.adopt_poll.is_stable()):
            log.info(""Proposal %s is now ADOPTED. Thanks for playing."" %
                proposal.title)
                proposal.adopt()
                meta.Session.commit()
","  File ""<string>"", line 8
    proposal.adopt()
    ^
IndentationError: unexpected indent
"
"def mmPrettyPrintSequenceCellRepresentations(self, sortby = ""Column""):
    """"""Pretty print the cell representations for sequences in the history.""""""
    self._mmComputeTransitionTraces()
    table = PrettyTable([""Pattern"", ""Column"", ""predicted=>active cells""])
    for sequenceLabel, predictedActiveCells in(
        self._mmData[""predictedActiveCellsForSequence""].iteritems()):
        cellsForColumn = self.mapCellsToColumns(predictedActiveCells)
        for column, cells in cellsForColumn.iteritems():
        table.add_row([sequenceLabel, column, list(cells)])
    return table.get_string(sortby = sortby).encode(""utf-8"")
","  File ""<string>"", line 9
    table.add_row([sequenceLabel, column, list(cells)])
        ^
IndentationError: expected an indented block
"
"def test_check_equal(self):
    task_api = self.compute_api.compute_task_api
    tests = set()
    for(name, value) in inspect.getmembers(self inspect.ismethod):
        if name.startswith('test_') and name != 'test_check_equal':
            tests.add(name[5: ])
    if tests != set(task_api.cells_compatible):
        self.fail(""Testcases not equivalent to cells_compatible list"")
","  File ""<string>"", line 4
    for(name, value) in inspect.getmembers(self inspect.ismethod):
                                                      ^
SyntaxError: invalid syntax
"
"def __init__(self, local_endpoint, autobind = True, timeout = 0.5, bind_single = False, debug = 0):
    super(PacketSocket, self).__init__(socket.AF_INET, socket.SOCK_DGRAM)
    self.debug = debug
    self.local_endpoint = local_endpoint
    self.recvfrom_timeout = timeout
    self.settimeout(self.recvfrom_timeout)
    self.bbind_single = bind_single
    self.autobind = autobind
    if self.debug > 0:
        print ""Set socket timeout to %s"" %(self.recvfrom_timeout)
    if self.autobind:
        self.packet_bind()
","  File ""<string>"", line 10
    print ""Set socket timeout to %s"" %(self.recvfrom_timeout)
                                   ^
SyntaxError: invalid syntax
"
"def parse_result(step, result):
    parsed = '%s:' % step
    keyless = parsed
    for key in['AuthCode', 'RespCode', 'AVSRespCode', 'CVV2RespCode',
        'TxRefNum', 'ApprovalStatus', 'TraceNumber',
        'CustomerRefNum']:
        if key in result:
        parsed = '%s %s:%s' %(parsed, key, result[key])
    if parsed == keyless:
        parsed = '%s raw:%s' %(parsed, result)
    return parsed
","  File ""<string>"", line 8
    parsed = '%s %s:%s' %(parsed, key, result[key])
         ^
IndentationError: expected an indented block
"
"def test_get_regions_all_regions(self):
    args = Namespace(all_regions = True)
    supported_regions = {'ap-southeast-1', 'ap-southeast-2',
        'us-west-2', 'us-east-1', 'us-west-1',
        ,
        'sa-east-1', 'ap-northeast-1', 'eu-west-1'}
    all_regions = set(get_regions(args, None))
    self.assertTrue(all_regions.issuperset(supported_regions))
","  File ""<string>"", line 5
    ,
    ^
SyntaxError: invalid syntax
"
"def get_wsdl(self url):
    """"""Simple accessor method that caches the wsdl of the application, once""""""
    if self.__wsdl is None:
        return self.__build_wsdl(url)
    else:
        return self.__wsdl
","  File ""<string>"", line 1
    def get_wsdl(self url):
                        ^
SyntaxError: invalid syntax
"
"def collide(self, rect, propname):
    '''Find all objects the rect is touching that have the indicated'''
    r = []
    for object in self.get_in_region(rect.left, rect.top, rect.right,
        rect.bottom):
        if propname in object or propname in self.properties:
        r.append(object)
    return r
","  File ""<string>"", line 7
    r.append(object)
    ^
IndentationError: expected an indented block
"
"def androidManifest(topDomain, domain, appName, workingDir):
    print('--------------------------------   G e n e r a t i n g   M a n i f e s t \n')
    manifestName = ""AndroidManifest.xml""
    outStr = '<?xml version=""1.0"" encoding=""utf-8""?>\n' '<manifest xmlns:android=""http://schemas.android.com/apk/res/android""\n' '    package=""' + topDomain + '.' + domain + '.' + appName + '"">\n' '    <application android:label=""' + appName + '"">\n' '        <activity android:name=""' + appName + '"">\n' '            <intent-filter>\n' '                <action android:name=""android.intent.action.MAIN"" />\n' + '                <category android:name=""android.intent.category.LAUNCHER"" />\n' '            </intent-filter>\n' '        </activity>\n' '    </application>\n' '</manifest>\n' fo = open(workingDir + os.sep + manifestName, 'w')
    fo.write(outStr)
    fo.close()
","  File ""<string>"", line 4
    outStr = '<?xml version=""1.0"" encoding=""utf-8""?>\n' '<manifest xmlns:android=""http://schemas.android.com/apk/res/android""\n' '    package=""' + topDomain + '.' + domain + '.' + appName + '"">\n' '    <application android:label=""' + appName + '"">\n' '        <activity android:name=""' + appName + '"">\n' '            <intent-filter>\n' '                <action android:name=""android.intent.action.MAIN"" />\n' + '                <category android:name=""android.intent.category.LAUNCHER"" />\n' '            </intent-filter>\n' '        </activity>\n' '    </application>\n' '</manifest>\n' fo = open(workingDir + os.sep + manifestName, 'w')

SyntaxError: invalid syntax
"
"def OnAutoscale(self, event):
    state = self.autoscale_button.GetValue()
        if state:
            self.autoscale_button.SetLabel(""   Vm plot  "")
            self.autoscale_button.SetForegroundColour('red')
            self.plot_type = 'Vm'
        else:
            self.autoscale_button.SetLabel(""generic plot"")
            self.autoscale_button.SetForegroundColour('blue')
            self.plot_type = 'generic'
        self.set_plot_type()
","  File ""<string>"", line 3
    if state:
    ^
IndentationError: unexpected indent
"
"def TestInstanceConvertDiskToPlain(instance, inodes):
    """"""gnt-instance modify -t""""""
    name = instance.name
    template = instance.disk_template
    if template != constants.DT_DRBD8:
        print(qa_utils.FormatInfo(""Unsupported template %s, skipping conversion"")
            "" test"" % template)
        return
    assert len(inodes) == 2
    AssertCommand([""gnt-instance"", ""modify"", ""-t"", constants.DT_PLAIN, name])
    AssertCommand([""gnt-instance"", ""modify"", ""-t"", constants.DT_DRBD8,
        ""-n"", inodes[1].primary, name])
","  File ""<string>"", line 7
    "" test"" % template)
          ^
SyntaxError: invalid syntax
"
"def get_drive_info(drive, os_list_position):
    osVersion = []
    for new_releases in drive['releases']:
        osVersion +=[new_releases]
    osVersion_str = osVersion[os_list_position]
    dev_type_str = drive['releases'][osVersion_str]['devicetype']
    major_str = drive['releases'][osVersion_str]['major']
    minor_str = drive['releases'][osVersion_str] '[minor']
    firmware_str = drive['releases'][osVersion_str]['firmware']
    model_str = drive['model']
    drive_info = DiskDrive(osVersion_str, dev_type_str, major_str, minor_str, firmware_str, model_str)
    return drive_info
","  File ""<string>"", line 8
    minor_str = drive['releases'][osVersion_str] '[minor']
                                                        ^
SyntaxError: invalid syntax
"
"def parse(text, execsnippet):
    result = None
    toparse = text
    try:
        exec execsnippet
        return result
    except:
        return None
","  File ""<string>"", line 5
    exec execsnippet
                   ^
SyntaxError: Missing parentheses in call to 'exec'
"
"def test_duplicate_global_local(self):
    try:
        exec 'def f(a): global a; a = 1'
        self.fail(""variable is global and local"")
    except SyntaxError:
        pass
","  File ""<string>"", line 3
    exec 'def f(a): global a; a = 1'
                                   ^
SyntaxError: invalid syntax
"
"def routes(self, waypoints, travelMode = 'Driving', version = 'v1', * args, ** kargs):
    for count in xrange(0, len(waypoints)):
        kargs['wp.%d' % count] = waypoints[count]
    return bind_api(
    path = '/REST/{version}/Routes/{travelMode}',
    allowed_param = ['avoid', 'distanceBeforeFirstTurn', 'heading', 'optimize',
        'routePathOutput', 'tolerances', 'distanceUnit', 'dateTime',
        'timeType', 'maxSolutions', 'suppressStatus', 'jsonp', 'output',
        'jsonso', 'culture', 'mapView', 'userLocation', 'userIp'] +[""wp.%d"" % x for x in xrange(0, 25)]
","  File ""<string>"", line 9
    'jsonso', 'culture', 'mapView', 'userLocation', 'userIp'] +[""wp.%d"" % x for x in xrange(0, 25)]
                                                                                                  ^
SyntaxError: unexpected EOF while parsing
"
"def list_releases_scenario(runner):
    runner.request(
        method = 'GET'
        path = '/projects/%s/%s/releases/' %(
            runner.org.slug, runner.default_project.slug)
    )
","  File ""<string>"", line 4
    path = '/projects/%s/%s/releases/' %(
       ^
SyntaxError: invalid syntax
"
"def check_paired_end_read_consistency(reads):
    """"""Check that a set of reads are consistent with their fragment lengths,""""""
    pe_reads = reads[: , 0]
    frag_lens = reads[: , 1]
    num_reads = len(pe_reads)
    print(""Checking read consistency for %d reads..."" %(num_reads))
    print(reads)
    is_consistent = False
    is_consistent = all(frag_lens[nonzero(pe_reads == 1)] != - Inf)
    if not is_consistent:
    return is_consistent
    is_consistent = all(frag_lens[nonzero(pe_reads == 0)] == - Inf)
    return is_consistent
","  File ""<string>"", line 11
    return is_consistent
         ^
IndentationError: expected an indented block
"
"def import_text(filename, separator):
    for line in csv.reader(open(filename), delimiter = separator,
        skipinitialspace = True):
        if line:
        yield line
","  File ""<string>"", line 5
    yield line
        ^
IndentationError: expected an indented block
"
"def test(self):
    for exchange in self.exchanges:
        for ticker in self.Tickers[exchange]:
        print(exchange, ticker)
        try:
            print(self.Ticker(exchange, ticker))
            except BTCEError as e:
            print(""Error: %s"" % e.value)
            continue
            except:
            continue
","  File ""<string>"", line 4
    print(exchange, ticker)
        ^
IndentationError: expected an indented block
"
"def prepend(elem, l):
    if l is None or l == """":
        tail = []
    else:
        tail = l
    if elem is None:
    return tail
    return[elem] + tail
","  File ""<string>"", line 7
    return tail
         ^
IndentationError: expected an indented block
"
"def test_original_excepthook(self):
    savestderr = sys.stderr
    err = cStringIO.StringIO()
    sys.stderr = err
    eh = sys.__excepthook__
    self.assertRaises(TypeError, eh)
    try:
        raise ValueError(42)
    except ValueError, exc:
        eh(* sys.exc_info())
    sys.stderr = savestderr
    self.assert_(err.getvalue().endswith(""ValueError: 42\n""))
","  File ""<string>"", line 9
    except ValueError, exc:
                     ^
SyntaxError: invalid syntax
"
"def policies(self, objectId = '', status = 'draft'):
    '''List the policy xmls uploaded''' policy
    return self.actions('policies', objectId, status)
","  File ""<string>"", line 2
    '''List the policy xmls uploaded''' policy
                                             ^
SyntaxError: invalid syntax
"
"def get_location_as_dict(location):
    tmp_dict = location.__dict__
    tmp_dict['latitude'] = tmp_dict['loc'].coords[0]
    tmp_dict['longitude'] = tmp_dict['loc'].coords[1]
    del tmp_dict['loc']
    del tmp_dict['_state']
    tmp_dict['category'] = Category.objects.get(pk = tmp_dict['category_id']).name
    del tmp_dict['category_id']
    if '_category_cache' in tmp_dict:
    del tmp_dict['_category_cache']
    if 'distance' in tmp_dict:
    tmp_dict['distance'] = tmp_dict['distance'].m
    return tmp_dict
","  File ""<string>"", line 10
    del tmp_dict['_category_cache']
      ^
IndentationError: expected an indented block
"
"def opened_w_error(filename, mode = ""r""):
    """"""This context ensures the file is closed.""""""
    try:
        f = codecs.open(filename, encoding = 'utf8', mode = mode)
    except IOError, err:
        yield None, err
    else:
        try:
            yield f, None
        finally:
            f.close()
","  File ""<string>"", line 5
    except IOError, err:
                  ^
SyntaxError: invalid syntax
"
"def to_utf8_optional_iterator(x):
    """"""Raise TypeError if x is a str or if x is an iterable which""""""
    if isinstance(x, basestring):
        return to_utf8(x)
    try:
        l = list(x)
    except TypeError, e:
        assert 'is not iterable' in str(e)
        return x
    else:
        return[to_utf8_if_string(e) for e in l]
","  File ""<string>"", line 7
    except TypeError, e:
                    ^
SyntaxError: invalid syntax
"
"def sample_crash_data(n, path, folder):
    df = read_crash_csv(os.path.join(path, 'crashdata.csv'))
    logging.basicConfig(filename = os.path.join(path, 'sample.log'), level = logging.DEBUG)
    df_new = df
    if n != - 1:
        start = dt.date.today()
        logging.info('As for %s raw data set contains %s records ...' %(dt.datetime.strftime(start, ""%m/%d/%Y %H:%M:%S"")
","  File ""<string>"", line 7
    logging.info('As for %s raw data set contains %s records ...' %(dt.datetime.strftime(start, ""%m/%d/%Y %H:%M:%S"")
                                                                                                                   ^
SyntaxError: unexpected EOF while parsing
"
"class hotmail:
    def ataque(self, user, password):
        print('[INFO] Email: {0} - Contraseña: {1}'.format(user, password))
        try:
            serverSMTP = smtplib.SMTP('smtp.live.com:587')
            serverSMTP.starttls()
            serverSMTP.login(user, password)
            serverSMTP.quit()
            table_datas = [
            [""ATAQUE EXITOSO""],
            [""""""Target: Microsoft"""""".format(user, password)]
","  File ""<string>"", line 11
    [""""""Target: Microsoft"""""".format(user, password)]
                                                   ^
SyntaxError: unexpected EOF while parsing
"
"def getopts(argv):
    opts = {}
    while argv:
    if argv[0][0] == '-':
        opts[argv[0]] = argv[1]
        argv = argv[2: ]
        else:
        argv = argv[1: ]
    return opts
","  File ""<string>"", line 4
    if argv[0][0] == '-':
     ^
IndentationError: expected an indented block
"
"def shape(arr):
    i = ndim(arr)
    shape_val = [0] * i
    j = 0
    while j < i:
        shape_val[j] = native rtl_dsize(arr, j)
        j += 1
    return shape_val
","  File ""<string>"", line 6
    shape_val[j] = native rtl_dsize(arr, j)
                                  ^
SyntaxError: invalid syntax
"
"def get_links(self, network = None):
    return[]
        return PGv2Link.get_links(self.xml)
","  File ""<string>"", line 3
    return PGv2Link.get_links(self.xml)
    ^
IndentationError: unexpected indent
"
"def test_attribute_failed(self):
    rsrc = self.create_firewall_policy()
    self.m.ReplayAll()
    scheduler.TaskRunner(rsrc.create)()
    error = self.assertRaises(exception.InvalidTemplateAttribute,
        rsrc.FnGetAtt, 'subnet_id')
    self.assertEqual(
        'The Referenced Attribute(firewall_policy subnet_id)is '
        'incorrect.', six.text_type(error)
    self.m.VerifyAll()
","  File ""<string>"", line 10
    self.m.VerifyAll()
       ^
SyntaxError: invalid syntax
"
"DOCUMENTATION = """"""module: consul_acl""""""
EXAMPLES = '''- name: create an acl token with rules'''
import sys
import urllib2
try:
    import consul
    from requests.exceptions import ConnectionError
    python_consul_installed = True
except ImportError, e:
    python_consul_installed = False
try:
    import hcl
    pyhcl_installed = True
except ImportError:
    pyhcl_installed = False
from requests.exceptions import ConnectionError
","  File ""<string>"", line 9
    except ImportError, e:
                      ^
SyntaxError: invalid syntax
"
"def should_call_set_folder(self, folder_info, instance, auth, node_settings):
    if(folder_info and not(
        instance and getattr(instance, 'folder_id', False) and(
            instance.folder_id == folder_info or(hasattr(folder_info, 'get') and instance.folder_id == folder_info.get('id', False))
        ))):
        if auth.user._id != node_settings.user_settings.owner._id:
        raise exceptions.PermissionDenied('Requested action requires addon ownership.')
        return True
    return False
","  File ""<string>"", line 7
    raise exceptions.PermissionDenied('Requested action requires addon ownership.')
        ^
IndentationError: expected an indented block
"
"def get_language_by_extension(problem_instance, ext):
    for lang, extension_list in get_allowed_languages_dict(
        problem_instance).items():
        if ext in extension_list:
        return lang
    return None
","  File ""<string>"", line 5
    return lang
         ^
IndentationError: expected an indented block
"
"""""""Syncthing-GTK - 1st run wizard""""""
from __future__ import unicode_literals
from gi.repository import Gtk, Gdk, GLib
from syncthing_gtk import Configuration, DaemonProcess
from syncthing_gtk import DaemonOutputDialog, StDownloader
from syncthing_gtk.tools import get_config_dir, IS_WINDOWS
from syncthing_gtk.tools import can_upgrade_binary, compare_version
import os, sys, socket, random, string
import logging, traceback, platform
from xml.dom import minidom
_ = lambda(a): a
log = logging.getLogger(""Wizard"")
DEFAULT_PORT = 8080
MAX_PORT = 8100
","  File ""<string>"", line 11
    _ = lambda(a): a
              ^
SyntaxError: invalid syntax
"
"def default_source_layer(self):
    """"""Returns the default source_layer setting for this ComponentSpec.""""""
    for network, default_layer in[('FeedForwardNetwork', 'layer_0'),
        ('LayerNormBasicLSTMNetwork', 'state_h_0'),
        ('LSTMNetwork', 'layer_0'),
        ('IdentityNetwork', 'input_embeddings')]:
        if self.spec.network_unit.registered_name.endswith(network):
        return default_layer
    raise ValueError('No default source for network unit: %s' %
        self.spec.network_unit)
","  File ""<string>"", line 8
    return default_layer
         ^
IndentationError: expected an indented block
"
"def find(item_in, list_search):
    try:
    return list_search.index(item_in) != None
    except ValueError:
    return False
","  File ""<string>"", line 3
    return list_search.index(item_in) != None
         ^
IndentationError: expected an indented block
"
"def verify_default_url(self, actual_url, expected_pixels):
    """"""Verify correct url structure for a default profile image.""""""
    self.assertEqual(
        actual_url
        '/static/default_{size}.png'.format(size = expected_pixels)
    )
","  File ""<string>"", line 5
    '/static/default_{size}.png'.format(size = expected_pixels)
                               ^
SyntaxError: invalid syntax
"
"import codecs
import os
import re
from setuptools import setup, find_packages
with codecs.open(os.path.join(os.path.abspath(os.path.dirname(
    __file__)), 'elasticine', '__init__.py'), 'r', 'latin1') as fp:
    try:
    version = re.findall(r""^__version__ = '([^']+)'\r?$"",
        fp.read(), re.M)[0]
        except IndexError:
    raise RuntimeError('Unable to determine version.')
install_requires = ['elasticsearch', 'pyyaml', 'jinja2']
tests_require = install_requires +['nose']
","  File ""<string>"", line 8
    version = re.findall(r""^__version__ = '([^']+)'\r?$"",
          ^
IndentationError: expected an indented block
"
"class Music:
    def play(self):
        name = ""assets/modules/sugar.mp3""
            self.player = subprocess.Popen([""mplayer"", name, ""-ss"", ""30""], stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
        return ""Playing music""
    def stop(self):
        self.player.stdin.write(""q"")
","  File ""<string>"", line 4
    self.player = subprocess.Popen([""mplayer"", name, ""-ss"", ""30""], stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    ^
IndentationError: unexpected indent
"
"class HTTPSConnection(HTTPConnection):
    protocol = 'https'
    default_port = HTTPS_PORT
    def __init__(self, host, port = None, key_file = None, cert_file = None,
        strict = None):
        if key_file is not None or cert_file is not None:
        raise NotImplemented(
            ""key_file and cert_file arguments are not implemented"")
            super(HTTPSConnection, self).__init__(
        host, port = port, strict = strict)
","  File ""<string>"", line 7
    raise NotImplemented(
        ^
IndentationError: expected an indented block
"
"def get(self, action):
    if action == ""dashboard"":
        self.initializeDashboard()
    elif action == ""logout"":
        self.logout()
    elif action == ""timeIsUp"":
        self.endExercise()
    elif action == ""askStats"":
        self.sendStats()
    else:
    self.renderLoginPage()
","  File ""<string>"", line 11
    self.renderLoginPage()
       ^
IndentationError: expected an indented block
"
"def set_cmd_args(self, mesg):
    cmd = self.base_cmd_args(mesg)
    if mesg == 'enabled':
    cmd.append('/sys/devices/platform/sh-sci.' + str(self.sci_id) + '/tty/ttySC' + str(self.sci_id) + '/power/wakeup')
    elif mesg == 'mem':
        cmd.append('/sys/power/state')
        elif mesg == 'probe':
        cmd.append('/dev/null')
        elif mesg == 'wakeup':
        cmd.append('/dev/null')
        else:
            print('Unknown this command')
    return cmd
","  File ""<string>"", line 4
    cmd.append('/sys/devices/platform/sh-sci.' + str(self.sci_id) + '/tty/ttySC' + str(self.sci_id) + '/power/wakeup')
      ^
IndentationError: expected an indented block
"
"def __getitem__(self, index):
    if index < 0: index = self.length + index
    let vec: float32x4 = self[...][index // 4]
    lane = index % 4
    if lane == 0: return vec.x
    elif lane == 1: return vec.y
    elif lane == 2: return vec.z
    elif lane == 3: return vec.w
","  File ""<string>"", line 3
    let vec: float32x4 = self[...][index // 4]
          ^
SyntaxError: invalid syntax
"
"class Translate(Collection):
    def __init__(self, parts, x, y, z):
    self.parts = parts
    self.where = x, y, z
    def apply(self):
    glPushMatrix()
    glTranslatef(* self.where)
    def unapply(self):
    glPopMatrix()
","  File ""<string>"", line 3
    self.parts = parts
       ^
IndentationError: expected an indented block
"
"def ck_stringz_2(self):
    return self.DFilterCount(pkt_tftp,
        'tftp.type == ""junk""', 0)
            def ck_contains_1(self):
    return self.DFilterCount(pkt_http,
        'http.request.method contains ""E""', 1)
","  File ""<string>"", line 4
    def ck_contains_1(self):
    ^
IndentationError: unexpected indent
"
"from django.db import models
class Reporter(models.Model)
    email = models.EmailField()
","  File ""<string>"", line 2
    class Reporter(models.Model)
                               ^
SyntaxError: invalid syntax
"
"def cross_correl(VX, VY, klag):
    Np = len(VX)
    if Np != len(VY):
        print 'barakuda_stat.cross_correl: ERROR in size! => ', Np, len(VY)
    if klag >= 0:
        Rxyl = correl(VX[: Np - klag], VY[klag: ])
    else:
        Rxyl = correl(VX[- klag: ], VY[: Np + klag])
    return Rxyl
","  File ""<string>"", line 4
    print 'barakuda_stat.cross_correl: ERROR in size! => ', Np, len(VY)
                                                         ^
SyntaxError: invalid syntax
"
"def external_gateway_removed(self, ri, ext_gw_port):
    if self._is_global_router(ri):
        self._remove_sub_interface(ext_gw_port)
    else:
        ex_gw_ip = ext_gw_port['subnets'][0]['gateway_ip']
        if(ex_gw_ip and
            ext_gw_port['device_owner'] == DEVICE_OWNER_ROUTER_GW):
            if self._is_port_v6(ext_gw_port):
            self._remove_default_route_v6(ri, ex_gw_ip, ext_gw_port)
            else:
            self._set_nat_pool(ri, ext_gw_port, True)
            self._remove_default_route(ri, ext_gw_port)
","  File ""<string>"", line 9
    self._remove_default_route_v6(ri, ex_gw_ip, ext_gw_port)
       ^
IndentationError: expected an indented block
"
"def _InitializePropertyToDefault(self, prop, dst):
    """"""Initialize a model.Property to its default value inside an object.""""""
    c = Code()
    underlying_type = self._type_helper.FollowRef(prop.type_)
    if(underlying_type.property_type == PropertyType.ENUM and
        prop.optional):
        namespace_prefix = ('%s::' % underlying_type.namespace.unix_name
            if underlying_type.namespace != self._namespace
            else '')
            c.Append('%s->%s = %s%s;' %(
        dst,
        prop.unix_name,
        namespace_prefix,
        self._type_helper.GetEnumNoneValue(prop.type_)))
    return c
","  File ""<string>"", line 10
    c.Append('%s->%s = %s%s;' %(
    ^
IndentationError: unexpected indent
"
"def _after_authenticate(user, password):
    for(confirmed, factory_method) in((True, _confirmed_logins),
        (False, _unconfirmed_logins)):
        logins = factory_method(user)
        db_logins = set(
        [pd.login for pd in PartialDigest.objects.filter(user = user,
            confirmed = confirmed)])
            if db_logins != logins:
            _prepare_partial_digests(user, password)
            _persist_partial_digests(user)
            return
","  File ""<string>"", line 8
    if db_logins != logins:
    ^
IndentationError: unexpected indent
"
"def convertTemp(temperature, t_in = 'F', t_out = 'C'):
    if t_in == 'C' and t_out == 'F':
        return float(9) / 5) * temperature + 32
        elif t_in == 'F' and t_out == 'C':
        return float(5) / 9) *(temperature - 32)
        else:
        raise ValueError(""Incorrect Arguments for function convertTemp(temperature, t_in='F', t_out='C'"")
","  File ""<string>"", line 3
    return float(9) / 5) * temperature + 32
                       ^
SyntaxError: invalid syntax
"
"def _format_row(self, (slug, title, visits, num_unreviewed)):
    needs_review = int(num_unreviewed > 0)
    status, view_name, dummy = REVIEW_STATUSES[needs_review]
    return dict(title = title,
        url = reverse('wiki.document', args = [slug],
            locale = self.locale),
        visits = visits,
        status = status,
        status_url = reverse(view_name, args = [slug],
            locale = self.locale)
        if view_name else '')
","  File ""<string>"", line 1
    def _format_row(self, (slug, title, visits, num_unreviewed)):
                          ^
SyntaxError: invalid syntax
"
"def put_group_psa(self, group, psa_id, token = None):
    url = self.base_URL + 'groups/' + group + '/PSA/'
    data = {}
        if token is not None:
            data['token'] = token
    data['psa_id'] = psa_id
    return put(url, data = json.dumps(data), headers = self.headers)
","  File ""<string>"", line 4
    if token is not None:
    ^
IndentationError: unexpected indent
"
"def _chooseargmax(self, state):
    self.vstate2 = state
    self.temp = - 10000
    self.vQ
    self.action
    for a in range(self.actions):
        self.vQ = self.QL[state[0], state[1], a]
        if self.vQ > self.temp:
        self.temp = self.vQ
        self.action = a
            return self.action
","  File ""<string>"", line 9
    self.temp = self.vQ
       ^
IndentationError: expected an indented block
"
"def translate_scancode(scancode):
    if autosense:
    scancode = check_auto(scancode)
    if scancode:
        if foundxt: return translate_xt(scancode)
        else: return translate_at(scancode)
","  File ""<string>"", line 3
    scancode = check_auto(scancode)
           ^
IndentationError: expected an indented block
"
"def is_uwsgi_cfg(filename):
    filename = validations.is_local_file_exists(filename)
    for k in UWSGI_DEFAULT_CONFS:
    if filename.endswith(k):
    return filename
    for k in UWSGI_MAGIC_CONFS:
    if filename.endswith(k):
    return filename
    return filename
","  File ""<string>"", line 4
    if filename.endswith(k):
     ^
IndentationError: expected an indented block
"
"def test_blacklist_regex_with_comments_and_regex(self):
    with io.StringIO() as blacklist_file:
        for i in range(4):
            blacklist_file.write(u'fake_regex_%s # Comments\n' % i)
        blacklist_file.seek(0)
        with mock.patch('six.moves.builtins.open',
            return_value = blacklist_file):
            result = os_testr.construct_regex('fake_path', None,
                'fake_regex', False)
                expected_regex = (
                ""^((?!fake_regex_3|fake_regex_2|fake_regex_1|""
                ""fake_regex_0).)*$fake_regex"")
                self.assertEqual(result, expected_regex)
","  File ""<string>"", line 10
    expected_regex = (
    ^
IndentationError: unexpected indent
"
"def __init__(self, options):
    self.options = options
    self.seed = FuzzResultFactory.from_options(options)
    self.baseline = FuzzResultFactory.from_baseline(self.seed)
    self.dictio = self.get_dictio()
    self.stats = FuzzStats.from_requestGenerator(self)
    self._allvar_gen = None
    if self.seed.history.wf_allvars is not None:
    self._allvar_gen = self.__allvars_gen(self.dictio)
","  File ""<string>"", line 9
    self._allvar_gen = self.__allvars_gen(self.dictio)
       ^
IndentationError: expected an indented block
"
"def filter_rooms(self room_ids):
    """"""Apply the 'rooms' filter to a given list of rooms.""""""
    room_ids = set(room_ids)
    disallowed_rooms = set(self.filter_json.get(""not_rooms"", []))
    room_ids -= disallowed_rooms
    allowed_rooms = self.filter_json.get(""rooms"", None)
    if allowed_rooms is not None:
        room_ids &= set(allowed_rooms)
    return room_ids
","  File ""<string>"", line 1
    def filter_rooms(self room_ids):
                                 ^
SyntaxError: invalid syntax
"
"def _append_root_row(self, root_info, parent):
    """"""Append a new row to the store representing a root share.""""""
    info = sorted(root_info.iteritems(),
        key = lambda(name, data): (data.kind, name))
    for child_name, child_info in info:
        if child_info.kind == queue_content.KIND_DIR:
            self._append_folder_row(child_name, child_info, parent)
        else:
            self._append_file_row(child_name, child_info, parent)
","  File ""<string>"", line 4
    key = lambda(name, data): (data.kind, name))
                ^
SyntaxError: invalid syntax
"
"class ConditionOr(Automation):
    """"""Automation for OR condition.""""""
    def __init__(self, params):
        self.out = core.GsSldConditionOr(params[""c0""][""class""](params[""c0""])(), params[""c1""][""class""](params[""c1""])()
","  File ""<string>"", line 4
    self.out = core.GsSldConditionOr(params[""c0""][""class""](params[""c0""])(), params[""c1""][""class""](params[""c1""])()
                                                                                                                ^
SyntaxError: unexpected EOF while parsing
"
"def avg_temp(P, varname = 'O_temp'):
    """"""Example function to create avg ocean temperature from expers""""""
    for c in P.expers.values()[0].axes:
        exec c.name + ' = c'
    for k in P.expers.keys():
        if varname in P.expers[k].vars:
            mTEMP = P.expers[k].vars[varname] /(X * Y * Z)
            P.expers[k].insert(mTEMP, name = 'avg_temp')
","  File ""<string>"", line 4
    exec c.name + ' = c'
         ^
SyntaxError: Missing parentheses in call to 'exec'
"
"def set_center_abs(self, (x, y)):
    self.rect.center = (x, y)
    x_center_percent = self.page.x_px2pc(x)
    y_center_percent = self.page.y_px2pc(y)
    self.x_percent = x_center_percent -(self.width_percent / 2.0)
    self.y_percent = y_center_percent -(self.height_percent / 2.0)
","  File ""<string>"", line 1
    def set_center_abs(self, (x, y)):
                             ^
SyntaxError: invalid syntax
"
"def find_module(self, fullname, path = None):
    path = path or self.path_entry
    print('\nlooking for ""%s""\n  in %s' %(fullname, path))
    with contextlib.closing(shelve.open(self.path_entry, 'r')
        ) as db:
        key_name = _get_key_name(fullname, db)
        if key_name:
        print('  found it as %s' % key_name)
        return ShelveLoader(path)
    print('  not found')
    return None
","  File ""<string>"", line 8
    print('  found it as %s' % key_name)
        ^
IndentationError: expected an indented block
"
"def wrapper(a: int, c: chan int):
    result = 100
    c < - result
","  File ""<string>"", line 1
    def wrapper(a: int, c: chan int):
                                  ^
SyntaxError: invalid syntax
"
"def phenotype_mutants(self):
    dpm = defaultdict(set)
    for mutant, phenotypes in[(mutant, self.mutant_phenotypes(mutant))
        for mutant in self.mutants()]:
        for phenotype in phenotypes:
        dpm[phenotype].add(mutant)
    return dpm
","  File ""<string>"", line 6
    dpm[phenotype].add(mutant)
      ^
IndentationError: expected an indented block
"
"def cleanup(self):
    for user, tenant_id in utils.iterate_per_tenants(
        self.context[""users""]):
        with logging.ExceptionLogger(
            LOG, _(""Unable to delete secgroup: %s."") %
            user[""secgroup""][""name""]):
        clients = osclients.Clients(user[""endpoint""])
        clients.nova().security_groups.get(
            user[""secgroup""][""id""]).delete()
","  File ""<string>"", line 7
    clients = osclients.Clients(user[""endpoint""])
          ^
IndentationError: expected an indented block
"
"def retranslateUi(self, BandwidthDialog):
    BandwidthDialog.setWindowTitle(_translate(""BandwidthDialog"", ""Dialog"", None))
    self.button1.setText(_translate(""BandwidthDialog"", ""64KB/s \n""
","  File ""<string>"", line 3
    self.button1.setText(_translate(""BandwidthDialog"", ""64KB/s \n""
                                                                 ^
SyntaxError: unexpected EOF while parsing
"
"class MathTestCase(unittest.TestCase):
    def testInt2b128(self):
        funkylist = range(0, 100) + range(1000, 1100) + range(1000000, 1000100) +[1024 ** 10 l]
        for i in funkylist:
            x = StringIO.StringIO()
            banana.int2b128(i, x.write)
            v = x.getvalue()
            y = banana.b1282int(v)
            assert y == i, ""y = %s; i = %s"" %(y, i)
","  File ""<string>"", line 3
    funkylist = range(0, 100) + range(1000, 1100) + range(1000000, 1000100) +[1024 ** 10 l]
                                                                                         ^
SyntaxError: invalid syntax
"
"def _check_args(self, target, * args):
    """"""Check the arguments passed to start() and raise if they're wrong.""""""
    if not isinstance(target, Target):
        raise TypeError(""Target {} is no Target member!"".format(target))
    if target in(Target.userscript, Target.spawn, Target.run,
        Target.fill):
        if not args:
        raise cmdexc.CommandError(
        ""'args' is required with target userscript/spawn/run/""
        ""fill."")
    else:
        if args:
            raise cmdexc.CommandError(
                ""'args' is only allowed with target userscript/spawn."")
","  File ""<string>"", line 8
    raise cmdexc.CommandError(
        ^
IndentationError: expected an indented block
"
"def load_hpo():
    if not mongo['HPO'].find_one():
        hpo_file = open('/'.join([settings.RESOURCES_PATH, 'hpo2gene.json']))
            hpo = json.loads(hpo_file.read())
            payload = []
            for key, val in hpo.iteritems():
                payload.append({'hpo_term': key, 'genes': val})
            mongo['HPO'].insert(payload)
","  File ""<string>"", line 4
    hpo = json.loads(hpo_file.read())
    ^
IndentationError: unexpected indent
"
"def __getstate__(self) -> Dict[str, Any]:
    state = thor.events.EventEmitter.__getstate__(self)
    for key in[
        '_md5_processor',
        '_md5_post_processor',
        '_gzip_processor',
        'add_note']:
        if key in state:
        del state[key]
    return state
","  File ""<string>"", line 9
    del state[key]
      ^
IndentationError: expected an indented block
"
"def handle_premium(self, pyfile):
    self.html = json_loads(self.load(""http://fastix.ru/api_v2/"",
        get = {'apikey': self.account.get_data('apikey'),
            'sub': ""getdirectlink"",
            'link': pyfile.url})
    data = self.html)
    self.log_debug(""Json data"", data)
    if ""error\"":true"" in self.html:
        self.offline()
    else:
        self.link = data['downloadlink']
","  File ""<string>"", line 6
    data = self.html)
       ^
SyntaxError: invalid syntax
"
"class WSSimpleEcho(HTTPWebSocketsHandler):
    def on_ws_message(self, message):
        if message is None:
            message = ''
        self.send_message(message)
        self.log_message('websocket received ' % s '', str(message))
    def on_ws_connected(self):
        self.log_message('%s', 'websocket connected')
    def on_ws_closed(self):
        self.log_message('%s', 'websocket closed')
","  File ""<string>"", line 6
    self.log_message('websocket received ' % s '', str(message))
                                                ^
SyntaxError: invalid syntax
"
"def remove_devices(self, dev_list):
    """""" Remove all device listeners """"""
    for d in dev_list:
        if d.name_has_listener(self.setup_devices):
        d.remove_name_listener(self.setup_devices)
        if self._parent._can_have_nested_devices and d.can_have_chains:
        if d.chains_has_listener(self.setup_devices):
            d.remove_chains_listener(self.setup_devices)
            for c in d.chains:
            if c.devices_has_listener(self.setup_devices):
        c.remove_devices_listener(self.setup_devices)
            self.remove_devices(c.devices)
","  File ""<string>"", line 5
    d.remove_name_listener(self.setup_devices)
    ^
IndentationError: expected an indented block
"
"def nltk_stemming(vectorizer_type):
    english_stemmer = nltk.stem.SnowballStemmer('english')
    class StemmedVectorizer(vectorizer_type):
        def build_analyzer(self):
            analyser = super(StemmedVectorizer, self).build_analyzer()
            return lambda doc: (english_stemmer.stem(w) for w in analyser(doc)
    return StemmedVectorizer
","  File ""<string>"", line 7
    return StemmedVectorizer
         ^
SyntaxError: invalid syntax
"
"def __init__(self, input_iter):
    """"""TarBlockIter initializer""""""
    self.input_iter = input_iter
    self.offset = 0 l
    self.process_waiting = False
    self.process_next_vol_number = None
    self.previous_index = None
    self.previous_block = None
    self.remember_next = False
    self.remember_value = None
    self.remember_block = None
    self.queued_data = None
","  File ""<string>"", line 4
    self.offset = 0 l
                    ^
SyntaxError: invalid syntax
"
"def __setitem__(self, (channel, id), v):
    if channel not in self.channels:
        self.channels[channel] = self.IdDict()
    self.channels[channel][id] = v
","  File ""<string>"", line 1
    def __setitem__(self, (channel, id), v):
                          ^
SyntaxError: invalid syntax
"
"def repair_software_only(self):
    """"""perform software repairs only""""""
    while True:
        try:
            self.repair_filesystem_only()
            break
        except(error.AutoservSshPingHostError, error.AutoservSSHTimeout,
            error.AutoservSshPermissionDeniedError,
            error.AutoservDiskFullHostError), err:
            logging.exception('verify failed')
            logging.info('Trying to reinstall the machine')
            self._call_repair_func(err, self.machine_install)
","  File ""<string>"", line 9
    error.AutoservDiskFullHostError), err:
                                    ^
SyntaxError: invalid syntax
"
"class AuthnQueryResponse(AuthnResponse):
    msgtype = ""authn_query_response""
    def __init__(self, sec_context, attribute_converters, entity_id,
        return_addrs = None, timeslack = 0, asynchop = False, test = False):
        AuthnResponse.__init__(self, sec_context, attribute_converters,
            entity_id, return_addrs, timeslack = timeslack,
            asynchop = asynchop, test = test)
            self.entity_id = entity_id
            self.attribute_converters = attribute_converters
            self.assertion = None
            self.context = ""AuthnQuery""
    def condition_ok(self, lax = False):
        return True
","  File ""<string>"", line 8
    self.entity_id = entity_id
    ^
IndentationError: unexpected indent
"
"def _caesar(self, plaintext, shift):
    lower = string.ascii_lowercase
    lower_trans = lower[shift: ] + lower[: shift]
    alphabet = lower + lower.upper()
    shifted = lower_trans + lower_trans.upper()
    return plaintext.translate(string.maketrans(alphabet, shifted)
","  File ""<string>"", line 6
    return plaintext.translate(string.maketrans(alphabet, shifted)
                                                                 ^
SyntaxError: unexpected EOF while parsing
"
"def test_active(self):
    """"""Manager has method to return active keys only.""""""
    self.F.ApiKeyFactory.create(active = False)
    k = self.F.ApiKeyFactory.create(active = True)
    self.assertEqual(list(self.model.ApiKey.objects.active(), [k])
","  File ""<string>"", line 5
    self.assertEqual(list(self.model.ApiKey.objects.active(), [k])
                                                                 ^
SyntaxError: unexpected EOF while parsing
"
"def get_initial_image(self, node, top):
    for e in top.elements:
        if isinstance(e, topdl.Computer):
        if node == e.name:
            if e.os and len(e.os) == 1:
        return e.os[0].get_attribute(
            'emulab_access:initial_image')
    return None
","  File ""<string>"", line 4
    if node == e.name:
     ^
IndentationError: expected an indented block
"
"def print_spanning(G):
    """"""Compute MST and print the result.""""""
    print('size of G: {}'.format(G.size(weight = 'weight')))
    T = nx.minimum_spanning_tree(G)
    print('size of MST: {}'.format(T.size(weight = 'weight'))
    print('spanning edges: ')
    for i in sorted(T.edges(data = True)):
        print(i)
","  File ""<string>"", line 6
    print('spanning edges: ')
        ^
SyntaxError: invalid syntax
"
"def get_documents_for_today(self):
    '''get list of documents that will be triggered today'''
    docs = []
    diff_days = self.days_in_advance
    if self.event == ""Days After"":
        diff_days = - diff_days
    for name in frappe.db.sql_list(""""""select name from `tab{0}` where"""""".format(self.document_type,
        self.date_changed), (nowdate(), diff_days or 0)):
        doc = frappe.get_doc(self.document_type, name)
        if self.condition and not eval(self.condition, get_context(doc)):
        continue
        docs.append(doc)
    return docs
","  File ""<string>"", line 11
    continue
           ^
IndentationError: expected an indented block
"
"def retranslateUi(self, SyntaxCheckerDialog):
    _translate = QtCore.QCoreApplication.translate
    SyntaxCheckerDialog.setWindowTitle(_translate(""SyntaxCheckerDialog"", ""Syntax Check Result""))
    SyntaxCheckerDialog.setWhatsThis(_translate(""SyntaxCheckerDialog"", ""<b>Syntax Check Results</b>\n""
","  File ""<string>"", line 4
    SyntaxCheckerDialog.setWhatsThis(_translate(""SyntaxCheckerDialog"", ""<b>Syntax Check Results</b>\n""
                                                                                                     ^
SyntaxError: unexpected EOF while parsing
"
"class Stormwaterdrainsetup:
    def __init__(self, numberofStormwaterpipes, starting_value_i, ** Stormwaterpipeattributes):
        self.numberofStormwaterpipes = numberofStormwaterpipes
        self.Stormwaterpipeattributelist = []
        self.Stormwaterpipenodelist = []
        for i in range(numberofStormwaterpipes + starting_value_i)[starting_value_i: ]:
            exec 'self.Stormwaterpipeattributelist.append({""Stormwaterpipe_' + str(i) + '"" : Stormwaterpipeattributes})'
            exec '''self.line1='\\t\\t\\t<node id=""Stormwaterdrain_'+str(i)+'"" class=""Stormwaterdrain""/> \\n' '''
            alllines = ''
            for n in range(1):
                exec 'alllines += self.line' + str(n + 1)
            self.Stormwaterpipenodelist.append(alllines)
        print(str(numberofStormwaterpipes) + ' Stormwaterdrains have been created!')
        return
","  File ""<string>"", line 7
    exec 'self.Stormwaterpipeattributelist.append({""Stormwaterpipe_' + str(i) + '"" : Stormwaterpipeattributes})'
                                                                   ^
SyntaxError: invalid syntax
"
"def process(self, timeout = None):
    if DEBUG:
        print 'Read cbs: ', self._callback_map.keys()
    if DEBUG:
        print 'Write cbs: ', self._callback_write_map.keys()
    pass
","  File ""<string>"", line 3
    print 'Read cbs: ', self._callback_map.keys()
                     ^
SyntaxError: invalid syntax
"
"def testNegativeLong(self):
    self.enc.sendEncoded(- 1015 l)
    self.enc.dataReceived(self.io.getvalue())
    assert self.result == - 1015 l, ""should be -1015l, got %s"" % self.result
","  File ""<string>"", line 2
    self.enc.sendEncoded(- 1015 l)
                                ^
SyntaxError: invalid syntax
"
"def getReward(state, minAltitude, scale):
    if(state[0][2]) < minAltitude:
        return - 1.
    else
        return 1. / np.sqrt(np.sum(np.square(state[0][0: 2] / scale)))
","  File ""<string>"", line 4
    else
       ^
SyntaxError: invalid syntax
"
"def __main__():
    options, args = doc_optparse.parse(__doc__)
    try:
        refindex = int(args[0])
    except:
        doc_optparse.exit()
    maf_reader = maf.Reader(sys.stdin)
    for m in maf_reader:
    c = m.components[refindex].src
    print(c[c.rfind(""chr"") + 3: ])
","  File ""<string>"", line 9
    c = m.components[refindex].src
    ^
IndentationError: expected an indented block
"
"def run_command(cmd):
    print(""The command used: "" + cmd)
    pipe = subprocess.Popen(cmd, shell = True, stderr = subprocess.PIPE)
        pipe.wait()
    ret = pipe.returncode
    if ret:
        print(""command died: "" + str(ret))
            print(pipe.stderr.readlines())
            sys.exit(1)
    else:
        return
","  File ""<string>"", line 4
    pipe.wait()
    ^
IndentationError: unexpected indent
"
"def reduce_time_left(self, time_left):
    """"""Update the time left for generating events. This is typically""""""
    with self._lock:
        if time_left >= 0 and(self._time_left < 0
            or self._time_left > time_left):
            self._time_left = time_left
            if self._time_left == 0 and self.handler is not None:
            m = getattr(
            getattr(
            self.handler, ""im_self"", getattr(
            self.handler, ""__self__""
            )
            ),
            ""resume"", None
            )
            if m is not None and ismethod(m):
            m()
","  File ""<string>"", line 8
    m = getattr(
    ^
IndentationError: expected an indented block
"
"def __setstate__(self, (children, doctype, root)):
    FtNode.__setstate__(self, children)
    self.__dict__['__doctype'] = doctype
    self.__dict__['__documentElement'] = root
    return
","  File ""<string>"", line 1
    def __setstate__(self, (children, doctype, root)):
                           ^
SyntaxError: invalid syntax
"
"def request(url, method = 'GET', data = None):
    """"""Sends a request to the Targetprocess API""""""
        self = TargetProcess()
        if not self._api_key or self._username:
            raise TypeError('Either basic or API key credentials must be given.')
","  File ""<string>"", line 3
    self = TargetProcess()
    ^
IndentationError: unexpected indent
"
"def OnAddQuit(self, event):
    while not self.Add(event):
    True
    self.OnCancel(event)
","  File ""<string>"", line 3
    True
       ^
IndentationError: expected an indented block
"
"def extractTextFromTxt(f):
    'plain txt files.'
        from tempfile import NamedTemporaryFile
        destination = NamedTemporaryFile()
        destination.write(f.read())
        import codecs
        str = codecs.open(destination.name, 'r', 'utf-8', 'ignore')
        return str.read()
","  File ""<string>"", line 3
    from tempfile import NamedTemporaryFile
    ^
IndentationError: unexpected indent
"
"def _modules_to_main(modList):
    """"""Force every module in modList to be placed into main""""""
    if not modList:
        return
    main = sys.modules['__main__']
    for modname in modList:
        if type(modname) is str:
            try:
                mod = __import__(modname)
            except Exception, i:
                sys.stderr.write('warning: could not import %s\n.  Your function may unexpectedly error due to this import failing;  A version mismatch is likely.  Specific error was:\n' % modname)
                print_exec(sys.stderr)
            else:
                setattr(main, mod.__name__, mod)
        else:
            setattr(main, modname.__name__, modname)
","  File ""<string>"", line 10
    except Exception, i:
                    ^
SyntaxError: invalid syntax
"
"def _loadmodule(module):
    if module not in sys.modules:
        modules = module.split(""."")
        s = """"
        for i in range(len(modules)):
            s = ""."".join(modules[: i + 1])
            exec ""import "" + s
    return sys.modules[module]
","  File ""<string>"", line 7
    exec ""import "" + s
                 ^
SyntaxError: Missing parentheses in call to 'exec'
"
"def __init__(self, debug = False, dataSxtr = None, logger = None):
    super(Ds9DisplayThread, self).__init__()
    self.debug = debug
    self.dataSxtr = dataSxtr
    self.logger = logger
    self.stoprequest = threading.Event()
    self.display = None
    try:
        self.display = ds9()
    except Exception, e:
        self.logger.warn('__init__: forking ds9 failed:\n{0}'.format(e))
","  File ""<string>"", line 10
    except Exception, e:
                    ^
SyntaxError: invalid syntax
"
"class AddAmbienceConfirmationDialog(QDialog):
    def __init__(self, filenames, filepaths, cutnames):
        QDialog.__init__(self)
        self.filenames = filenames
        self.filepaths = filepaths
        self.cutnames = cutnames
        self.resize(593, 398)
        self.setStyleSheet(_fromUtf8(""background-color:#212526;""))
        self.filesListView = QtGui.QListWidget(self)
        self.filesListView.setGeometry(QtCore.QRect(20, 70, 261, 261))
        self.filesListView.setStyleSheet(_fromUtf8(""color: #98A6A8;\n""
","  File ""<string>"", line 11
    self.filesListView.setStyleSheet(_fromUtf8(""color: #98A6A8;\n""
                                                                 ^
SyntaxError: unexpected EOF while parsing
"
"def test_positive_create_with_lastname(self):
    """"""Create User for all variations of Last Name""""""
    for lastname in generate_strings_list(
        exclude_types = ['html'], max_length = 50):
        with self.subTest(lastname):
        user = entities.User(lastname = lastname).create()
        self.assertEqual(user.lastname, lastname)
","  File ""<string>"", line 6
    user = entities.User(lastname = lastname).create()
       ^
IndentationError: expected an indented block
"
"def is_batch_topic_distribution_created(path):
    """"""Checks existence and reads the batch topic distribution id from the""""""
    batch_topic_distribution_id = None
    try:
        with open(""%s%sbatch_topic_distribution""
            %(path, os.sep)) as batch_prediction_file:
            batch_topic_distribution_id = batch_prediction_file.readline().strip()
            try:
            batch_topic_distribution_id = bigml.api.get_batch_topic_distribution_id(batch_topic_distribution_id)
            return True, batch_topic_distribution_id
            except ValueError:
            return False, None
    except IOError:
        return False, None
","  File ""<string>"", line 9
    batch_topic_distribution_id = bigml.api.get_batch_topic_distribution_id(batch_topic_distribution_id)
                              ^
IndentationError: expected an indented block
"
"def test_abort(self req):
    reply = networkreply.FixedDataNetworkReply(req, b'foo', 'test/foo')
    reply.abort()
    assert reply.readAll() == b'foo'
","  File ""<string>"", line 1
    def test_abort(self req):
                          ^
SyntaxError: invalid syntax
"
"def talkToGit(refs):
    didFetch = False
    chunk = sys.stdin.read()
    if chunk == = 'capabilities\n':
        sys.stdout.write('fetch\n')
    else if chunk == = 'list\n':
        for i in refs:
            sys.stdout.write(""%s %s\n"" %(refs[i], i))
        sys.stdout.write('\n')
    else if chunk and re.search(r""^fetch"", chunk) != = None):
        didFetch = True
        for line in chunk.splitlines():
            if line == = '':
                return
            line = line.split()
            getHashInfo(line[1], line[2])
    else if chunk and chunk != = '' and chunk != = '\n':
        sys.stderr.write(""""""unhandled command: ""%s\"""""""" % chunk)
    if chunk == = '\n':
        sys.stdout.write('\n')
        if not didFetch:
            quit()
        return
","  File ""<string>"", line 4
    if chunk == = 'capabilities\n':
                ^
SyntaxError: invalid syntax
"
"def main():
    input = ""Components.h""
    output = SHORT + ""gen.py""
    defsoutput = TOOLBOXDIR + LONG + "".py""
    scanner = MyScanner(input, output, defsoutput)
    scanner.scan()
    scanner.close()
    print(""=== Testing definitions output code ==="")
    execfile(defsoutput, {}, {})
    print(""=== Done scanning and generating, now importing the generated code... ==="")
    exec ""import "" + SHORT + ""support""
    print(""=== Done.  It's up to you to compile it now! ==="")
","  File ""<string>"", line 11
    exec ""import "" + SHORT + ""support""
                 ^
SyntaxError: Missing parentheses in call to 'exec'
"
"def show_section_vehicle_type_template(self, pif, sect):
    flago = mflags.FlagList()
    sect['entry'] = [self.get_vt_model_table(pif, self.mdict[mod], flago) for mod in sect['model_ids']]
        return sect
","  File ""<string>"", line 4
    return sect
    ^
IndentationError: unexpected indent
"
"def _iteritems(self):
    """"""For backwards-compatibility with dict-based objects.""""""
    for name in self._obj.obj_fields:
        if(self._obj.obj_attr_is_set(name) or
            name in self._obj.obj_extra_fields):
            if name == 'id':
            yield name, self.id
            elif name == 'host':
            yield name, self.host
            else:
            yield name, getattr(self._obj, name)
","  File ""<string>"", line 7
    yield name, self.id
        ^
IndentationError: expected an indented block
"
"def define_tables(cls metadata):
    cls.define_reflected_tables(metadata, None)
    if testing.requires.schemas.enabled:
        cls.define_reflected_tables(metadata, testing.config.test_schema)
","  File ""<string>"", line 1
    def define_tables(cls metadata):
                                 ^
SyntaxError: invalid syntax
"
"def send_data(A: chan Sender < int >, B: chan Sender < int >, X: int, Y: int):
    while True:
        print('sending data..')
        A < - X
        B < - Y
","  File ""<string>"", line 1
    def send_data(A: chan Sender < int >, B: chan Sender < int >, X: int, Y: int):
                               ^
SyntaxError: invalid syntax
"
"def server_names_and_ips_loop(server_variable):
    serverList = []
    while server_variable > 0:
    serverName = raw_input('What is the server name? ')
    serverIP = raw_input('What is the server IP? ')
    serverName = str(serverName)
    serverIP = str(serverIP)
    serverList.append(serverName)
    serverList.append(serverIP)
    server_variable -= 1
    return serverList
","  File ""<string>"", line 4
    serverName = raw_input('What is the server name? ')
             ^
IndentationError: expected an indented block
"
"def usage(status)
    print(__doc__ % globals())
    sys.exit(status)
","  File ""<string>"", line 1
    def usage(status)
                    ^
SyntaxError: invalid syntax
"
"class ZulipDummyBackend(ZulipAuthMixin):
    """"""Used when we want to log you in but we don't know which backend to use.""""""
    def authenticate(self, username = None, realm_subdomain = None, use_dummy_backend = False,
        return_data = None):
        if use_dummy_backend:
        user_profile = common_get_active_user_by_email(username)
        if user_profile is None:
        return None
        if not check_subdomain(realm_subdomain, user_profile.realm.subdomain):
        return_data[""invalid_subdomain""] = True
        return None
        return user_profile
        return None
","  File ""<string>"", line 6
    user_profile = common_get_active_user_by_email(username)
               ^
IndentationError: expected an indented block
"
"def cb_init_hook(option, optname, value, parser):
    """"""exec arbitrary code to set sys.path for instance""""""
    exec value
","  File ""<string>"", line 3
    exec value
             ^
SyntaxError: Missing parentheses in call to 'exec'
"
"def flush(self):
    data = ''.join(self.buff)
    del self.buff[: ]
    self.buff_len = 0
    if debug_write:
        print ""write(%s)"" %(repr(data), )
    while data:
        self._wait()
        data = data[self._write(data): ]
","  File ""<string>"", line 6
    print ""write(%s)"" %(repr(data), )
                    ^
SyntaxError: invalid syntax
"
"def reg(self, identity, password):
    salt = os.urandom(64)
    x = bin_str_to_big_int(sha256(salt, password)
    verifier = mod_exp(self.config.g, x, self.config.N)
    self.server.reg(identity, salt, verifier)
","  File ""<string>"", line 4
    verifier = mod_exp(self.config.g, x, self.config.N)
           ^
SyntaxError: invalid syntax
"
"def getDataPath():
    import os
    data_path = None
    for testpath in['/mnt/crashanalysis/rkaiser/',
        '/home/rkaiser/reports/',
        '/mnt/mozilla/projects/socorro/']:
        if os.path.exists(testpath) and os.path.isdir(testpath):
        data_path = testpath
        break
    return data_path
","  File ""<string>"", line 8
    data_path = testpath
            ^
IndentationError: expected an indented block
"
"def update_docs_pull(record = False, force = False):
    """"""A high-level interface that will update all of the projects.""""""
    for version in Version.objects.filter(built = True):
        try:
            update_docs(
                pk = version.project.pk, version_pk = version.pk, record = record)
        except Exception, e:
            log.error(""update_docs_pull failed"", exc_info = True)
","  File ""<string>"", line 7
    except Exception, e:
                    ^
SyntaxError: invalid syntax
"
"class MenuCascade(MenuEntry):
    def __init__(self, text, entries, ** kw):
    self.entries = entries
    self.label = text
    self.submenu = None
    self.kwargs = kw
    def AddToMenu(self, menu):
    if menu:
        self.submenu = apply(UpdatedMenu, (menu, self.entries), self.kwargs)
        menu.add('cascade', label = self.label, menu = self.submenu.menu)
        self.menu = menu
","  File ""<string>"", line 3
    self.entries = entries
       ^
IndentationError: expected an indented block
"
"def resnet_v2_block(scope, base_depth, num_units, stride):
    """"""Helper function for creating a resnet_v2 bottleneck block.""""""
    return resnet_utils.Block(scope, bottleneck, [{
        'depth': base_depth * 4,
        'depth_bottleneck': base_depth,
        'stride': 1
    }] *(num_units - 1) +[{
        'depth': base_depth * 4,
        'depth_bottleneck': base_depth
        'stride': stride
    }])
","  File ""<string>"", line 10
    'stride': stride
           ^
SyntaxError: invalid syntax
"
"def launch_about_dialog():
    """"""Launches the Help -> About dialog""""""
    view = AboutView(qtutils.active_window())
    view.set_version(version.version()
    view.show()
","  File ""<string>"", line 5
    view.show()
       ^
SyntaxError: invalid syntax
"
"def _dcommit_calls_bypassed(cls):
    return[
        ((['git', 'config', 'branch.working.rietveldissue'], ), '12345'),
        ((['git', 'config', 'branch.working.rietveldserver'], ),
            'codereview.example.com'),
        (('GitClHooksBypassedCommit',
            'Issue https://codereview.example.com/12345 bypassed hook when '
","  File ""<string>"", line 7
    'Issue https://codereview.example.com/12345 bypassed hook when '
                                                                   ^
SyntaxError: unexpected EOF while parsing
"
"def test_page_creation_rev_doc():
    extractor = Extractor(mwapi.Session(""foobar""))
    page_creation_rev_doc = PageCreationRevDoc(ro.revision.page, extractor)
    hash(page_creation_rev_doc)
    eq_(pickle.loads(pickle.dumps(page_creation_rev_doc),
        page_creation_rev_doc)
","  File ""<string>"", line 6
    page_creation_rev_doc)
                         ^
SyntaxError: unexpected EOF while parsing
"
"class Anca:
    event died(when)
    def kill(self, time):
        return self.died(time)
","  File ""<string>"", line 2
    event died(when)
             ^
SyntaxError: invalid syntax
"
"def create(self, block_code, block_level = False):
    """"""Function to retrieve or create a question block""""""
        return_var = None
    logger.info(""""""def create():"""""" + str(block_code) + """"""block_level="""""" + str(block_level) + """""""""""")
        try:
            return_var = self.get_by_block_code(block_code = block_code)
        except QuestionBlock.DoesNotExist:
            if block_code and block_level:
                QuestionBlock_obj = QuestionBlock()
                QuestionBlock_obj.block_code = block_code
                QuestionBlock_obj.block_level = block_level
                QuestionBlock_obj.save()
                return_var = QuestionBlock_obj
        return return_var
","  File ""<string>"", line 3
    return_var = None
    ^
IndentationError: unexpected indent
"
"def test_update_endpoint_enabled_str_random(self):
    """"""Call ``PATCH /endpoints/{endpoint_id}`` with enabled: 'kitties'.""""""
    self.patch(
        '/endpoints/%(endpoint_id)s' %{
            'endpoint_id': self.endpoint_id},
        body = {'endpoint': {'enabled': 'kitties'},
        expected_status = http_client.BAD_REQUEST)
","  File ""<string>"", line 7
    expected_status = http_client.BAD_REQUEST)
                    ^
SyntaxError: invalid syntax
"
"from.command import RbxComponentSetCommandAction
from.volume import RbxComponentSetVolumeAction
from.image import RbxComponentSetImageAction
from.port import RbxComponentSetPortAction
class RbxComponentSetAction(RbxComponentSetPortAction,
    RbxComponentSetVolumeAction,
    RbxComponentSetCommandAction,
    RbxComponentSetImageAction):
    def do_action_set(self):
    getattr(self, 'do_set_{0}'.format(self.params.configurator))()
","  File ""<string>"", line 10
    getattr(self, 'do_set_{0}'.format(self.params.configurator))()
          ^
IndentationError: expected an indented block
"
"def strip_bom(data):
    """"""Strip the BOM (byte order mark) from byte string `data`.""""""
    for bom in(codecs.BOM_UTF32_BE,
        codecs.BOM_UTF32_LE,
        codecs.BOM_UTF16_BE,
        codecs.BOM_UTF16_LE,
        codecs.BOM_UTF8):
        if data.startswith(bom):
        data = data[len(bom): ]
        break
    return data
","  File ""<string>"", line 9
    data = data[len(bom): ]
       ^
IndentationError: expected an indented block
"
"def create_voucher(self, ** kw):
    """"""Create an instance of this Journal's voucher model (:meth:`get_doc_model`).""""""
    cl = self.get_doc_model()
    kw.update(journal = self)
    try:
        doc = cl()
        for k, v in kw.items():
            setattr(doc, k, v)
    except TypeError, e:
        raise
    doc.on_create(None)
    return doc
","  File ""<string>"", line 9
    except TypeError, e:
                    ^
SyntaxError: invalid syntax
"
"def open(self, pathobj):
    """"""Opens the remote file and returns a file-like object HTTPResponse""""""
    url = str(pathobj)
    raw, code = self.rest_get_stream(url, auth = pathobj.auth, verify = pathobj.verify
        cert = pathobj.cert)
    if not code == 200:
        raise RuntimeError(""%d"" % code)
    return raw
","  File ""<string>"", line 5
    cert = pathobj.cert)
       ^
SyntaxError: invalid syntax
"
"def retranslateUi(self, MainWindow):
    MainWindow.setWindowTitle(_translate(""MainWindow"", ""MainWindow"", None))
    self.widgetFrameOuter.setProperty(""class"", _translate(""MainWindow"", ""PeripheralCollection"", None))
    self.resistanceInductor.setToolTip(_translate(""MainWindow"", ""The Voltage drop measured across the inductor is a function of\n""
","  File ""<string>"", line 4
    self.resistanceInductor.setToolTip(_translate(""MainWindow"", ""The Voltage drop measured across the inductor is a function of\n""
                                                                                                                                 ^
SyntaxError: unexpected EOF while parsing
"
"def IsActiveOn(self, date, date_object = None):
    """"""Test if this service period is active on a date.""""""
    if date in self.date_exceptions:
        exception_type, _ = self.date_exceptions[date]
        if exception_type == self._EXCEPTION_TYPE_ADD:
            return True
        else:
            return False
    if(self.start_date and self.end_date and self.start_date <= date and
        date <= self.end_date):
        if date_object is None:
        date_object = util.DateStringToDateObject(date)
        return self.day_of_week[date_object.weekday()]
    return False
","  File ""<string>"", line 12
    date_object = util.DateStringToDateObject(date)
              ^
IndentationError: expected an indented block
"
"def dash_sidebar_modules(request):
    signals_call = signals.dash_modules_detect()
    if signals_call:
        if signals_call[0][1]['type'] == ""dash"":
            return{'modules': [module[1] for module in signals_call]
                'request': request}
    else:
        return{}
","  File ""<string>"", line 6
    'request': request}
            ^
SyntaxError: invalid syntax
"
"def testFormatPretty(self):
    with mock.patch.object(oauth2l, '_FetchCredentials',
        return_value = self.credentials,
        autospec = True) as mock_credentials:
        output = _GetCommandOutput('fetch', self._Args('pretty'))
        expecteds = ['oauth2client.client.AccessTokenCredentials',
        self.access_token]
        for expected in expecteds:
        self.assertIn(expected, output)
        self.assertEqual(1, mock_credentials.call_count)
","  File ""<string>"", line 9
    self.assertIn(expected, output)
       ^
IndentationError: expected an indented block
"
"def onPaint(self, evt):
    dc = self.__getClientDC()
        self.doPaint(dc)
        evt.Skip()
","  File ""<string>"", line 3
    self.doPaint(dc)
    ^
IndentationError: unexpected indent
"
"from django.conf.urls import patterns, include, url
from django.contrib import admin
admin.autodiscover()
urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls),
)
","  File ""<string>"", line 6
    )
    ^
SyntaxError: unexpected EOF while parsing
"
"def ucsdJsonParser(text):
    jsondict = None
    if text:
        try:
        jsondict = json.loads(text)
        except: pass
        try:
        jsondict = yaml.loads(text)
        except: pass
        try:
        jsondict = demjson.decode(text)
        except: pass
    return jsondict
","  File ""<string>"", line 5
    jsondict = json.loads(text)
           ^
IndentationError: expected an indented block
"
"def hostname_contains(pattern):
    hostname = socket.gethostbyaddr(socket.gethostname()[0]
    if re.search(pattern, hostname) == None:
        return False
    else:
        return True
","  File ""<string>"", line 3
    if re.search(pattern, hostname) == None:
                                           ^
SyntaxError: invalid syntax
"
"def getProcess():
    fullsc = ImageGrab.grab()
    saveProcess = fullsc.crop(Pcbox).save(wokingp + 'Process.jpg', 'JPEG')
    picPc = open(wokingp + 'Process.jpg', 'rb')
    Pmd5 = hashlib.md5(picPc.read()).hexdigest().upper()
    picPc.close()
    if Pmd5 != Pcmd5:
    click(655, 770)
    cNp()
","  File ""<string>"", line 8
    click(655, 770)
        ^
IndentationError: expected an indented block
"
"class ChromeHistoryFileDownloadedEvent(time_events.TimestampEvent):
    """"""Convenience class for a Chrome History file downloaded event.""""""
    DATA_TYPE = u'chrome:history:file_downloaded'
    def __init__(
        self, timestamp, row_id, url, full_path, received_bytes, total_bytes):
        """"""Initializes the event object.""""""
        super(ChromeHistoryFileDownloadedEvent, self).__init__(
            timestamp, eventdata.EventTimestamp.FILE_DOWNLOADED)
            self.offset = row_id
            self.url = url
            self.full_path = full_path
            self.received_bytes = received_bytes
            self.total_bytes = total_bytes
","  File ""<string>"", line 9
    self.offset = row_id
    ^
IndentationError: unexpected indent
"
"def get(self, id):
    {resource} _query = {Resources}.query.get_or_404(id)
    result = schema.dump({resource} _query).data
    return result
","  File ""<string>"", line 2
    {resource} _query = {Resources}.query.get_or_404(id)
                    ^
SyntaxError: invalid syntax
"
"def skip_checks(cls):
    super(TestGettingAddress, cls).skip_checks()
    if not(CONF.network_feature_enabled.ipv6
        and CONF.network_feature_enabled.ipv6_subnet_attributes):
        raise cls.skipException('IPv6 or its attributes not supported')
    if not(CONF.network.tenant_networks_reachable
        or CONF.network.public_network_id):
        msg = ('Either tenant_networks_reachable must be ""true"", or '
            'public_network_id must be defined.')
            raise cls.skipException(msg)
    if CONF.baremetal.driver_enabled:
        msg = ('Baremetal does not currently support network isolation')
        raise cls.skipException(msg)
","  File ""<string>"", line 10
    raise cls.skipException(msg)
    ^
IndentationError: unexpected indent
"
"def retranslateUi(self, Dialog):
    Dialog.setWindowTitle(_translate(""Dialog"", ""About FlacTag"", None))
    self.flactagBrowser.setHtml(_translate(""Dialog"", ""<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.0//EN\"" \""http://www.w3.org/TR/REC-html40/strict.dtd\"">\n""
","  File ""<string>"", line 3
    self.flactagBrowser.setHtml(_translate(""Dialog"", ""<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.0//EN\"" \""http://www.w3.org/TR/REC-html40/strict.dtd\"">\n""
                                                                                                                                                          ^
SyntaxError: unexpected EOF while parsing
"
"class Field:
    def __init__(self, (x, y, z), radius):
        self.coords = (x, y, z)
        self.radius = radius
","  File ""<string>"", line 2
    def __init__(self, (x, y, z), radius):
                       ^
SyntaxError: invalid syntax
"
"def build_bound_meth(ctx, name, sig):
    def method(self, * args, ** kw):
        adom, bdom = sig.dom[0], sig.dom[1: ]
        saturated = len(bdom) == len(args)
        if saturated:
            outsig = instantiate(ctx, sig)
            return Proxy(outsig)
        else:
            raise TypeError, '%s, expected %i arguments, got %i' %(name, len(sig.dom), len(args) + 1)
    return method
","  File ""<string>"", line 9
    raise TypeError, '%s, expected %i arguments, got %i' %(name, len(sig.dom), len(args) + 1)
                   ^
SyntaxError: invalid syntax
"
"def onClose(self, widget, action, data):
    self.hide()
        def onHighlightMenu(self, widget, action, data):
            self.eventPopup.show()
","  File ""<string>"", line 3
    def onHighlightMenu(self, widget, action, data):
    ^
IndentationError: unexpected indent
"
"def get_current_user():
    try:
        return jsonify({""id"": session['athlete_id']
            ""name"": session['athlete_name']})
    except KeyError:
        abort(404)
","  File ""<string>"", line 4
    ""name"": session['athlete_name']})
         ^
SyntaxError: invalid syntax
"
"def Ungroup(self):
    objects = []
    for obj in self.objects:
        if obj.__class__ is BlendInterpolation:
        objects.append(obj.AsGroup())
        else:
        objects.append(obj)
    return objects
","  File ""<string>"", line 5
    objects.append(obj.AsGroup())
          ^
IndentationError: expected an indented block
"
"def load_bytecode(self, f):
    """"""Loads bytecode from a file or file like object.""""""
    magic = f.read(len(bc_magic)
    if magic != bc_magic:
        self.reset()
        return
    checksum = pickle.load(f)
    if self.checksum != checksum:
        self.reset()
        return
    self.code = marshal_load(f)
","  File ""<string>"", line 4
    if magic != bc_magic:
                        ^
SyntaxError: invalid syntax
"
"def import_credential(self, file = None, data = None):
    if data:
        if self.context.load_id_chunk(data) != ABAC.ABAC_CERT_SUCCESS:
        return self.context.load_attribute_chunk(data) == ABAC.ABAC_CERT_SUCCESS
        else:
        return True
    elif file:
        if self.context.load_id_file(file) != ABAC.ABAC_CERT_SUCCESS:
        return self.context.load_attribute_file(file) == ABAC.ABAC_CERT_SUCCESS
        else:
        return True
    else:
        return False
","  File ""<string>"", line 4
    return self.context.load_attribute_chunk(data) == ABAC.ABAC_CERT_SUCCESS
         ^
IndentationError: expected an indented block
"
"def parse_BL(self, indent):
    i = 0
    while self.parse_BI_helper(indent): i = i + 1
    if i == 0: print ""Error"", sys.exit(1)
    self.reduce(BL, i, indent)
","  File ""<string>"", line 4
    if i == 0: print ""Error"", sys.exit(1)
                           ^
SyntaxError: invalid syntax
"
"def pomfremember(inp, chan = None, nick = None, say = None, db = None, adminonly = True):
    ""pomfremember <word> <url> -- Downloads file, uploads it and adds it to the dictionary""
        word, url = inp.split(None, 1)
    pomfurl = upload(url)
    strsave = ""{} {}"".format(word, pomfurl)
    hashtags.remember(strsave, nick, db)
    return(formatting.output('pomf', ['{} remembered as {}'.format(word, pomfurl)]))
","  File ""<string>"", line 3
    word, url = inp.split(None, 1)
    ^
IndentationError: unexpected indent
"
"class Solution(object):
    def bulbSwitch(self, n):
        """""":type n: int""""""
        return int(math.sqrt(n)
","  File ""<string>"", line 4
    return int(math.sqrt(n)
                          ^
SyntaxError: unexpected EOF while parsing
"
"def cumulative_sma(cls, a_bar, series, prevma):
    """"""Returns the cumulative or unweighted simple moving average.""""""
    if a_bar[0] <= 0:
    return series[0]
    else:
    return prevma +((series[a_bar[0]] - prevma) /(a_bar[0] + 1.0))
","  File ""<string>"", line 4
    return series[0]
         ^
IndentationError: expected an indented block
"
"def startElementNS(self, name, qname, attr):
    print(""QNAME: "", qname)
    print(""NAME: "", name)
    uri, elem = name
    if(elem == ""bot""): print ""name: "", attr.getValueByQName(""name""), ""a'ite?""
    self.startElement(elem, attr)
    pass
","  File ""<string>"", line 5
    if(elem == ""bot""): print ""name: "", attr.getValueByQName(""name""), ""a'ite?""
                                    ^
SyntaxError: invalid syntax
"
"def IndentLevel(by = 1):
    """"""Increment the indentation level by one.""""""
    global _Level
    if _Level + by < 0:
        raise Error, ""indentation underflow (internal error)""
    _Level = _Level + by
","  File ""<string>"", line 5
    raise Error, ""indentation underflow (internal error)""
               ^
SyntaxError: invalid syntax
"
"class Label(Widget):
    def setText(self, text):
    self.w.labelText(text)
    def __init__(self, text):
    self.w = _snack.label(text)
","  File ""<string>"", line 3
    self.w.labelText(text)
       ^
IndentationError: expected an indented block
"
"def get_nodes_with_slivers(xml, filter = {}):
    xpath = '//rspec/network/node'
        node_elems = xml.xpath(xpath)
    if not node_elems:
        node_elems = xml.xpath('//RSpec/network/node')
            return OcfVtNode.get_node_objs(node_elems)
","  File ""<string>"", line 3
    node_elems = xml.xpath(xpath)
    ^
IndentationError: unexpected indent
"
"def test_monary_count1(self):
    with self.assertRaisesRegexp(
        monary.monary.MonaryError,
        ""Invalid ns""):
        with monary.Monary() as m:
        m.query("""", ""collection"", {},
            [""x1"", ""x2"", ""x3"", ""x4"", ""x5""], [""float64""] * 5)
","  File ""<string>"", line 6
    m.query("""", ""collection"", {},
    ^
IndentationError: expected an indented block
"
"def autocomplete_light_data_attributes(attributes, prefix = ''):
    html = []
    for key, value in attributes.items()
        html.append('data-%s%s=""%s""' %(prefix, key.replace('_', '-'), value))
    return safestring.mark_safe(u' '.join(html))
","  File ""<string>"", line 3
    for key, value in attributes.items()
                                       ^
SyntaxError: invalid syntax
"
"def identifies(id, schema, table, alias)
    return id == alias or id == table or(
        schema and(id == schema + '.' + table))
","  File ""<string>"", line 1
    def identifies(id, schema, table, alias)
                                           ^
SyntaxError: invalid syntax
"
"def save_connections(self, output_dir):
    """"""Saves generated connections to output directory""""""
    for conn_grp in self.connection_groups.itervalues():
        if isinstance(conn_grp.synapse_type
            pyNN.standardmodels.synapses.ElectricalSynapse):
            attributes = 'weight'
        else:
            attributes = 'all'
        conn_grp.save(attributes, os.path.join(
            output_dir, conn_grp.label + '.proj'), format = 'list',
            gather = True)
","  File ""<string>"", line 5
    pyNN.standardmodels.synapses.ElectricalSynapse):
       ^
SyntaxError: invalid syntax
"
"def checkParameter(self, Id, (class_id, parameter_id)):
    """"""verifica che il parametro (class_id,parameter_id) sia presente per il pv Id""""""
    for p in self.session.query(rel_pv_par).filter_by(pv_id = Id).filter_by(tc_clpar_id = class_id).filter_by(tc_par_id = parameter_id):
        return True
    return False
","  File ""<string>"", line 1
    def checkParameter(self, Id, (class_id, parameter_id)):
                                 ^
SyntaxError: invalid syntax
"
"def usage():
    print(""Options:"")
        print(""    -h                Show help"")
        print(""    -d                Dump mode, don't plot"")
        print(""    -i <input_file>   Input file"")
        print(""    -t <seconds>      Step time (default 0.1)"")
        print(""    -l <number>       Iterations to show (default 10)"")
        print(""Syntax: $ python2 plot-orca.py -i <input-file>"")
        sys.exit(1)
","  File ""<string>"", line 3
    print(""    -h                Show help"")
    ^
IndentationError: unexpected indent
"
"def _handle_process_end(pid, condition, (myself, stderr)):
    myself._running = False
    if os.WIFEXITED(condition) and os.WEXITSTATUS(condition) == 0:
        myself.emit('process-management-finished')
    else:
        myself._notify_error(stderr)
","  File ""<string>"", line 1
    def _handle_process_end(pid, condition, (myself, stderr)):
                                            ^
SyntaxError: invalid syntax
"
"def get_repos(path):
    """"""Returns list of found branches.""""""
    p = str(path)
    ret = []
    if not os.path.exists(p):
        return ret
    for d in os.listdir(p):
        pd = os.path.join(p, d)
        if os.path.exists(pd) and is_repo(pd):
            ret.append(Local(pd)
    return ret
","  File ""<string>"", line 11
    return ret
         ^
SyntaxError: invalid syntax
"
"def IsHighStaff(user):
    if conf[""HighStaffPermID""] == ""0"":
        HighStaff = config[""HighStaff""].split("","")
    else:
        HighStaff = GetHighStaff()
    if user in HighStaff:
    return True
    else:
    return False
","  File ""<string>"", line 7
    return True
         ^
IndentationError: expected an indented block
"
"def draw_rubberband(self, event, x0, y0, x1, y1):
    height = self.canvas.figure.bbox.height
    y1 = height - y1
    y0 = height - y0
    w = abs(x1 - x0)
    h = abs(y1 - y0)
    rect = [int(val) for val in min(x0, x1), min(y0, y1), w, h]
    self.canvas.drawRectangle(rect)
","  File ""<string>"", line 7
    rect = [int(val) for val in min(x0, x1), min(y0, y1), w, h]
                                           ^
SyntaxError: invalid syntax
"
