code,compileable,Ground_Truth_Simple_Names,Ground_Truth_FQNs,without_import,filename
"package android;

import android.app.Activity;
import android.os.Bundle;

public class Android02 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
	}
}",True,"['Activity', 'Bundle']","['android.app.Activity', 'android.os.Bundle']","public class Android02 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item)
	}
}",Android02.java
"package android;
//ID = 26362

import android.graphics.drawable.Drawable;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.ItemizedOverlay;
import com.google.android.maps.OverlayItem;

public class Android03 extends ItemizedOverlay<OverlayItem> {

	public Android03(Drawable defaultMarker) {
		super(defaultMarker);
		populate();
	}

	@Override
	protected OverlayItem createItem(int index) {
		Double lat = (index + 37.422006) * 1E6;
		Double lng = -122.084095 * 1E6;
		GeoPoint point = new GeoPoint(lat.intValue(), lng.intValue());

		OverlayItem oi = new OverlayItem(point, ""Marker"", ""Marker Text"");
		return oi;
	}

	@Override
	public int size() {
		return 5;
	}
}",True,"['Drawable', 'GeoPoint', 'ItemizedOverlay', 'OverlayItem']","['android.graphics.drawable.Drawable', 'com.google.android.maps.GeoPoint', 'com.google.android.maps.ItemizedOverlay', 'com.google.android.maps.OverlayItem']","public class Android03 extends ItemizedOverlay<OverlayItem> {

	public Android03(Drawable defaultMarker) {
		super(defaultMarker);
		populate();
	}

	@Override
	protected OverlayItem createItem(int index) {
		Double lat = (index + 37.422006) * 1E6;
		Double lng = -122.084095 * 1E6;
		GeoPoint point = new GeoPoint(lat.intValue(), lng.intValue());

		OverlayItem oi = new OverlayItem(point, ""Marker"", ""Marker Text"");
		return oi;
	}

	@Override
	public int size() {
		return 5;

}",Android03.java
"package android;
//ID = 151777

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class Android04 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mTextView = new TextView(this);

		if (savedInstanceState == null) {
			mTextView.setText(""Welcome to HelloAndroid!"");
		} else {
			mTextView.setText(""Welcome back."");
		}

		setContentView(mTextView);
	}

	private TextView mTextView = null;
}",True,"['Activity', 'Bundle', 'TextView']","['android.app.Activity', 'android.os.Bundle', 'android.widget.TextView']","public class Android04 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mTextView = new TextView(this);

		if (savedInstanceState == null)
			mTextView.setText(""Welcome to HelloAndroid!"");
		} else {
			mTextView.setText(""Welcome back."");
		}

		setContentView(mTextView);
	}

	private TextView mTextView = null;
}",Android04.java
"package android;
//ID = 36881

import android.graphics.drawable.Drawable;
import android.widget.TabHost;
import android.widget.TabHost.TabSpec;

public class Android05 {

	public static void main(String[] args) {
		TabHost mTabs = null;
		TabSpec ts = mTabs.newTabSpec(""tab"");
		Drawable iconResource = null;
		ts.setIndicator(""TabTitle"", iconResource);

		mTabs.addTab(ts);
		mTabs.getTabWidget().removeAllViews();
		mTabs.clearAllTabs();

	}

}",True,"['Drawable', 'TabHost', 'TabSpec']","['android.graphics.drawable.Drawable', 'android.widget.TabHost', 'android.widget.TabHost.TabSpec']","public class Android05 {

	public static void main(String[] args) {
		TabHost mTabs = null;
		TabSpec ts = mTabs.newTabSpec(""tab"");
		Drawable iconResource = null;
		ts.setIndicator(""TabTitle"", iconResource)

		mTabs.addTab(ts);
		mTabs.getTabWidget().removeAllViews();
		mTabs.clearAllTabs();

	}

}",Android05.java
"package android;

import android.view.Gravity;
import android.view.ViewGroup;
import android.widget.LinearLayout;


public class Android06 {

	public static void main(String[] args) {


		LinearLayout zoomView = null;

		zoomView.setLayoutParams(
				new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

		zoomView.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL);
	}

}",True,"['Gravity', 'ViewGroup', 'LinearLayout']","['android.view.Gravity', 'android.view.ViewGroup', 'android.widget.LinearLayout']","public class Android06 {

	public static void main(String[] args)


		LinearLayout zoomView = null;

		zoomView.setLayoutParams(
				new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

		zoomView.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL);
	}

}",Android06.java
"package android;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;

//ID = 288044
public class Android07 extends Activity {

	String[] mainItems = { ""Inbox"", ""Projects"", ""Contexts"", ""Next Actions"" };

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);
		setContentView(R.layout.activity_list_item);

		setListAdapter(new ArrayAdapter<String>(this, R.layout.simple_list_item_1, mainItems));
		registerForContextMenu(getListView());
	}

	private void setListAdapter(ArrayAdapter<String> arrayAdapter) {


	}

	private View getListView() {
		return null;
	}

}",True,"['Activity', 'Bundle', 'View', 'ArrayAdapter']","['android.app.Activity', 'android.os.Bundle', 'android.view.View', 'android.widget.ArrayAdapter']","public class Android07 extends Activity {

	String[] mainItems = { ""Inbox"", ""Projects"", ""Contexts"", ""Next Actions"" };

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle)
		setContentView(R.layout.activity_list_item);

		setListAdapter(new ArrayAdapter<String>(this, R.layout.simple_list_item_1, mainItems));
		registerForContextMenu(getListView());
	}

	private void setListAdapter(ArrayAdapter<String> arrayAdapter) {


	}

	private View getListView() {
		return null;
	}

}",Android07.java
"package android;

import android.util.Log;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

//ID = 442496
public class Android08 {

	private static final String TAG = ""TAG"";

	public static void main(String[] args) {


		try {
			InetAddress server = Inet4Address.getByName(""thehost"");


			if (server.isReachable(5000)) {
				Log.d(TAG, ""Ping!"");
			}

			Socket clientsocket = new Socket(server, 8080);
		} catch (UnknownHostException e) {
			Log.e(TAG, ""Server Not Found"");
		} catch (IOException e) {
			Log.e(TAG, ""Couldn't open socket"");
		}
	}

}",True,"['Log', 'IOException', 'Inet4Address', 'InetAddress', 'Socket', 'UnknownHostException']","['android.util.Log', 'java.io.IOException', 'java.net.Inet4Address', 'java.net.InetAddress', 'java.net.Socket', 'java.net.UnknownHostException']","public class Android08 {

	private static final String TAG = ""TAG"";

	public static void main(String[] args) {


		try {
			InetAddress server = Inet4Address.getByName(""thehost"");


			if (server.isReachable(5000)) {
				Log.d(TAG, ""Ping!"")
			}

			Socket clientsocket = new Socket(server, 8080);
		} catch (UnknownHostException e) {
			Log.e(TAG, ""Server Not Found"");
		} catch (IOException e) {
			Log.e(TAG, ""Couldn't open socket"");
		}
	}

}",Android08.java
"package android;
//ID = 522800

import android.os.Bundle;
import android.widget.TextView;

import java.util.Timer;
import java.util.TimerTask;

public class Android09 {
	float seconds;
	public Timer gametimer;

	void updatecount() {
		TextView t = (TextView) findViewById(R.id.copy);
		t.setText(""Score: 10 - Time: "" + seconds + "" seconds"");
		t.postInvalidate();
	}

	private TextView findViewById(int topscore) {

		return null;
	}

	public void onCreate(Bundle sis) {

		gametimer.schedule(new TimerTask() {
			public void run() {
				seconds += 0.1;
				updatecount();
			}
		}, 100, 100);
	}
}",True,"['Bundle', 'TextView', 'Timer', 'TimerTask']","['android.os.Bundle', 'android.widget.TextView', 'java.util.Timer', 'java.util.TimerTask']","public class Android09 {
	float seconds;
	public Timer gametimer;

	void updatecount() {
		TextView t = (TextView) findViewById(R.id.copy);
		t.setText(""Score: 10 - Time: "" + seconds + "" seconds"");
		t.postInvalidate()
	}

	private TextView findViewById(int topscore) {

		return null;
	}

	public void onCreate(Bundle sis) {

		gametimer.schedule(new TimerTask() {
			public void run() {
				seconds += 0.1;
				updatecount();
			}
		}, 100, 100);
	}
}",Android09.java
"package android;

import android.os.SystemClock;
import android.util.Log;
import android.widget.Chronometer;

//ID = 526524
public class Android10 {

	public static void main(String[] args) {


		Chronometer t = (Chronometer) findViewById(R.id.copy);
		long time = SystemClock.elapsedRealtime() - t.getBase();
		Log.d(null, ""Was: "" + time);
		t.setBase(SystemClock.elapsedRealtime());
		t.start();

	}

	private static Chronometer findViewById(int toptime) {

		return null;
	}

}",True,"['SystemClock', 'Log', 'Chronometer']","['android.os.SystemClock', 'android.util.Log', 'android.widget.Chronometer']","public class Android10 {

	public static void main(String[] args) {


		Chronometer t = (Chronometer) findViewById(R.id.copy);
		long time = SystemClock.elapsedRealtime() - t.getBase();
		Log.d(null, ""Was: "" + time)
		t.setBase(SystemClock.elapsedRealtime());
		t.start();

	}

	private static Chronometer findViewById(int toptime) {

		return null;
	}

}",Android10.java
"package android;
//ID = 531324

import android.content.Context;
import android.graphics.Canvas;
import android.location.Location;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapView;
import com.google.android.maps.MyLocationOverlay;

public class Android11 extends MyLocationOverlay {

	public Android11(Context arg0, MapView arg1) {
		super(arg0, arg1);

	}

	@Override
	public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) {
		super.drawMyLocation(canvas, mapView, lastFix, myLocation, when);

		Location bLocation = new Location(""reverseGeocoded"");
		bLocation.setLatitude(FindList.gpslat);
		bLocation.setLongitude(FindList.gpslong);
		Location aLocation = new Location(""reverseGeocoded"");
		aLocation.setLatitude(myLocation.getLatitudeE6());
		aLocation.setLongitude(myLocation.getLongitudeE6());
		aLocation.set(aLocation);
		bLocation.set(bLocation);

		int distance = (int) aLocation.distanceTo(bLocation);
		String str = "" ("" + String.valueOf(distance) + "" meters)"";
	}

	static final class FindList {
		public static int gpslat = 1;
		public static int gpslong = 1;
	}
}",True,"['Context', 'Canvas', 'Location', 'GeoPoint', 'MapView', 'MyLocationOverlay']","['android.content.Context', 'android.graphics.Canvas', 'android.location.Location', 'com.google.android.maps.GeoPoint', 'com.google.android.maps.MapView', 'com.google.android.maps.MyLocationOverlay']","public class Android11 extends MyLocationOverlay {

	public Android11(Context arg0, MapView arg1) {
		super(arg0, arg1);

	}

	@Override
	public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) {
		super.drawMyLocation(canvas, mapView, lastFix, myLocation, when);

		Location bLocation = new Location(""reverseGeocoded"");
		bLocation.setLatitude(FindList.gpslat);
		bLocation.setLongitude(FindList.gpslong);
		Location aLocation = new Location(""reverseGeocoded"");
		aLocation.setLatitude(myLocation.getLatitudeE6());
		aLocation.setLongitude(myLocation.getLongitudeE6());
		aLocation.set(aLocation)
		bLocation.set(bLocation);

		int distance = (int) aLocation.distanceTo(bLocation);
		String str = "" ("" + String.valueOf(distance) + "" meters)"";
	}

	static final class FindList {
		public static int gpslat = 1;
		public static int gpslong = 1;
	}
}",Android11.java
"package android;
//ID = 549451

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;

public class Android12 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		LinearLayout l = new LinearLayout(this);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
				LinearLayout.LayoutParams.WRAP_CONTENT);
		LinearLayout.LayoutParams mlp = new LinearLayout.LayoutParams(new ViewGroup.MarginLayoutParams(
				LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
		mlp.setMargins(0, 0, 2, 0);

		for (int i = 0; i < 10; i++) {
			TextView t = new TextView(this);
			t.setText(""Hello"");
			t.setBackgroundColor(Color.RED);
			t.setSingleLine(true);
			l.addView(t, mlp);
		}

		setContentView(l, lp);
	}
}",True,"['Activity', 'Color', 'Bundle', 'ViewGroup', 'LinearLayout', 'TextView']","['android.app.Activity', 'android.graphics.Color', 'android.os.Bundle', 'android.view.ViewGroup', 'android.widget.LinearLayout', 'android.widget.TextView']","public class Android12 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		LinearLayout l = new LinearLayout(this);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
				LinearLayout.LayoutParams.WRAP_CONTENT);
		LinearLayout.LayoutParams mlp = new LinearLayout.LayoutParams(new ViewGroup.MarginLayoutParams(
				LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
		mlp.setMargins(0, 0, 2, 0)

		for (int i = 0; i < 10; i++) {
			TextView t = new TextView(this);
			t.setText(""Hello"");
			t.setBackgroundColor(Color.RED);
			t.setSingleLine(true);
			l.addView(t, mlp);
		}

		setContentView(l, lp);
	}
}",Android12.java
"package android;

import android.content.ContentResolver;
import android.graphics.Bitmap;
import android.net.Uri;
import android.provider.MediaStore.Images.Media;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

//ID = 559902
public class Android13 {
	public static void main(String[] args) {
		Uri imageUri = null;
		Bitmap bitmap = null;
		try {
			bitmap = Media.getBitmap(getContentResolver(), imageUri);
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.JPEG, 40, bytes);
		ByteArrayInputStream fileInputStream = new ByteArrayInputStream(bytes.toByteArray());
	}

	private static ContentResolver getContentResolver() {

		return null;
	}
}",True,"['ContentResolver', 'Bitmap', 'Uri', 'Media', 'ByteArrayInputStream', 'ByteArrayOutputStream', 'FileNotFoundException', 'IOException']","['android.content.ContentResolver', 'android.graphics.Bitmap', 'android.net.Uri', 'android.provider.MediaStore.Images.Media', 'java.io.ByteArrayInputStream', 'java.io.ByteArrayOutputStream', 'java.io.FileNotFoundException', 'java.io.IOException']","public class Android13 {
	public static void main(String[] args) {
		Uri imageUri = null;
		Bitmap bitmap = null;
		try {
			bitmap = Media.getBitmap(getContentResolver(), imageUri);
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace()
		}
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.JPEG, 40, bytes);
		ByteArrayInputStream fileInputStream = new ByteArrayInputStream(bytes.toByteArray());
	}

	private static ContentResolver getContentResolver() {

		return null;
	}
}",Android13.java
"package android;
//ID = 576513

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

public class Android14 {

	public static void main(String[] args) {

		try {
			URL u = new URL(""http://www.path.to/a.mp4?video"");
			HttpURLConnection c = (HttpURLConnection) u.openConnection();
			c.setRequestMethod(""GET"");
			c.setDoOutput(true);
			c.connect();
			String root = ""root"";
			FileOutputStream f = new FileOutputStream(new File(root, ""Video.mp4""));

			InputStream in = c.getInputStream();

			byte[] buffer = new byte[1024];
			int len1 = 0;
			while ((len1 = in.read(buffer)) > 0) {
				f.write(buffer);
			}
			f.close();
		} catch (MalformedURLException e) {

			e.printStackTrace();
		} catch (ProtocolException e) {

			e.printStackTrace();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

}",True,"['*', 'HttpURLConnection', 'MalformedURLException', 'ProtocolException', 'URL']","['java.io.*', 'java.net.HttpURLConnection', 'java.net.MalformedURLException', 'java.net.ProtocolException', 'java.net.URL']","public class Android14 {

	public static void main(String[] args) {

		try {
			URL u = new URL(""http://www.path.to/a.mp4?video"");
			HttpURLConnection c = (HttpURLConnection) u.openConnection();
			c.setRequestMethod(""GET"");
			c.setDoOutput(true);
			c.connect()
			String root = ""root"";
			FileOutputStream f = new FileOutputStream(new File(root, ""Video.mp4""));

			InputStream in = c.getInputStream();

			byte[] buffer = new byte[1024];
			int len1 = 0;
			while ((len1 = in.read(buffer)) > 0) {
				f.write(buffer);
			}
			f.close();
		} catch (MalformedURLException e) {

			e.printStackTrace();
		} catch (ProtocolException e) {

			e.printStackTrace();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

}",Android14.java
"package android;
//ID = 587917

import android.content.Intent;
import android.net.Uri;

public class Android15 {

	public static void main(String[] args) {

		Intent sendIntent = new Intent(Intent.ACTION_SEND);
		sendIntent.setType(""image/jpeg"");
		sendIntent.putExtra(Intent.EXTRA_SUBJECT, ""Photo"");
		sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(""file://sdcard/dcim/Camera/filename.jpg""));
		sendIntent.putExtra(Intent.EXTRA_TEXT, ""Enjoy the photo"");
		startActivity(Intent.createChooser(sendIntent, ""Email:""));
	}

	private static void startActivity(Intent createChooser) {


	}

}",True,"['Intent', 'Uri']","['android.content.Intent', 'android.net.Uri']","public class Android15 {

	public static void main(String[] args) {

		Intent sendIntent = new Intent(Intent.ACTION_SEND);
		sendIntent.setType(""image/jpeg"");
		sendIntent.putExtra(Intent.EXTRA_SUBJECT, ""Photo"");
		sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(""file://sdcard/dcim/Camera/filename.jpg""));
		sendIntent.putExtra(Intent.EXTRA_TEXT, ""Enjoy the photo"")
		startActivity(Intent.createChooser(sendIntent, ""Email:""));
	}

	private static void startActivity(Intent createChooser) {


	}

}",Android15.java
"package android;
//ID = 669764

import android.util.Log;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;

public class Android17 {
	private void Login() {
		HttpClient httpClient = new DefaultHttpClient();
		try {
			String url = ""http://192.168.1.5:8000/Login?username=test&password=test"";

			HttpGet method = new HttpGet(new URI(url));
			HttpResponse response = httpClient.execute(method);
			if (response != null) {
				Log.i(""login"", ""received "" + getResponse(response.getEntity()));
			} else {
				Log.i(""login"", ""got a null response"");
			}
		} catch (IOException e) {
			Log.e(""error"", e.getMessage());
		} catch (URISyntaxException e) {
			Log.e(""error"", e.getMessage());
		}
	}

	private String getResponse(HttpEntity entity) {
		String response = """";

		try {
			int length = (int) entity.getContentLength();
			StringBuffer sb = new StringBuffer(length);
			InputStreamReader isr = new InputStreamReader(entity.getContent(), ""UTF-8"");
			char buff[] = new char[length];
			int cnt;
			while ((cnt = isr.read(buff, 0, length - 1)) > 0) {
				sb.append(buff, 0, cnt);
			}

			response = sb.toString();
			isr.close();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		return response;
	}

}",True,"['Log', 'HttpEntity', 'HttpResponse', 'HttpClient', 'HttpGet', 'DefaultHttpClient', 'IOException', 'InputStreamReader', 'URI', 'URISyntaxException']","['android.util.Log', 'org.apache.http.HttpEntity', 'org.apache.http.HttpResponse', 'org.apache.http.client.HttpClient', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.impl.client.DefaultHttpClient', 'java.io.IOException', 'java.io.InputStreamReader', 'java.net.URI', 'java.net.URISyntaxException']","public class Android17 {
	private void Login() {
		HttpClient httpClient = new DefaultHttpClient();
		try {
			String url = ""http://192.168.1.5:8000/Login?username=test&password=test"";

			HttpGet method = new HttpGet(new URI(url));
			HttpResponse response = httpClient.execute(method);
			if (response != null) {
				Log.i(""login"", ""received "" + getResponse(response.getEntity()));
			} else {
				Log.i(""login"", ""got a null response"");
			}
		} catch (IOException e) {
			Log.e(""error"", e.getMessage());
		} catch (URISyntaxException e) {
			Log.e(""error"", e.getMessage())
		}
	}

	private String getResponse(HttpEntity entity) {
		String response = """";

		try {
			int length = (int) entity.getContentLength();
			StringBuffer sb = new StringBuffer(length);
			InputStreamReader isr = new InputStreamReader(entity.getContent(), ""UTF-8"");
			char buff[] = new char[length];
			int cnt;
			while ((cnt = isr.read(buff, 0, length - 1)) > 0) {
				sb.append(buff, 0, cnt);
			}

			response = sb.toString();
			isr.close();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		return response;
	}

}",Android17.java
"package android;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;

//ID = 724419
public class Android18 extends Activity implements OnClickListener {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		this.setTitle(""MainActivity"");
	}

	public void onClick(DialogInterface arg0, int arg1) {
		startActivity(new Intent(this, ChildActivity.class));

	}

	@Override
	public void onClick(View view) {

	}
}

class ChildActivity extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		this.setTitle(""ChildActivity"");

	}

}",True,"['Activity', 'DialogInterface', 'Intent', 'Bundle', 'View', 'OnClickListener']","['android.app.Activity', 'android.content.DialogInterface', 'android.content.Intent', 'android.os.Bundle', 'android.view.View', 'android.view.View.OnClickListener']","public class Android18 extends Activity implements OnClickListener {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		this.setTitle(""MainActivity"");


	public void onClick(DialogInterface arg0, int arg1) {
		startActivity(new Intent(this, ChildActivity.class));

	}

	@Override
	public void onClick(View view) {

	}
}

class ChildActivity extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		this.setTitle(""ChildActivity"");

	}

}",Android18.java
"package android;
//ID = 738817

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridView;
import android.widget.ImageView;

public class Android19 {
	public View getView(int position, View convertView, ViewGroup parent) {
		ImageView imageView;
		if (convertView == null) {
			Context mContext = null;

			imageView = new ImageView(mContext);
			imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
			imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
			imageView.setPadding(8, 8, 8, 8);

		} else {
			imageView = (ImageView) convertView;
		}

		int[] mThumbIds = null;
		imageView.setImageResource(mThumbIds[position]);
		return imageView;
	}

}",True,"['Context', 'View', 'ViewGroup', 'GridView', 'ImageView']","['android.content.Context', 'android.view.View', 'android.view.ViewGroup', 'android.widget.GridView', 'android.widget.ImageView']","public class Android19 {
	public View getView(int position, View convertView, ViewGroup parent) {
		ImageView imageView;
		if (convertView == null) {
			Context mContext = null;

			imageView = new ImageView(mContext);
			imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
			imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
			imageView.setPadding(8, 8, 8, 8)

		} else {
			imageView = (ImageView) convertView;
		}

		int[] mThumbIds = null;
		imageView.setImageResource(mThumbIds[position]);
		return imageView;
	}

}",Android19.java
"package android;

import android.content.Context;
import android.view.View;
import android.view.animation.ScaleAnimation;
import android.widget.TextView;

public class Android20 extends View {

	private static final int BOARD_X_OFFSET = 10;
	private static final int BOARD_Y_OFFSET = 10;

	public Android20(Context context) {
		super(context);

	}

	private TextView animText;

	private void animText(String text, int color, int xBlocks, int yBlocks) {
		animText.setText(text);
		animText.setTextColor(color);
		animText.setVisibility(View.VISIBLE);
		int xBlockSize = 2;
		final int x = BOARD_X_OFFSET + xBlocks * xBlockSize;
		int yBlockSize = 2;
		final int y = BOARD_Y_OFFSET + yBlocks * yBlockSize;
		final float SCALE_FROM = (float) 0.25;
		final float SCALE_TO = (float) 5.0;
		ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y);
		anim.setDuration(500);
		animText.setAnimation(anim);
		this.setAnimation(null);
		startAnimation(anim);
	}

}",True,"['Context', 'View', 'ScaleAnimation', 'TextView']","['android.content.Context', 'android.view.View', 'android.view.animation.ScaleAnimation', 'android.widget.TextView']","public class Android20 extends View {

	private static final int BOARD_X_OFFSET = 10;
	private static final int BOARD_Y_OFFSET = 10;

	public Android20(Context context) {
		super(context)

	}

	private TextView animText;

	private void animText(String text, int color, int xBlocks, int yBlocks) {
		animText.setText(text);
		animText.setTextColor(color);
		animText.setVisibility(View.VISIBLE);
		int xBlockSize = 2;
		final int x = BOARD_X_OFFSET + xBlocks * xBlockSize;
		int yBlockSize = 2;
		final int y = BOARD_Y_OFFSET + yBlocks * yBlockSize;
		final float SCALE_FROM = (float) 0.25;
		final float SCALE_TO = (float) 5.0;
		ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y);
		anim.setDuration(500);
		animText.setAnimation(anim);
		this.setAnimation(null);
		startAnimation(anim);
	}

}",Android20.java
"package android;

import android.content.Context;
import android.widget.ImageButton;
import android.widget.LinearLayout;

//ID = 775188
public class Android21 {

	public static void main(String[] args) {


		ImageButton b2 = new ImageButton(getApplicationContext());
		b2.setBackgroundResource(R.drawable.ic_btn_speak_now);
		LinearLayout container = (LinearLayout) findViewById(R.id.background);
		container.addView(b2);
	}

	private static LinearLayout findViewById(int lay) {

		return null;
	}

	private static Context getApplicationContext() {

		return null;
	}

}",True,"['Context', 'ImageButton', 'LinearLayout']","['android.content.Context', 'android.widget.ImageButton', 'android.widget.LinearLayout']","public class Android21 {

	public static void main(String[] args)


		ImageButton b2 = new ImageButton(getApplicationContext());
		b2.setBackgroundResource(R.drawable.ic_btn_speak_now);
		LinearLayout container = (LinearLayout) findViewById(R.id.background);
		container.addView(b2);
	}

	private static LinearLayout findViewById(int lay) {

		return null;
	}

	private static Context getApplicationContext() {

		return null;
	}

}",Android21.java
"package android;
//ID = 885641

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;

public class Android23 extends Activity {
	ImageView imView;
	ImageView imViewLine;
	String imageUrl = ""http://www.web.com/app/"";
	String FileType = "".png"";
	int imageNum = 0;
	Random r;
	int count = 0;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		r = new Random();

		ListView myListView = (ListView) findViewById(R.id.background);
		final ArrayList<String> todoItems = new ArrayList<String>();
		final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, R.layout.activity_list_item, todoItems);

		myListView.setAdapter(aa);
		for (count = 0; count < 2; count++) {

			todoItems.add(0, ""TEST"");
			downloadFile(imageUrl + Integer.toString(count) + FileType);
			aa.notifyDataSetChanged();
		}
	}

	Bitmap bmImg;

	void downloadFile(String fileUrl) {
		URL myFileUrl = null;
		try {
			myFileUrl = new URL(fileUrl);
		} catch (MalformedURLException e) {

			e.printStackTrace();
		}
		try {
			HttpURLConnection conn = (HttpURLConnection) myFileUrl.openConnection();
			conn.setDoInput(true);
			conn.connect();
			int length = conn.getContentLength();
			java.io.InputStream is = conn.getInputStream();

			bmImg = BitmapFactory.decodeStream(is);
			imViewLine.setImageBitmap(bmImg);
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

}",True,"['Activity', 'Bitmap', 'BitmapFactory', 'Bundle', 'ArrayAdapter', 'ImageView', 'ListView', 'IOException', 'HttpURLConnection', 'MalformedURLException', 'URL', 'ArrayList', 'Random']","['android.app.Activity', 'android.graphics.Bitmap', 'android.graphics.BitmapFactory', 'android.os.Bundle', 'android.widget.ArrayAdapter', 'android.widget.ImageView', 'android.widget.ListView', 'java.io.IOException', 'java.net.HttpURLConnection', 'java.net.MalformedURLException', 'java.net.URL', 'java.util.ArrayList', 'java.util.Random']","public class Android23 extends Activity {
	ImageView imView;
	ImageView imViewLine;
	String imageUrl = ""http://www.web.com/app/"";
	String FileType = "".png"";
	int imageNum = 0;
	Random r;
	int count = 0;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);
		r = new Random()

		ListView myListView = (ListView) findViewById(R.id.background);
		final ArrayList<String> todoItems = new ArrayList<String>();
		final ArrayAdapter<String> aa = new ArrayAdapter<String>(this, R.layout.activity_list_item, todoItems);

		myListView.setAdapter(aa);
		for (count = 0; count < 2; count++) {

			todoItems.add(0, ""TEST"");
			downloadFile(imageUrl + Integer.toString(count) + FileType);
			aa.notifyDataSetChanged();
		}
	}

	Bitmap bmImg;

	void downloadFile(String fileUrl) {
		URL myFileUrl = null;
		try {
			myFileUrl = new URL(fileUrl);
		} catch (MalformedURLException e) {

			e.printStackTrace();
		}
		try {
			HttpURLConnection conn = (HttpURLConnection) myFileUrl.openConnection();
			conn.setDoInput(true);
			conn.connect();
			int length = conn.getContentLength();
			java.io.InputStream is = conn.getInputStream();

			bmImg = BitmapFactory.decodeStream(is);
			imViewLine.setImageBitmap(bmImg);
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

}",Android23.java
"package android;
//ID = 896889

import android.app.Activity;
import android.content.Context;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;

import java.util.Iterator;
import java.util.List;

public class Android24 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		LocationManager l = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		List<String> li = l.getAllProviders();
		for (Iterator<String> iterator = li.iterator(); iterator.hasNext();) {
			String string = iterator.next();
			Log.d(""gps"", string);
		}
		if (l.getLastKnownLocation(""gps"") == null)
			Log.d(""gps"", ""null"");
	}
}",True,"['Activity', 'Context', 'LocationManager', 'Bundle', 'Log', 'Iterator', 'List']","['android.app.Activity', 'android.content.Context', 'android.location.LocationManager', 'android.os.Bundle', 'android.util.Log', 'java.util.Iterator', 'java.util.List']","public class Android24 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		LocationManager l = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		List<String> li = l.getAllProviders();
		for (Iterator<String> iterator = li.iterator(); iterator.hasNext();) {
			String string = iterator.next();
			Log.d(""gps"", string)
		}
		if (l.getLastKnownLocation(""gps"") == null)
			Log.d(""gps"", ""null"");
	}
}",Android24.java
"package android;
//ID = 901057

import android.app.ListActivity;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;

import java.util.ArrayList;

public class Android25 extends ListActivity {

	private final String MY_DATABASE_NAME = ""myCoolUserDB.db"";
	private final String MY_DATABASE_TABLE = ""t_Users"";
	Context c;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		ArrayList<String> results = new ArrayList<String>();
		setContentView(R.layout.activity_list_item);
		SQLiteDatabase mydb = null;
		try {
			mydb.openOrCreateDatabase(MY_DATABASE_NAME, null);

		} catch (Exception e) {
		}
	}

}",True,"['ListActivity', 'Context', 'SQLiteDatabase', 'Bundle', 'ArrayList']","['android.app.ListActivity', 'android.content.Context', 'android.database.sqlite.SQLiteDatabase', 'android.os.Bundle', 'java.util.ArrayList']","public class Android25 extends ListActivity {

	private final String MY_DATABASE_NAME = ""myCoolUserDB.db"";
	private final String MY_DATABASE_TABLE = ""t_Users"";
	Context c

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		ArrayList<String> results = new ArrayList<String>();
		setContentView(R.layout.activity_list_item);
		SQLiteDatabase mydb = null;
		try {
			mydb.openOrCreateDatabase(MY_DATABASE_NAME, null);

		 catch (Exception e) {
		}
	}

}",Android25.java
"package android;
//ID = 904376

import android.content.Context;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.ScrollView;

public class Android26 extends ScrollView {

	public Android26(Context context) {
		super(context);
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		return false;

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		return false;

	}
}

class GameView extends View implements OnTouchListener {

	public GameView(Context context) {
		super(context);

	}

	public boolean onKey(View v, int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {

		}
		invalidate();
		return true;
	}

	@Override
	public boolean onTouch(View arg0, MotionEvent arg1) {

		return false;
	}
}",True,"['Context', 'KeyEvent', 'MotionEvent', 'View', 'OnTouchListener', 'ScrollView']","['android.content.Context', 'android.view.KeyEvent', 'android.view.MotionEvent', 'android.view.View', 'android.view.View.OnTouchListener', 'android.widget.ScrollView']","public class Android26 extends ScrollView {

	public Android26(Context context) {
		super(context);
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		return false;

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		return false;

	}
}

class GameView extends View implements OnTouchListener {

	public GameView(Context context) {
		super(context);

	}

	public boolean onKey(View v, int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {

		}
		invalidate();
		return true;
	}

	@Override
	public boolean onTouch(View arg0, MotionEvent arg1)

		return false;
	}
}",Android26.java
"package android;
//ID = 982386

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.TextView;

public class Android27 extends BaseAdapter {

	private Context context;
	private String[] texts = { ""aaa"", ""bbb"", ""ccc"", ""ddd"", ""eee"", ""fff"", ""eee"", ""hhh"", ""iii"" };

	public Android27(Context context) {
		this.context = context;
	}

	public int getCount() {
		return 9;
	}

	public Object getItem(int position) {
		return null;
	}

	public long getItemId(int position) {
		return 0;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		TextView tv;
		if (convertView == null) {
			tv = new TextView(context);
			tv.setLayoutParams(new GridView.LayoutParams(85, 85));
		} else {
			tv = (TextView) convertView;
		}

		tv.setText(texts[position]);
		return tv;
	}
}",True,"['Context', 'View', 'ViewGroup', 'BaseAdapter', 'GridView', 'TextView']","['android.content.Context', 'android.view.View', 'android.view.ViewGroup', 'android.widget.BaseAdapter', 'android.widget.GridView', 'android.widget.TextView']","public class Android27 extends BaseAdapter {

	private Context context;
	private String[] texts = { ""aaa"", ""bbb"", ""ccc"", ""ddd"", ""eee"", ""fff"", ""eee"", ""hhh"", ""iii"" };

	public Android27(Context context)
		this.context = context;
	}

	public int getCount() {
		return 9;
	}

	public Object getItem(int position) {
		return null;
	}

	public long getItemId(int position) {
		return 0;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		TextView tv;
		if (convertView == null) {
			tv = new TextView(context);
			tv.setLayoutParams(new GridView.LayoutParams(85, 85));
		} else {
			tv = (TextView) convertView;
		}

		tv.setText(texts[position]);
		return tv;
	}
}",Android27.java
"package android;

import android.app.Application;

import javax.naming.Context;

public class Android28 extends Application {

	private static Android28 instance;

	public Android28() {
		instance = this;
	}

	public static Context getContext() {
		return (Context) instance;
	}

}",True,"['Application', 'Context']","['android.app.Application', 'javax.naming.Context']","public class Android28 extends Application {

	private static Android28 instance;

	public Android28()
		instance = this;
	}

	public static Context getContext() {
		return (Context) instance;
	}

}",Android28.java
"package android;
//ID = 992508

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.os.PowerManager;

public class Android29 extends Service {

	@Override
	public IBinder onBind(Intent arg0) {

		return null;
	}

	@Override
	public void onCreate() {
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
		wl.acquire();
	}

	@Override
	public void onDestroy() {
		PowerManager.WakeLock wl = null;
		wl.release();
	}

}",True,"['Service', 'Context', 'Intent', 'IBinder', 'PowerManager']","['android.app.Service', 'android.content.Context', 'android.content.Intent', 'android.os.IBinder', 'android.os.PowerManager']","public class Android29 extends Service {

	@Override
	public IBinder onBind(Intent arg0) {

		return null;
	}

	@Override
	public void onCreate() {
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
		wl.acquire();
	}

	@Override
	public void onDestroy() {
		PowerManager.WakeLock wl = null;
		wl.release()
	}

}",Android29.java
"package android;
//ID = 992880


import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import java.io.IOException;

public class Android30 {

	public static String main(String[] args) {

		HttpHost target = new HttpHost(""http://"" + ServiceWrapper.SERVER_HOST, ServiceWrapper.SERVER_PORT);
        HttpGet get = new HttpGet(""/list"");
        String result=null;
     HttpEntity entity = null;
     HttpClient client = new DefaultHttpClient();
     try {
    HttpResponse response=client.execute(target, get);
    entity = response.getEntity();
    result = EntityUtils.toString(entity);
   } catch (Exception e) {
    e.printStackTrace();
   } finally {
    if (entity!=null)
     try {
      entity.consumeContent();
     } catch (IOException e) {}
   }
   return result;
	}

}

class ServiceWrapper
{
	static String SERVER_HOST = ""host"";
	static int SERVER_PORT = 8080;
}",True,"['HttpEntity', 'HttpHost', 'HttpResponse', 'HttpClient', 'HttpGet', 'DefaultHttpClient', 'EntityUtils', 'IOException']","['org.apache.http.HttpEntity', 'org.apache.http.HttpHost', 'org.apache.http.HttpResponse', 'org.apache.http.client.HttpClient', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.impl.client.DefaultHttpClient', 'org.apache.http.util.EntityUtils', 'java.io.IOException']","public class Android30 {

	public static String main(String[] args) {

		HttpHost target = new HttpHost(""http://"" + ServiceWrapper.SERVER_HOST, ServiceWrapper.SERVER_PORT);
        HttpGet get = new HttpGet(""/list"");
        String result=null
     HttpEntity entity = null;
     HttpClient client = new DefaultHttpClient();
     try {
    HttpResponse response=client.execute(target, get);
    entity = response.getEntity();
    result = EntityUtils.toString(entity);
   } catch (Exception e) {
    e.printStackTrace();
   } finally {
    if (entity!=null)
     try {
      entity.consumeContent();
     } catch (IOException e) {}
   }
   return result;
	}

}

class ServiceWrapper
{
	static String SERVER_HOST = ""host"";
	static int SERVER_PORT = 8080;
}",Android30.java
"package android;
//ID = 993137

import android.content.Context;
import android.os.PowerManager;

public class Android31 {

	public static void main(String[] args) {


		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
	}

	private static PowerManager getSystemService(String powerService) {

		return null;
	}

}",True,"['Context', 'PowerManager']","['android.content.Context', 'android.os.PowerManager']","public class Android31 {

	public static void main(String[] args)


		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
	}

	private static PowerManager getSystemService(String powerService) {

		return null;
	}

}",Android31.java
"package android;
//ID = 1032912

import android.media.MediaRecorder;
import android.os.Environment;

import java.io.File;
import java.io.IOException;

public class Android32 {
	public void start() throws IOException {
		String state = android.os.Environment.getExternalStorageState();
		if (!state.equals(Environment.MEDIA_MOUNTED)) {
			throw new IOException(""SD card is not mounted. It is "" + state + ""."");
		}
		String path = ""Root"";
		File directory = new File(path).getParentFile();
		if (!directory.exists() && !directory.mkdirs()) {
			throw new IOException(""Path to file could not be created."");
		}
		MediaRecorder recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263);
		recorder.setVideoFrameRate(15);
		recorder.setVideoSize(176, 144);
		recorder.setOutputFile(path);
		recorder.prepare();
		recorder.start();
	}
}",True,"['MediaRecorder', 'Environment', 'File', 'IOException']","['android.media.MediaRecorder', 'android.os.Environment', 'java.io.File', 'java.io.IOException']","public class Android32 {
	public void start() throws IOException {
		String state = android.os.Environment.getExternalStorageState();
		if (!state.equals(Environment.MEDIA_MOUNTED)) {
			throw new IOException(""SD card is not mounted. It is "" + state + ""."");
		}
		String path = ""Root""
		File directory = new File(path).getParentFile();
		if (!directory.exists() && !directory.mkdirs()) {
			throw new IOException(""Path to file could not be created."");
		}
		MediaRecorder recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263);
		recorder.setVideoFrameRate(15);
		recorder.setVideoSize(176, 144);
		recorder.setOutputFile(path);
		recorder.prepare();
		recorder.start();
	}
}",Android32.java
"package android;
//ID = 1048739

import android.content.Context;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.view.SurfaceHolder;

import java.io.IOException;

public class Android33 {
	private void init(Context context) {
		boolean mRecording = false;

		int frameCount = 0;
		Camera mCamera = null;
		if (mCamera == null) {
			mCamera = Camera.open();
		}
		Parameters parameters = mCamera.getParameters();
		parameters.setPictureFormat(PixelFormat.JPEG);
		mCamera.setParameters(parameters);
		try {
			SurfaceHolder surfaceHolder = null;
			mCamera.setPreviewDisplay(surfaceHolder);
		} catch (IOException e) {

			e.printStackTrace();
		}
		mCamera.startPreview();

	}
}",True,"['Context', 'PixelFormat', 'Camera', 'Parameters', 'SurfaceHolder', 'IOException']","['android.content.Context', 'android.graphics.PixelFormat', 'android.hardware.Camera', 'android.hardware.Camera.Parameters', 'android.view.SurfaceHolder', 'java.io.IOException']","public class Android33 {
	private void init(Context context) {
		boolean mRecording = false;

		int frameCount = 0;
		Camera mCamera = null;
		if (mCamera == null) {
			mCamera = Camera.open();
		}
		Parameters parameters = mCamera.getParameters();
		parameters.setPictureFormat(PixelFormat.JPEG);
		mCamera.setParameters(parameters)
		try {
			SurfaceHolder surfaceHolder = null;
			mCamera.setPreviewDisplay(surfaceHolder);
		} catch (IOException e) {

			e.printStackTrace();
		}
		mCamera.startPreview();

	}
}",Android33.java
"package android;

import android.media.MediaRecorder;

import java.io.File;
import java.io.IOException;

public class Android35 {
	private void recordVideoStart() {
		MediaRecorder recorder = new MediaRecorder();
		if (recorder != null) {
			recorder.stop();
			recorder.release();
		}
		File file = new File(""/sdcard/videoTest.3gpp"");
		try {
			file.createNewFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setOutputFile(file.getAbsolutePath());
		recorder.setVideoSize(176, 144);
		recorder.setVideoFrameRate(15);

		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT);
		recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

		try {
			recorder.prepare();
		} catch (IllegalStateException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
		recorder.start();
	}

}",True,"['MediaRecorder', 'File', 'IOException']","['android.media.MediaRecorder', 'java.io.File', 'java.io.IOException']","public class Android35 {
	private void recordVideoStart() {
		MediaRecorder recorder = new MediaRecorder();
		if (recorder != null) {
			recorder.stop()
			recorder.release();
		}
		File file = new File(""/sdcard/videoTest.3gpp"");
		try {
			file.createNewFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setOutputFile(file.getAbsolutePath());
		recorder.setVideoSize(176, 144);
		recorder.setVideoFrameRate(15);

		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT);
		recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

		try {
			recorder.prepare();
		} catch (IllegalStateException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
		recorder.start();
	}

}",Android35.java
"package android;
//ID = 1105141

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;

public class Android36 {
	private static final String KEY_NAME = ""My Key"";
	private static final String VALUE = ""My Value"";
	private static final String DATABASE_TABLE = ""DB"";

	private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) {
		long res = -1;
		ContentValues settingsParameterValues = new ContentValues();
		settingsParameterValues.put(KEY_NAME, rowParameter);
		settingsParameterValues.put(VALUE, rowValue);
		if (db != null) {
			res = db.insert(DATABASE_TABLE, null, settingsParameterValues);
		}
		return res;
	}

	public static void main(String[] args) {


	}

}",True,"['ContentValues', 'SQLiteDatabase']","['android.content.ContentValues', 'android.database.sqlite.SQLiteDatabase']","public class Android36 {
	private static final String KEY_NAME = ""My Key""
	private static final String VALUE = ""My Value"";
	private static final String DATABASE_TABLE = ""DB"";

	private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) {
		long res = -1;
		ContentValues settingsParameterValues = new ContentValues();
		settingsParameterValues.put(KEY_NAME, rowParameter);
		settingsParameterValues.put(VALUE, rowValue);
		if (db != null) {
			res = db.insert(DATABASE_TABLE, null, settingsParameterValues);
		}
		return res;
	}

	public static void main(String[] args) {


	}

}",Android36.java
"package android;
//ID = 1111980

import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Handler;
import android.os.Message;

public class Android37 extends Activity implements Runnable {
	public ProgressDialog mProgress;



	public void send() {
		mProgress = ProgressDialog.show(this, ""Please wait"", ""Please wait"", true, true);
		Thread thread = new Thread(this);
		thread.start();
	}

	public void run() {
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {

			e.printStackTrace();
		}
		Message msg = new Message();
		mHandler.sendMessage(msg);
	}

	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mProgress.dismiss();
		}
	};
}",True,"['Activity', 'ProgressDialog', 'Handler', 'Message']","['android.app.Activity', 'android.app.ProgressDialog', 'android.os.Handler', 'android.os.Message']","public class Android37 extends Activity implements Runnable {
	public ProgressDialog mProgress;



	public void send()
		mProgress = ProgressDialog.show(this, ""Please wait"", ""Please wait"", true, true);
		Thread thread = new Thread(this);
		thread.start();
	}

	public void run() {
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {

			e.printStackTrace();
		}
		Message msg = new Message();
		mHandler.sendMessage(msg);
	}

	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mProgress.dismiss();
		}
	}
}",Android37.java
"package android;
//ID = 1118447

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class Android38 {
	static String serviceDomain = ""http://staging.abaqus.net"";
	static String postUrl = serviceDomain + ""/geo/upl/wupload/pictures"";
	static String CRLF = ""\r\n"";
	static String twoHyphens = ""--"";
	static String boundary = ""*****mgd*****"";

	private String name = null;
	private String password = null;
	private DataOutputStream dataStream = null;

	enum ReturnCode {
						noPicture,
						unknown,
						http201,
						http400,
						http401,
						http403,
						http404,
						http500
	};

	public Android38(String name, String password) {
		this.name = name;
		this.password = password;
	}

	public static void setServiceDomain(String domainName) {
		serviceDomain = domainName;
	}

	public static String getServiceDomain() {
		return serviceDomain;
	}

	public ReturnCode uploadPicture(String pictureFileName) {
		File uploadFile = new File(pictureFileName);

		if (uploadFile.exists())
			try {
				FileInputStream fileInputStream = new FileInputStream(uploadFile);
				URL connectURL = new URL(postUrl);
				HttpURLConnection conn = (HttpURLConnection) connectURL.openConnection();

				conn.setDoInput(true);
				conn.setDoOutput(true);
				conn.setUseCaches(false);
				conn.setRequestMethod(""POST"");

				conn.setRequestProperty(""User-Agent"", ""myGeodiary-V1"");
				conn.setRequestProperty(""Connection"", ""Keep-Alive"");
				conn.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary="" + boundary);

				conn.connect();

				dataStream = new DataOutputStream(conn.getOutputStream());

				writeFormField(""login"", name);
				writeFormField(""password"", password);
				writeFileField(""photo1"", pictureFileName, ""image/jpg"", fileInputStream);


				dataStream.writeBytes(twoHyphens + boundary + twoHyphens + CRLF);

				fileInputStream.close();
				dataStream.flush();
				dataStream.close();
				dataStream = null;

				String response = getResponse(conn);
				conn.getResponseCode();

				if (response.contains(""uploaded successfully""))
					return ReturnCode.http201;
				else

					return ReturnCode.http401;
			} catch (MalformedURLException mue) {

				System.out.println(""GeoPictureUploader.uploadPicture: Malformed URL: "" + mue.getMessage());
				return ReturnCode.http400;
			} catch (IOException ioe) {

				System.out.println(""GeoPictureUploader.uploadPicture: IOE: "" + ioe.getMessage());
				return ReturnCode.http500;
			} catch (Exception e) {

				System.out.println(""GeoPictureUploader.uploadPicture: unknown: "" + e.getMessage());
				return ReturnCode.unknown;
			}
		else {
			return ReturnCode.noPicture;
		}
	}


	private String getResponse(HttpURLConnection conn) {
		try {
			DataInputStream dis = new DataInputStream(conn.getInputStream());
			byte[] data = new byte[1024];
			int len = dis.read(data, 0, 1024);

			dis.close();
			conn.getResponseCode();

			if (len > 0)
				return new String(data, 0, len);
			else
				return """";
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader: biffed it getting HTTPResponse"");

			return """";
		}
	}

	private String getResponseOrig(HttpURLConnection conn) {
		InputStream is = null;
		try {
			is = conn.getInputStream();

			int ch;
			StringBuffer sb = new StringBuffer();
			while ((ch = is.read()) != -1) {
				sb.append((char) ch);
			}
			return sb.toString();
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader: biffed it getting HTTPResponse"");

		} finally {
			try {
				if (is != null)
					is.close();
			} catch (Exception e) {
			}
		}

		return """";
	}


	private void writeFormField(String fieldName, String fieldValue) {
		try {
			dataStream.writeBytes(twoHyphens + boundary + CRLF);
			dataStream.writeBytes(""Content-Disposition: form-data; name=\"""" + fieldName + ""\"""" + CRLF);
			dataStream.writeBytes(CRLF);
			dataStream.writeBytes(fieldValue);
			dataStream.writeBytes(CRLF);
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader.writeFormField: got: "" + e.getMessage());

		}
	}


	private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) {
		try {

			dataStream.writeBytes(twoHyphens + boundary + CRLF);
			dataStream.writeBytes(""Content-Disposition: form-data; name=\"""" + fieldName + ""\"";filename=\"""" + fieldValue
					+ ""\"""" + CRLF);
			dataStream.writeBytes(""Content-Type: "" + type + CRLF);
			dataStream.writeBytes(CRLF);


			int bytesAvailable = fis.available();
			int maxBufferSize = 1024;
			int bufferSize = Math.min(bytesAvailable, maxBufferSize);
			byte[] buffer = new byte[bufferSize];

			int bytesRead = fis.read(buffer, 0, bufferSize);
			while (bytesRead > 0) {
				dataStream.write(buffer, 0, bufferSize);
				bytesAvailable = fis.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fis.read(buffer, 0, bufferSize);
			}


			dataStream.writeBytes(CRLF);
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader.writeFormField: got: "" + e.getMessage());

		}
	}


	public static void main(String[] args) {
		if (args.length >= 0) {
			Android38 gpu = new Android38(""john"", ""notmyrealpassword"");
			String picName = args[0];

			gpu.uploadPicture(picName);
			System.out.printf(""done"");
		}
	}

}",True,"['*', 'HttpURLConnection', 'MalformedURLException', 'URL']","['java.io.*', 'java.net.HttpURLConnection', 'java.net.MalformedURLException', 'java.net.URL']","public class Android38 {
	static String serviceDomain = ""http://staging.abaqus.net"";
	static String postUrl = serviceDomain + ""/geo/upl/wupload/pictures"";
	static String CRLF = ""\r\n"";
	static String twoHyphens = ""--"";
	static String boundary = ""*****mgd*****"";

	private String name = null;
	private String password = null;
	private DataOutputStream dataStream = null;

	enum ReturnCode {
						noPicture,
						unknown,
						http201,
						http400,
						http401,
						http403,
						http404,
						http500
	};

	public Android38(String name, String password) {
		this.name = name;
		this.password = password;
	}

	public static void setServiceDomain(String domainName) {
		serviceDomain = domainName;
	}

	public static String getServiceDomain() {
		return serviceDomain;
	}

	public ReturnCode uploadPicture(String pictureFileName) {
		File uploadFile = new File(pictureFileName);

		if (uploadFile.exists())
			try {
				FileInputStream fileInputStream = new FileInputStream(uploadFile);
				URL connectURL = new URL(postUrl);
				HttpURLConnection conn = (HttpURLConnection) connectURL.openConnection();

				conn.setDoInput(true);
				conn.setDoOutput(true);
				conn.setUseCaches(false);
				conn.setRequestMethod(""POST"");

				conn.setRequestProperty(""User-Agent"", ""myGeodiary-V1"");
				conn.setRequestProperty(""Connection"", ""Keep-Alive"");
				conn.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary="" + boundary);

				conn.connect();

				dataStream = new DataOutputStream(conn.getOutputStream());

				writeFormField(""login"", name)
				writeFormField(""password"", password);
				writeFileField(""photo1"", pictureFileName, ""image/jpg"", fileInputStream);


				dataStream.writeBytes(twoHyphens + boundary + twoHyphens + CRLF);

				fileInputStream.close();
				dataStream.flush();
				dataStream.close();
				dataStream = null;

				String response = getResponse(conn);
				conn.getResponseCode();

				if (response.contains(""uploaded successfully""))
					return ReturnCode.http201;
				else

					return ReturnCode.http401;
			} catch (MalformedURLException mue) {

				System.out.println(""GeoPictureUploader.uploadPicture: Malformed URL: "" + mue.getMessage());
				return ReturnCode.http400;
			} catch (IOException ioe) {

				System.out.println(""GeoPictureUploader.uploadPicture: IOE: "" + ioe.getMessage());
				return ReturnCode.http500;
			} catch (Exception e) {

				System.out.println(""GeoPictureUploader.uploadPicture: unknown: "" + e.getMessage());
				return ReturnCode.unknown;
			}
		else {
			return ReturnCode.noPicture;
		}
	}


	private String getResponse(HttpURLConnection conn) {
		try {
			DataInputStream dis = new DataInputStream(conn.getInputStream());
			byte[] data = new byte[1024];
			int len = dis.read(data, 0, 1024);

			dis.close();
			conn.getResponseCode();

			if (len > 0)
				return new String(data, 0, len);
			else
				return """";
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader: biffed it getting HTTPResponse"");

			return """";
		}
	}

	private String getResponseOrig(HttpURLConnection conn) {
		InputStream is = null;
		try {
			is = conn.getInputStream();

			int ch;
			StringBuffer sb = new StringBuffer();
			while ((ch = is.read()) != -1) {
				sb.append((char) ch);
			}
			return sb.toString();
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader: biffed it getting HTTPResponse"");

		} finally {
			try {
				if (is != null)
					is.close();
			} catch (Exception e) {
			}
		}

		return """";
	}


	private void writeFormField(String fieldName, String fieldValue) {
		try {
			dataStream.writeBytes(twoHyphens + boundary + CRLF);
			dataStream.writeBytes(""Content-Disposition: form-data; name=\"""" + fieldName + ""\"""" + CRLF);
			dataStream.writeBytes(CRLF);
			dataStream.writeBytes(fieldValue);
			dataStream.writeBytes(CRLF);
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader.writeFormField: got: "" + e.getMessage());

		}
	}


	private void writeFileField(String fieldName, String fieldValue, String type, FileInputStream fis) {
		try {

			dataStream.writeBytes(twoHyphens + boundary + CRLF);
			dataStream.writeBytes(""Content-Disposition: form-data; name=\"""" + fieldName + ""\"";filename=\"""" + fieldValue
					+ ""\"""" + CRLF);
			dataStream.writeBytes(""Content-Type: "" + type + CRLF);
			dataStream.writeBytes(CRLF);


			int bytesAvailable = fis.available();
			int maxBufferSize = 1024;
			int bufferSize = Math.min(bytesAvailable, maxBufferSize);
			byte[] buffer = new byte[bufferSize];

			int bytesRead = fis.read(buffer, 0, bufferSize);
			while (bytesRead > 0) {
				dataStream.write(buffer, 0, bufferSize);
				bytesAvailable = fis.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fis.read(buffer, 0, bufferSize);
			}


			dataStream.writeBytes(CRLF);
		} catch (Exception e) {
			System.out.println(""GeoPictureUploader.writeFormField: got: "" + e.getMessage());

		}
	}


	public static void main(String[] args) {
		if (args.length >= 0) {
			Android38 gpu = new Android38(""john"", ""notmyrealpassword"");
			String picName = args[0];

			gpu.uploadPicture(picName);
			System.out.printf(""done"");
		}
	}

}",Android38.java
"package android;
//ID = 1153920

import android.os.Bundle;
import com.google.android.maps.*;

import java.util.List;

public class Android39 extends MapActivity {

	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);

		setContentView(R.layout.activity_list_item);

		MapView myMapView = (MapView) findViewById(R.id.background);
		MapController mapController = myMapView.getController();

		List<Overlay> overlays = myMapView.getOverlays();
		MyLocationOverlay myLocationOverlay = new MyLocationOverlay(this, myMapView);
		overlays.add(myLocationOverlay);
		myLocationOverlay.enableMyLocation();
	}

	protected boolean isRouteDisplayed() {

		return false;
	}

}",True,"['Bundle', '*', 'List']","['android.os.Bundle', 'com.google.android.maps.*', 'java.util.List']","public class Android39 extends MapActivity {

	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);

		setContentView(R.layout.activity_list_item);

		MapView myMapView = (MapView) findViewById(R.id.background);
		MapController mapController = myMapView.getController();

		List<Overlay> overlays = myMapView.getOverlays();
		MyLocationOverlay myLocationOverlay = new MyLocationOverlay(this, myMapView);
		overlays.add(myLocationOverlay);
		myLocationOverlay.enableMyLocation();
	}

	protected boolean isRouteDisplayed()

		return false;
	}

}",Android39.java
"package android;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.SlidingDrawer;

//ID= 1163812
public class Android40 extends Activity {

	public static void main(String[] args) {


	}

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		SlidingDrawer drawer = (SlidingDrawer) findViewById(R.id.background);

		ImageView handle = (ImageView) findViewById(R.id.cut);
		handle.setFocusable(true);

		handle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				Log.i(""test"", ""onClick"");
			}

		});

	}
}",True,"['Activity', 'Bundle', 'Log', 'View', 'OnClickListener', 'ImageView', 'SlidingDrawer']","['android.app.Activity', 'android.os.Bundle', 'android.util.Log', 'android.view.View', 'android.view.View.OnClickListener', 'android.widget.ImageView', 'android.widget.SlidingDrawer']","public class Android40 extends Activity {

	public static void main(String[] args) {


	}

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		SlidingDrawer drawer = (SlidingDrawer) findViewById(R.id.background);

		ImageView handle = (ImageView) findViewById(R.id.cut);
		handle.setFocusable(true);

		handle.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				Log.i(""test"", ""onClick"");
			}

		})

	}
}",Android40.java
"package android;
//ID = 1182620

import android.content.Context;
import android.view.View;
import android.widget.TextView;

import java.awt.*;

public class Android41 extends View {
	public Android41(Context context) {
		super(context);
		setBackgroundColor(Color.RED);
	}

	private void setBackgroundColor(Color red) {
	}

	TextView tv;

	public void adText(TextView tv) {
		this.tv = tv;
		tv.setVisibility(tv.VISIBLE);
	}
}",True,"['Context', 'View', 'TextView', '*']","['android.content.Context', 'android.view.View', 'android.widget.TextView', 'java.awt.*']","public class Android41 extends View {
	public Android41(Context context) {
		super(context);
		setBackgroundColor(Color.RED);
	}

	private void setBackgroundColor(Color red) {
	}

	TextView tv;

	public void adText(TextView tv) {
		this.tv = tv;
		tv.setVisibility(tv.VISIBLE)
	}
}",Android41.java
"package android;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.PixelFormat;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnBufferingUpdateListener;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.webkit.URLUtil;
import android.widget.Button;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

//ID = 1188346
public class Android42 extends Activity implements OnErrorListener,

		OnBufferingUpdateListener, OnCompletionListener, OnPreparedListener, SurfaceHolder.Callback {

	private static final String TAG = ""MediaPreview"";

	private MediaPlayer mp;
	private SurfaceView mPreview;
	private SurfaceHolder holder;
	private Button btnPlay;
	private Button btnPause;
	private Button btnReset;
	private Button btnStop;

	private String mPath;

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		mPreview = (SurfaceView) findViewById(R.id.message);
		btnPlay = (Button) findViewById(100);
		btnPause = (Button) findViewById(101);
		btnReset = (Button) findViewById(102);
		btnStop = (Button) findViewById(103);

		getPathFromParentDialog();

		btnPlay.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				playVideo();
			}
		});

		btnPause.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {

				if (mp != null) {
					mp.pause();
				}
			}
		});

		btnReset.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (mp != null) {
					mp.seekTo(0);
				}
			}
		});

		btnStop.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (mp != null) {
					mp.stop();
					mp.release();
				}
			}
		});

		getWindow().setFormat(PixelFormat.TRANSPARENT);
		holder = mPreview.getHolder();
		holder.addCallback(this);
		holder.setFixedSize(400, 300);
	}

	@Override
	protected void onResume() {

		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		super.onResume();
	}

	@Override
	public boolean onError(MediaPlayer mp, int what, int extra) {
		if (mp != null) {
			mp.stop();
			mp.release();
		}
		return false;
	}

	@Override
	public void onBufferingUpdate(MediaPlayer mp, int percent) {


	}

	@Override
	public void onCompletion(MediaPlayer mp) {


	}

	@Override
	public void onPrepared(MediaPlayer mp) {


	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {


	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {

	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {


	}

	private void playVideo() {
		try {
			mp = new MediaPlayer();
			mp.setOnErrorListener(this);
			mp.setOnBufferingUpdateListener(this);
			mp.setOnCompletionListener(this);
			mp.setOnPreparedListener(this);
			mp.setAudioStreamType(2);

			mp.setDisplay(mPreview.getHolder());
			Runnable r = new Runnable() {
				@Override
				public void run() {
					try {
						setDataSource(mPath);
					} catch (Exception ex) {
						Log.e(TAG, ex.getMessage());
					}
					try {
						mp.prepare();
						Log.v(TAG, ""Duration: ===> "" + mp.getDuration());
					} catch (IllegalStateException e) {

						e.printStackTrace();
					} catch (IOException e) {

						e.printStackTrace();
						Log.e(TAG, e.getMessage());
					}
					mp.start();
				}

			};
			new Thread(r).start();
		} catch (Exception ex) {
			String sDummy = ex.toString();
			if (mp != null) {
				mp.stop();
				mp.release();
			}
		}

	}

	private void setDataSource(String path) throws IOException {
		if (!URLUtil.isNetworkUrl(mPath)) {
			mp.setDataSource(mPath);
		} else {
			URL url = new URL(mPath);
			URLConnection cn = url.openConnection();
			cn.connect();
			InputStream stream = cn.getInputStream();
			if (stream == null) {
				throw new RuntimeException(""stream is null"");
			}
			File fileTemp = File.createTempFile(""mediaplayerTmp"", ""dat"");
			String tempPath = fileTemp.getAbsolutePath();
			FileOutputStream out = new FileOutputStream(fileTemp);
			byte buf[] = new byte[128];
			do {
				int numRead = stream.read(buf);
				if (numRead <= 0) {
					break;
				}
				out.write(buf, 0, numRead);
			} while (true);
			mp.setDataSource(tempPath);
			try {
				stream.close();
			} catch (Exception ex) {
				String sDummy = ex.toString();
			}
		}
	}

	private void getPathFromParentDialog() {
		Intent intent = getIntent();
		mPath = intent.getExtras().getString(""Path"");
	}
}",True,"['Activity', 'Intent', 'ActivityInfo', 'PixelFormat', 'MediaPlayer', 'OnBufferingUpdateListener', 'OnCompletionListener', 'OnErrorListener', 'OnPreparedListener', 'Bundle', 'Log', 'SurfaceHolder', 'SurfaceView', 'View', 'URLUtil', 'Button', 'File', 'FileOutputStream', 'IOException', 'InputStream', 'URL', 'URLConnection']","['android.app.Activity', 'android.content.Intent', 'android.content.pm.ActivityInfo', 'android.graphics.PixelFormat', 'android.media.MediaPlayer', 'android.media.MediaPlayer.OnBufferingUpdateListener', 'android.media.MediaPlayer.OnCompletionListener', 'android.media.MediaPlayer.OnErrorListener', 'android.media.MediaPlayer.OnPreparedListener', 'android.os.Bundle', 'android.util.Log', 'android.view.SurfaceHolder', 'android.view.SurfaceView', 'android.view.View', 'android.webkit.URLUtil', 'android.widget.Button', 'java.io.File', 'java.io.FileOutputStream', 'java.io.IOException', 'java.io.InputStream', 'java.net.URL', 'java.net.URLConnection']","public class Android42 extends Activity implements OnErrorListener,

		OnBufferingUpdateListener, OnCompletionListener, OnPreparedListener, SurfaceHolder.Callback {

	private static final String TAG = ""MediaPreview"";

	private MediaPlayer mp;
	private SurfaceView mPreview;
	private SurfaceHolder holder;
	private Button btnPlay;
	private Button btnPause;
	private Button btnReset;
	private Button btnStop;

	private String mPath;

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		mPreview = (SurfaceView) findViewById(R.id.message);
		btnPlay = (Button) findViewById(100);
		btnPause = (Button) findViewById(101);
		btnReset = (Button) findViewById(102);
		btnStop = (Button) findViewById(103);

		getPathFromParentDialog();

		btnPlay.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				playVideo();
			}
		})

		btnPause.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {

				if (mp != null) {
					mp.pause();
				}
			}
		});

		btnReset.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (mp != null) {
					mp.seekTo(0);
				}
			}
		});

		btnStop.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (mp != null) {
					mp.stop();
					mp.release();
				}
			}
		});

		getWindow().setFormat(PixelFormat.TRANSPARENT);
		holder = mPreview.getHolder();
		holder.addCallback(this);
		holder.setFixedSize(400, 300);
	}

	@Override
	protected void onResume() {

		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		super.onResume();
	}

	@Override
	public boolean onError(MediaPlayer mp, int what, int extra) {
		if (mp != null) {
			mp.stop();
			mp.release();
		}
		return false;
	}

	@Override
	public void onBufferingUpdate(MediaPlayer mp, int percent) {


	}

	@Override
	public void onCompletion(MediaPlayer mp) {


	}

	@Override
	public void onPrepared(MediaPlayer mp) {


	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {


	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {

	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {


	}

	private void playVideo() {
		try {
			mp = new MediaPlayer();
			mp.setOnErrorListener(this);
			mp.setOnBufferingUpdateListener(this);
			mp.setOnCompletionListener(this);
			mp.setOnPreparedListener(this);
			mp.setAudioStreamType(2);

			mp.setDisplay(mPreview.getHolder());
			Runnable r = new Runnable() {
				@Override
				public void run() {
					try {
						setDataSource(mPath);
					} catch (Exception ex) {
						Log.e(TAG, ex.getMessage());
					}
					try {
						mp.prepare();
						Log.v(TAG, ""Duration: ===> "" + mp.getDuration());
					} catch (IllegalStateException e) {

						e.printStackTrace();
					} catch (IOException e) {

						e.printStackTrace();
						Log.e(TAG, e.getMessage());
					}
					mp.start();
				}

			};
			new Thread(r).start();
		} catch (Exception ex) {
			String sDummy = ex.toString();
			if (mp != null) {
				mp.stop();
				mp.release();
			}
		}

	}

	private void setDataSource(String path) throws IOException {
		if (!URLUtil.isNetworkUrl(mPath)) {
			mp.setDataSource(mPath);
		} else {
			URL url = new URL(mPath);
			URLConnection cn = url.openConnection();
			cn.connect();
			InputStream stream = cn.getInputStream();
			if (stream == null) {
				throw new RuntimeException(""stream is null"");
			}
			File fileTemp = File.createTempFile(""mediaplayerTmp"", ""dat"");
			String tempPath = fileTemp.getAbsolutePath();
			FileOutputStream out = new FileOutputStream(fileTemp);
			byte buf[] = new byte[128];
			do {
				int numRead = stream.read(buf);
				if (numRead <= 0) {
					break;
				}
				out.write(buf, 0, numRead);
			} while (true);
			mp.setDataSource(tempPath);
			try {
				stream.close();
			} catch (Exception ex) {
				String sDummy = ex.toString();
			}
		}
	}

	private void getPathFromParentDialog() {
		Intent intent = getIntent();
		mPath = intent.getExtras().getString(""Path"");
	}
}",Android42.java
"package android;
//ID = 1200688

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import java.io.IOException;

public class Android43 {

	public static String main(String[] args) {
		HttpHost target = new HttpHost(""google.com"", 80);
		HttpGet get = new HttpGet(""/"");
		String result = null;
		HttpEntity entity = null;
		HttpClient client = new DefaultHttpClient();
		try {
			HttpResponse response = client.execute(target, get);
			entity = response.getEntity();
			result = EntityUtils.toString(entity);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (entity != null) {
			}
			try {
				entity.consumeContent();
			} catch (IOException e) {
			}
		}
		return result;
	}

}",True,"['HttpEntity', 'HttpHost', 'HttpResponse', 'HttpClient', 'HttpGet', 'DefaultHttpClient', 'EntityUtils', 'IOException']","['org.apache.http.HttpEntity', 'org.apache.http.HttpHost', 'org.apache.http.HttpResponse', 'org.apache.http.client.HttpClient', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.impl.client.DefaultHttpClient', 'org.apache.http.util.EntityUtils', 'java.io.IOException']","public class Android43 {

	public static String main(String[] args) {
		HttpHost target = new HttpHost(""google.com"", 80);
		HttpGet get = new HttpGet(""/"");
		String result = null;
		HttpEntity entity = null;
		HttpClient client = new DefaultHttpClient();
		try {
			HttpResponse response = client.execute(target, get);
			entity = response.getEntity();
			result = EntityUtils.toString(entity);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (entity != null) {
			}
			try {
				entity.consumeContent();
			} catch (IOException e) {
			}
		}
		return result
	}

}",Android43.java
"package android;
//ID = 1204012

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

public class Android44 extends Service {
	public volatile Thread runner;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
		super.onCreate();

		startThread();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.onDestroy"");
		stopThread();
	}

	public synchronized void startThread() {
		if (runner == null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.startthread"");
			runner.start();
		}
	}


	public synchronized void stopThread() {
		if (runner != null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.stopthread"");
			Thread moribund = runner;
			runner = null;
			moribund.interrupt();
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""interrupted?"" + moribund.isInterrupted());
		}
	}
}",True,"['Service', 'Intent', 'IBinder']","['android.app.Service', 'android.content.Intent', 'android.os.IBinder']","public class Android44 extends Service {
	public volatile Thread runner;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
		super.onCreate();

		startThread();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.onDestroy"");
		stopThread()
	}

	public synchronized void startThread() {
		if (runner == null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.startthread"");
			runner.start();
		}
	}


	public synchronized void stopThread() {
		if (runner != null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.stopthread"");
			Thread moribund = runner;
			runner = null;
			moribund.interrupt();
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""interrupted?"" + moribund.isInterrupted());
		}
	}
}",Android44.java
"package android;
//ID = 1215817

import android.app.Activity;
import android.content.*;
import android.content.IntentFilter.MalformedMimeTypeException;
import android.os.Bundle;
import android.util.Log;

public class Android45 extends Activity {

	private static final String TAG = ""MyActivity"";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction(Intent.ACTION_SEND);
		intentFilter.addCategory(Intent.CATEGORY_DEFAULT);
		try {
			intentFilter.addDataType(""image/*"");
		} catch (MalformedMimeTypeException e) {
			Log.e(TAG, e.toString());
		}

		Intent x = registerReceiver(new BroadcastReceiver() {
			public void onReceive(Context context, Intent intent) {
				Log.d(TAG, ""Received intent "" + intent);
				intent.setComponent(new ComponentName(context, Uploader.class));
				startActivity(intent);
			}
		}, intentFilter);

		if (x == null)
			Log.i(TAG, ""failed to regist a receiver"");
		else
			Log.i(TAG, ""registed a receiver successfully"");

	}

	class Uploader {
	}
}",True,"['Activity', '*', 'MalformedMimeTypeException', 'Bundle', 'Log']","['android.app.Activity', 'android.content.*', 'android.content.IntentFilter.MalformedMimeTypeException', 'android.os.Bundle', 'android.util.Log']","public class Android45 extends Activity {

	private static final String TAG = ""MyActivity"";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction(Intent.ACTION_SEND);
		intentFilter.addCategory(Intent.CATEGORY_DEFAULT);
		try {
			intentFilter.addDataType(""image/*"");
		} catch (MalformedMimeTypeException e) {
			Log.e(TAG, e.toString())
		}

		Intent x = registerReceiver(new BroadcastReceiver() {
			public void onReceive(Context context, Intent intent) {
				Log.d(TAG, ""Received intent "" + intent);
				intent.setComponent(new ComponentName(context, Uploader.class));
				startActivity(intent);
			}
		}, intentFilter);

		if (x == null)
			Log.i(TAG, ""failed to regist a receiver"");
		else
			Log.i(TAG, ""registed a receiver successfully"");

	}

	class Uploader {
	}
}",Android45.java
"package android;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

//ID = 1254832
public class Android46 extends Activity {
	private EditText mTextSearch;
	@Override
	protected void onCreate(Bundle savedInstanceState) {

	 super.onCreate(savedInstanceState);  
	 setContentView(R.layout.activity_list_item);

	 mTextSearch = (EditText)findViewById(R.id.background);
	 Button searchButton = (Button)findViewById(100);

	 searchButton.setOnClickListener(new View.OnClickListener(){
	  public void onClick(View v){    
	   Intent data = new Intent();
	   data.putExtra(""TITLE"", mTextSearch.getText().toString());   
	   setResult(RESULT_OK, data);
	   finish();
	  }
	 });
	} 

	@Override
	protected void onSaveInstanceState(Bundle outState){
	 super.onSaveInstanceState(outState);  
	}
	@Override
	protected void onPause(){
	 super.onPause();

	}
	@Override
	protected void onResume(){
	 super.onResume();  
	}

}",True,"['Activity', 'Intent', 'Bundle', 'View', 'Button', 'EditText']","['android.app.Activity', 'android.content.Intent', 'android.os.Bundle', 'android.view.View', 'android.widget.Button', 'android.widget.EditText']","public class Android46 extends Activity {
	private EditText mTextSearch;
	@Override
	protected void onCreate(Bundle savedInstanceState) {

	 super.onCreate(savedInstanceState);  
	 setContentView(R.layout.activity_list_item);

	 mTextSearch = (EditText)findViewById(R.id.background);
	 Button searchButton = (Button)findViewById(100);

	 searchButton.setOnClickListener(new View.OnClickListener(){
	  public void onClick(View v){    
	   Intent data = new Intent()
	   data.putExtra(""TITLE"", mTextSearch.getText().toString());   
	   setResult(RESULT_OK, data);
	   finish();
	  }
	 });
	} 

	@Override
	protected void onSaveInstanceState(Bundle outState){
	 super.onSaveInstanceState(outState);  
	}
	@Override
	protected void onPause(){
	 super.onPause();

	}
	@Override
	protected void onResume(){
	 super.onResume();  
	}

}",Android46.java
"package android;
//ID = 1266527

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import java.io.IOException;

public class Android47 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list_item);

		DefaultHttpClient client = new DefaultHttpClient();

		HttpGet method = new HttpGet(""http://www.google.com"");

		try {
			client.execute(method);
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(""Ok"");
		} catch (ClientProtocolException e) {
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(e.getMessage());
		} catch (IOException e) {
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(e.getMessage());
		}

	}
}",True,"['Activity', 'Bundle', 'TextView', 'ClientProtocolException', 'HttpGet', 'DefaultHttpClient', 'IOException']","['android.app.Activity', 'android.os.Bundle', 'android.widget.TextView', 'org.apache.http.client.ClientProtocolException', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.impl.client.DefaultHttpClient', 'java.io.IOException']","public class Android47 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_list_item);

		DefaultHttpClient client = new DefaultHttpClient();

		HttpGet method = new HttpGet(""http://www.google.com"");

		try {
			client.execute(method);
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(""Ok"");
		} catch (ClientProtocolException e) {
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(e.getMessage());
		} catch (IOException e) {
			TextView t = (TextView) findViewById(R.id.background);
			t.setText(e.getMessage());
		}

	}
}",Android47.java
"package android;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.widget.ImageView;
import android.widget.TextView;

//ID = 1305388
public class Android48 {
	public void captureImage() {
		Camera camera = null;
		Camera.Parameters params = camera.getParameters();
		camera.setParameters(params);
		PictureCallback jpgCallback = new PictureCallback() {
			public void onPictureTaken(byte[] data, Camera camera) {
				Context c = null;
				try {
					Dialog d = new Dialog(c);
					d.setContentView(0x7f030000);
					BitmapFactory.Options opts = new BitmapFactory.Options();
					Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);
					TextView tv = (TextView) d.findViewById(0x7f050001);
					ImageView i = (ImageView) d.findViewById(0x7f050000);
					i.setImageBitmap(bitmap);
					tv.setText(""Hai"" + data.length);
					d.show();
				} catch (Exception e) {
					AlertDialog.Builder alert = new AlertDialog.Builder(c);
					alert.setMessage(""Exception1"" + e.getMessage());
					alert.create();
					alert.show();
				}
			}

		};
		camera.takePicture(null, null, jpgCallback);
	}
}",True,"['AlertDialog', 'Dialog', 'Context', 'Bitmap', 'BitmapFactory', 'Camera', 'PictureCallback', 'ImageView', 'TextView']","['android.app.AlertDialog', 'android.app.Dialog', 'android.content.Context', 'android.graphics.Bitmap', 'android.graphics.BitmapFactory', 'android.hardware.Camera', 'android.hardware.Camera.PictureCallback', 'android.widget.ImageView', 'android.widget.TextView']","public class Android48 {
	public void captureImage()
		Camera camera = null;
		Camera.Parameters params = camera.getParameters();
		camera.setParameters(params);
		PictureCallback jpgCallback = new PictureCallback() {
			public void onPictureTaken(byte[] data, Camera camera) {
				Context c = null;
				try {
					Dialog d = new Dialog(c);
					d.setContentView(0x7f030000);
					BitmapFactory.Options opts = new BitmapFactory.Options();
					Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);
					TextView tv = (TextView) d.findViewById(0x7f050001);
					ImageView i = (ImageView) d.findViewById(0x7f050000);
					i.setImageBitmap(bitmap);
					tv.setText(""Hai"" + data.length);
					d.show();
				} catch (Exception e) {
					AlertDialog.Builder alert = new AlertDialog.Builder(c);
					alert.setMessage(""Exception1"" + e.getMessage());
					alert.create();
					alert.show();
				}
			}

		}
		camera.takePicture(null, null, jpgCallback);
	}
}",Android48.java
"package android;
//ID = 1325576

import android.content.Context;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.widget.LinearLayout;

public class Android49 extends LinearLayout {
	public Android49(Context context, AttributeSet attrs) {
		super(context, attrs);
		((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.activity_list_item, this, true);
		setGravity(Gravity.CENTER);
	}

	public Android49(Context context) {
		this(context, null);
	}
}",True,"['Context', 'AttributeSet', 'Gravity', 'LayoutInflater', 'LinearLayout']","['android.content.Context', 'android.util.AttributeSet', 'android.view.Gravity', 'android.view.LayoutInflater', 'android.widget.LinearLayout']","public class Android49 extends LinearLayout {
	public Android49(Context context, AttributeSet attrs) {
		super(context, attrs);
		((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.activity_list_item, this, true);
		setGravity(Gravity.CENTER);
	}

	public Android49(Context context) {
		this(context, null)
	}
}",Android49.java
"//ID = 1352950
package android;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import javax.swing.text.View;
import java.text.NumberFormat;
import java.text.ParseException;

public class Android50 extends Activity {

	public static final String tag = ""TipCalculator"";

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);
		setContentView(R.layout.activity_list_item);

		final EditText mealpricefield = (EditText) findViewById(100);
		final TextView answerfield = (TextView) findViewById(R.id.background);

		final Button button = (Button) findViewById(101);
		button.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(android.view.View view) {

			}

			public void onClick(View v) {
				try {
					Log.i(tag, ""onClick invoked."");
					String mealprice = mealpricefield.getText().toString();

					Log.i(tag, ""mealprice is ["" + mealprice + ""]"");
					String answer = """";

					if (mealprice.indexOf(""$"") == -1) {
						mealprice = ""$"" + mealprice;
					}

					float fmp = 0.0F;

					NumberFormat nf = NumberFormat.getCurrencyInstance();

					fmp = nf.parse(mealprice).floatValue();

					fmp *= 1.2;

					Log.i(tag, ""Total Meal Price (unformatted) is ["" + fmp + ""]"");

					answer = ""Full Price, including 20% Tip: "" + nf.format(fmp);

					answerfield.setText(answer);

					Log.i(tag, ""onClick Complete"");

				} catch (ParseException pe) {
					Log.i(tag, ""Parse exception caught"");
					answerfield.setText(""Failed to parse amount?"");
				} catch (Exception e) {
					Log.e(tag, ""Failed to Calculate Tip:"" + e.getMessage());
					e.printStackTrace();
					answerfield.setText(e.getMessage());
				}
			}
		});
	}
}",True,"['Activity', 'Bundle', 'Log', 'Button', 'EditText', 'TextView', 'View', 'NumberFormat', 'ParseException']","['android.app.Activity', 'android.os.Bundle', 'android.util.Log', 'android.widget.Button', 'android.widget.EditText', 'android.widget.TextView', 'javax.swing.text.View', 'java.text.NumberFormat', 'java.text.ParseException']","public class Android50 extends Activity {

	public static final String tag = ""TipCalculator"";

	@Override
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle)
		setContentView(R.layout.activity_list_item);

		final EditText mealpricefield = (EditText) findViewById(100);
		final TextView answerfield = (TextView) findViewById(R.id.background);

		final Button button = (Button) findViewById(101);
		button.setOnClickListener(new Button.OnClickListener() {
			@Override
			public void onClick(android.view.View view) {

			}

			public void onClick(View v) {
				try {
					Log.i(tag, ""onClick invoked."");
					String mealprice = mealpricefield.getText().toString();

					Log.i(tag, ""mealprice is ["" + mealprice + ""]"");
					String answer = """";

					if (mealprice.indexOf(""$"") == -1) {
						mealprice = ""$"" + mealprice;
					}

					float fmp = 0.0F;

					NumberFormat nf = NumberFormat.getCurrencyInstance();

					fmp = nf.parse(mealprice).floatValue();

					fmp *= 1.2;

					Log.i(tag, ""Total Meal Price (unformatted) is ["" + fmp + ""]"");

					answer = ""Full Price, including 20% Tip: "" + nf.format(fmp);

					answerfield.setText(answer);

					Log.i(tag, ""onClick Complete"");

				} catch (ParseException pe) {
					Log.i(tag, ""Parse exception caught"");
					answerfield.setText(""Failed to parse amount?"");
				} catch (Exception e) {
					Log.e(tag, ""Failed to Calculate Tip:"" + e.getMessage());
					e.printStackTrace();
					answerfield.setText(e.getMessage());
				}
			}
		});
	}
}",Android50.java
"package Class_;
/*

Date: 1/19/17
URL: http://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work
*/

import java.text.NumberFormat;
import java.util.Locale;

/**
   &lt;P&gt;{@code java TimeIteratorVsIndexIntArray 1000000}&lt;/P&gt;

   @see  &lt;CODE&gt;&lt;A HREF=&quot;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;http://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&lt;/A&gt;&lt;/CODE&gt;
 **/
public class Class_10 {
	public static final NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);

	public static final void main(String[] tryCount_inParamIdx0) {
		int testCount;
		//Get try-count from command-line parameter
		try {
			testCount = Integer.parseInt(tryCount_inParamIdx0[0]);
		} catch (ArrayIndexOutOfBoundsException | NumberFormatException x) {
			throw new IllegalArgumentException(
					""Missing or invalid command line parameter: The number of testCount for each test. "" + x);
		}

		//Test proper...START
		int[] intArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
				24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
				50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
				76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };

		long lStart = System.nanoTime();
		for (int i = 0; i < testCount; i++) {
			testIterator(intArray);
		}
		long lADuration = outputGetNanoDuration(""A"", lStart);

		lStart = System.nanoTime();
		for (int i = 0; i < testCount; i++) {
			testFor(intArray);
		}
		long lBDuration = outputGetNanoDuration(""B"", lStart);

		outputGetABTestNanoDifference(lADuration, lBDuration, ""A"", ""B"");
	}

	private static final void testIterator(int[] int_array) {
		int total = 0;
		for (int i = 0; i < int_array.length; i++) {
			total += int_array[i];
		}
	}

	private static final void testFor(int[] int_array) {
		int total = 0;
		for (int i : int_array) {
			total += i;
		}
	}
	//Test proper...END

	//Timer testing utilities...START
	public static final long outputGetNanoDuration(String s_testName, long l_nanoStart) {
		long lDuration = System.nanoTime() - l_nanoStart;
		System.out.println(""Test "" + s_testName + "": "" + nf.format(lDuration) + "" nanoseconds"");
		return lDuration;
	}

	public static final long outputGetABTestNanoDifference(long l_aDuration, long l_bDuration, String s_aTestName,
			String s_bTestName) {
		long lDiff = -1;
		double dPct = -1.0;
		String sFaster = null;
		if (l_aDuration > l_bDuration) {
			lDiff = l_aDuration - l_bDuration;
			dPct = 100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
			sFaster = ""B"";
		} else {
			lDiff = l_bDuration - l_aDuration;
			dPct = 100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
			sFaster = ""A"";
		}
		System.out.println(sFaster + "" faster by "" + nf.format(lDiff) + "" nanoseconds ("" + dPct + ""% faster)"");
		return lDiff;
	}
	//Timer testing utilities...END
}",True,"['NumberFormat', 'Locale']","['java.text.NumberFormat', 'java.util.Locale']","public class Class_10 {
	public static final NumberFormat nf = NumberFormat.getNumberInstance(Locale.US);

	public static final void main(String[] tryCount_inParamIdx0) {
		int testCount;
		//Get try-count from command-line parameter
		try {
			testCount = Integer.parseInt(tryCount_inParamIdx0[0]);
		} catch (ArrayIndexOutOfBoundsException | NumberFormatException x) {
			throw new IllegalArgumentException(
					""Missing or invalid command line parameter: The number of testCount for each test. "" + x);
		}

		//Test proper...START
		int[] intArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
				24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
				50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
				76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };

		long lStart = System.nanoTime();
		for (int i = 0; i < testCount; i++) {
			testIterator(intArray);
		}
		long lADuration = outputGetNanoDuration(""A"", lStart);

		lStart = System.nanoTime()
		for (int i = 0; i < testCount; i++) {
			testFor(intArray);
		}
		long lBDuration = outputGetNanoDuration(""B"", lStart);

		outputGetABTestNanoDifference(lADuration, lBDuration, ""A"", ""B"");
	}

	private static final void testIterator(int[] int_array) {
		int total = 0;
		for (int i = 0; i < int_array.length; i++) {
			total += int_array[i];
		}
	}

	private static final void testFor(int[] int_array) {
		int total = 0;
		for (int i : int_array) {
			total += i;
		}
	}
	//Test proper...END

	//Timer testing utilities...START
	public static final long outputGetNanoDuration(String s_testName, long l_nanoStart) {
		long lDuration = System.nanoTime() - l_nanoStart;
		System.out.println(""Test "" + s_testName + "": "" + nf.format(lDuration) + "" nanoseconds"");
		return lDuration;
	}

	public static final long outputGetABTestNanoDifference(long l_aDuration, long l_bDuration, String s_aTestName,
			String s_bTestName) {
		long lDiff = -1;
		double dPct = -1.0;
		String sFaster = null;
		if (l_aDuration > l_bDuration) {
			lDiff = l_aDuration - l_bDuration;
			dPct = 100.00 - (l_bDuration * 100.0 / l_aDuration + 0.5);
			sFaster = ""B"";
		} else {
			lDiff = l_bDuration - l_aDuration;
			dPct = 100.00 - (l_aDuration * 100.0 / l_bDuration + 0.5);
			sFaster = ""A"";
		}
		System.out.println(sFaster + "" faster by "" + nf.format(lDiff) + "" nanoseconds ("" + dPct + ""% faster)"");
		return lDiff;
	}
	//Timer testing utilities...END
}",Class_10.java
"package Class_;
/*
Date: 1/19/17 - Consider later
URL: http://stackoverflow.com/questions/2885173/how-do-i-create-a-file-and-write-to-a-file-in-java
*/

import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JFileChooser;

public class Class_11 {

	public static void main(String[] args) {
		try {
			// Create new file
			String content = ""This is the content to write into create file"";
			String path = ""D:\\a\\hi.txt"";
			File file = new File(path);

			// If file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);

			// Write in file
			bw.write(content);

			// Close connection
			bw.close();
		} catch (Exception e) {
			System.out.println(e);
		}

		JFileChooser c = new JFileChooser();
		c.showOpenDialog(c);
		File writeFile = c.getSelectedFile();
		String content = ""Input the data here to be written to your file"";

		try {
			FileWriter fw = new FileWriter(writeFile);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.append(content);
			bw.append(""hiiiii"");
			bw.close();
			fw.close();
		} catch (Exception exc) {
			System.out.println(exc);
		}
	}
}",True,"['File', 'BufferedWriter', 'FileWriter', 'JFileChooser']","['java.io.File', 'java.io.BufferedWriter', 'java.io.FileWriter', 'javax.swing.JFileChooser']","public class Class_11 {

	public static void main(String[] args) {
		try {
			// Create new file
			String content = ""This is the content to write into create file"";
			String path = ""D:\\a\\hi.txt"";
			File file = new File(path);

			// If file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);

			// Write in file
			bw.write(content);

			// Close connection
			bw.close();
		} catch (Exception e) {
			System.out.println(e);
		}

		JFileChooser c = new JFileChooser();
		c.showOpenDialog(c);
		File writeFile = c.getSelectedFile()
		String content = ""Input the data here to be written to your file"";

		try {
			FileWriter fw = new FileWriter(writeFile);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.append(content);
			bw.append(""hiiiii"");
			bw.close();
			fw.close();
		} catch (Exception exc) {
			System.out.println(exc);
		}
	}
}",Class_11.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/2201925/converting-iso-8601-compliant-string-to-java-util-date
*/
package Class_;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Date;
import java.text.ParseException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

/**
 * Helper class for handling a most common subset of ISO 8601 strings
 * (in the following format: ""2008-03-01T13:00:00+01:00""). It supports
 * parsing the ""Z"" timezone, but many other less-used features are
 * missing.
 */
public final class Class_12 {
	/** Transform Calendar to ISO 8601 string. */
	public static String fromCalendar(final Calendar calendar) {
		Date date = calendar.getTime();
		String formatted = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").format(date);
		return formatted.substring(0, 22) + "":"" + formatted.substring(22);
	}

	/** Get current date and time formatted as ISO 8601 string. */
	public static String now() {
		return fromCalendar(GregorianCalendar.getInstance());
	}

	/** Transform ISO 8601 string to Calendar. */
	public static Calendar toCalendar(final String iso8601string) throws ParseException {
		Calendar calendar = GregorianCalendar.getInstance();
		String s = iso8601string.replace(""Z"", ""+00:00"");
		try {
			s = s.substring(0, 22) + s.substring(23); // to get rid of the "":""
		} catch (IndexOutOfBoundsException e) {
			throw new ParseException(""Invalid length"", 0);
		}
		Date date = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").parse(s);
		calendar.setTime(date);
		return calendar;
	}

	public class ISO8601DateFormatter {

		private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"");
		private final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(""yyyy-MM-dd'T'HHmmssZ"");
		private static final String UTC_PLUS = ""+"";
		private static final String UTC_MINUS = ""-"";

		public Date toDate(String iso8601string) throws ParseException {
			iso8601string = iso8601string.trim();
			if (iso8601string.toUpperCase().indexOf(""Z"") > 0) {
				iso8601string = iso8601string.toUpperCase().replace(""Z"", ""+0000"");
			} else if (((iso8601string.indexOf(UTC_PLUS)) > 0)) {
				iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_PLUS));
				iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_PLUS), UTC_PLUS);
			} else if (((iso8601string.indexOf(UTC_MINUS)) > 0)) {
				iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_MINUS));
				iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_MINUS), UTC_MINUS);
			}

			Date date = null;
			if (iso8601string.contains("":""))
				date = DATE_FORMAT_1.parse(iso8601string);
			else {
				date = DATE_FORMAT_2.parse(iso8601string);
			}
			return date;
		}

		public String toISO8601String(Date date) {
			return DATE_FORMAT_1.format(date);
		}

		private String replaceColon(String sourceStr, int offsetIndex) {
			if (sourceStr.substring(offsetIndex).contains("":""))
				return sourceStr.substring(0, offsetIndex) + sourceStr.substring(offsetIndex).replace("":"", """");
			return sourceStr;
		}

		private String appendZeros(String sourceStr, int offsetIndex, String offsetChar) {
			if ((sourceStr.length() - 1) - sourceStr.indexOf(offsetChar, offsetIndex) <= 2)
				return sourceStr + ""00"";
			return sourceStr;
		}
	}
}",True,"['Calendar', 'GregorianCalendar', 'Date', 'ParseException', 'DateFormat', 'SimpleDateFormat']","['java.util.Calendar', 'java.util.GregorianCalendar', 'java.util.Date', 'java.text.ParseException', 'java.text.DateFormat', 'java.text.SimpleDateFormat']","public final class Class_12
	/** Transform Calendar to ISO 8601 string. */
	public static String fromCalendar(final Calendar calendar) {
		Date date = calendar.getTime();
		String formatted = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").format(date);
		return formatted.substring(0, 22) + "":"" + formatted.substring(22);
	}

	/** Get current date and time formatted as ISO 8601 string. */
	public static String now() {
		return fromCalendar(GregorianCalendar.getInstance());
	}

	/** Transform ISO 8601 string to Calendar. */
	public static Calendar toCalendar(final String iso8601string) throws ParseException {
		Calendar calendar = GregorianCalendar.getInstance();
		String s = iso8601string.replace(""Z"", ""+00:00"");
		try {
			s = s.substring(0, 22) + s.substring(23); // to get rid of the "":""
		} catch (IndexOutOfBoundsException e) {
			throw new ParseException(""Invalid length"", 0);
		}
		Date date = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").parse(s);
		calendar.setTime(date);
		return calendar;
	}

	public class ISO8601DateFormatter {

		private final DateFormat DATE_FORMAT_1 = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"");
		private final DateFormat DATE_FORMAT_2 = new SimpleDateFormat(""yyyy-MM-dd'T'HHmmssZ"");
		private static final String UTC_PLUS = ""+"";
		private static final String UTC_MINUS = ""-"";

		public Date toDate(String iso8601string) throws ParseException {
			iso8601string = iso8601string.trim();
			if (iso8601string.toUpperCase().indexOf(""Z"") > 0) {
				iso8601string = iso8601string.toUpperCase().replace(""Z"", ""+0000"");
			} else if (((iso8601string.indexOf(UTC_PLUS)) > 0)) {
				iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_PLUS));
				iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_PLUS), UTC_PLUS);
			} else if (((iso8601string.indexOf(UTC_MINUS)) > 0)) {
				iso8601string = replaceColon(iso8601string, iso8601string.indexOf(UTC_MINUS));
				iso8601string = appendZeros(iso8601string, iso8601string.indexOf(UTC_MINUS), UTC_MINUS);
			}

			Date date = null;
			if (iso8601string.contains("":""))
				date = DATE_FORMAT_1.parse(iso8601string);
			else {
				date = DATE_FORMAT_2.parse(iso8601string);
			}
			return date;
		}

		public String toISO8601String(Date date) {
			return DATE_FORMAT_1.format(date);
		}

		private String replaceColon(String sourceStr, int offsetIndex) {
			if (sourceStr.substring(offsetIndex).contains("":""))
				return sourceStr.substring(0, offsetIndex) + sourceStr.substring(offsetIndex).replace("":"", """");
			return sourceStr;
		}

		private String appendZeros(String sourceStr, int offsetIndex, String offsetChar) {
			if ((sourceStr.length() - 1) - sourceStr.indexOf(offsetChar, offsetIndex) <= 2)
				return sourceStr + ""00"";
			return sourceStr;
		}
	}
}",Class_12.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/7143287/how-to-best-position-swing-guis
*/
package Class_;

import javax.swing.UIManager;
import javax.swing.SwingUtilities;
import javax.swing.JTextArea;
import javax.swing.JFrame;

class WhereToPutTheGui {

	public static void initGui() {
		for (int ii = 1; ii < 4; ii++) {
			JFrame f = new JFrame(""Frame "" + ii);
			f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			String s = ""os.name: "" + System.getProperty(""os.name"") + ""\nos.version: ""
					+ System.getProperty(""os.version"");
			f.add(new JTextArea(s, 3, 28)); // suggest a size
			f.pack();
			// Let the OS handle the positioning!
			f.setLocationByPlatform(true);
			f.setVisible(true);
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				} catch (Exception useDefault) {
				}
				initGui();
			}
		});
	}
}",True,"['UIManager', 'SwingUtilities', 'JTextArea', 'JFrame']","['javax.swing.UIManager', 'javax.swing.SwingUtilities', 'javax.swing.JTextArea', 'javax.swing.JFrame']","class WhereToPutTheGui {

	public static void initGui() {
		for (int ii = 1; ii < 4; ii++) {
			JFrame f = new JFrame(""Frame "" + ii);
			f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			String s = ""os.name: "" + System.getProperty(""os.name"") + ""\nos.version: ""
					+ System.getProperty(""os.version"");
			f.add(new JTextArea(s, 3, 28)); // suggest a size
			f.pack();
			// Let the OS handle the positioning!
			f.setLocationByPlatform(true);
			f.setVisible(true);
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				} catch (Exception useDefault) {
				}
				initGui();
			}
		})
	}
}",Class_13.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/2265503/why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java
*/
package Class_;

import java.util.HashMap;

public class Class_15 {
	public class Employee {

		String name;
		String mobile;

		public Employee(String name, String mobile) {
			this.name = name;
			this.mobile = mobile;
		}

		@Override
		public int hashCode() {
			System.out.println(""calling hascode method of Employee"");
			String str = this.name;
			Integer sum = 0;
			for (int i = 0; i < str.length(); i++) {
				sum = sum + str.charAt(i);
			}
			return sum;

		}

		@Override
		public boolean equals(Object obj) {
			// TODO Auto-generated method stub
			System.out.println(""calling equals method of Employee"");
			Employee emp = (Employee) obj;
			if (this.mobile.equalsIgnoreCase(emp.mobile)) {

				System.out.println(""returning true"");
				return true;
			} else {
				System.out.println(""returning false"");
				return false;
			}

		}

		public void main(String[] args) {
			// TODO Auto-generated method stub

			Employee emp = new Employee(""abc"", ""hhh"");
			Employee emp2 = new Employee(""abc"", ""hhh"");
			HashMap<Employee, Employee> h = new HashMap<>();
			//for (int i=0;i<5;i++){
			h.put(emp, emp);
			h.put(emp2, emp2);

			//}

			System.out.println(""----------------"");
			System.out.println(""size of hashmap: "" + h.size());

		}

	}
}",True,['HashMap'],['java.util.HashMap'],"public class Class_15 {
	public class Employee {

		String name;
		String mobile;

		public Employee(String name, String mobile) {
			this.name = name;
			this.mobile = mobile;
		}

		@Override
		public int hashCode() {
			System.out.println(""calling hascode method of Employee"");
			String str = this.name;
			Integer sum = 0;
			for (int i = 0; i < str.length(); i++) {
				sum = sum + str.charAt(i);
			}
			return sum

		}

		@Override
		public boolean equals(Object obj) {
			// TODO Auto-generated method stub
			System.out.println(""calling equals method of Employee"");
			Employee emp = (Employee) obj;
			if (this.mobile.equalsIgnoreCase(emp.mobile)) {

				System.out.println(""returning true"");
				return true;
			} else {
				System.out.println(""returning false"");
				return false;
			}

		}

		public void main(String[] args) {
			// TODO Auto-generated method stub

			Employee emp = new Employee(""abc"", ""hhh"");
			Employee emp2 = new Employee(""abc"", ""hhh"");
			HashMap<Employee, Employee> h = new HashMap<>();
			//for (int i=0;i<5;i++){
			h.put(emp, emp);
			h.put(emp2, emp2);

			//}

			System.out.println(""----------------"");
			System.out.println(""size of hashmap: "" + h.size());

		}

	}
}",Class_15.java
"/*
Date: 1/19/17 - Consider later
URL: http://stackoverflow.com/questions/4772425/change-date-format-in-a-java-string
*/
package Class_;

import java.time.temporal.TemporalAccessor;
import java.util.Date;
import java.time.format.DateTimeFormatter;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Class_17 {

	public static void main(String arg[]) {

		try {

			SimpleDateFormat sourceDateFormat = new SimpleDateFormat(""yyyy-MM-DD HH:mm:ss"");

			Date date = sourceDateFormat.parse(""2011-01-18 00:00:00.0"");

			SimpleDateFormat targetDateFormat = new SimpleDateFormat(""yyyy-MM-dd"");
			System.out.println(targetDateFormat.format(date));

		} catch (ParseException e) {
			e.printStackTrace();
		}
		String date = ""2011-01-18 00:00:00.0"";
		TemporalAccessor temporal = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss.S"").parse(date); // use parse(date, LocalDateTime::from) to get LocalDateTime
		String output = DateTimeFormatter.ofPattern(""yyyy-MM-dd"").format(temporal);
	}

}",True,"['TemporalAccessor', 'Date', 'DateTimeFormatter', 'ParseException', 'SimpleDateFormat']","['java.time.temporal.TemporalAccessor', 'java.util.Date', 'java.time.format.DateTimeFormatter', 'java.text.ParseException', 'java.text.SimpleDateFormat']","public class Class_17 {

	public static void main(String arg[]) {

		try {

			SimpleDateFormat sourceDateFormat = new SimpleDateFormat(""yyyy-MM-DD HH:mm:ss"");

			Date date = sourceDateFormat.parse(""2011-01-18 00:00:00.0"");

			SimpleDateFormat targetDateFormat = new SimpleDateFormat(""yyyy-MM-dd"");
			System.out.println(targetDateFormat.format(date));

		} catch (ParseException e) {
			e.printStackTrace();
		}
		String date = ""2011-01-18 00:00:00.0""
		TemporalAccessor temporal = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss.S"").parse(date); // use parse(date, LocalDateTime::from) to get LocalDateTime
		String output = DateTimeFormatter.ofPattern(""yyyy-MM-dd"").format(temporal);
	}

}",Class_17.java
"/*
Date: 1/19/17 - Consider later
URL: http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful
*/
package Class_;

import java.lang.reflect.Array;
import java.lang.reflect.Field;

public class Class_18 {
	public static String dump(Object o, int callCount) {
		callCount++;
		StringBuffer tabs = new StringBuffer();
		for (int k = 0; k < callCount; k++) {
			tabs.append(""\t"");
		}
		StringBuffer buffer = new StringBuffer();
		Class oClass = o.getClass();
		if (oClass.isArray()) {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""["");
			for (int i = 0; i < Array.getLength(o); i++) {
				if (i < 0)
					buffer.append("","");
				Object value = Array.get(o, i);
				if (value.getClass().isPrimitive() || value.getClass() == Long.class
						|| value.getClass() == String.class || value.getClass() == Integer.class
						|| value.getClass() == Boolean.class) {
					buffer.append(value);
				} else {
					buffer.append(dump(value, callCount));
				}
			}
			buffer.append(tabs.toString());
			buffer.append(""]\n"");
		} else {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""{\n"");
			while (oClass != null) {
				Field[] fields = oClass.getDeclaredFields();
				for (int i = 0; i < fields.length; i++) {
					buffer.append(tabs.toString());
					fields[i].setAccessible(true);
					buffer.append(fields[i].getName());
					buffer.append(""="");
					try {
						Object value = fields[i].get(o);
						if (value != null) {
							if (value.getClass().isPrimitive() || value.getClass() == Long.class
									|| value.getClass() == String.class
									|| value.getClass() == Integer.class
									|| value.getClass() == Boolean.class) {
								buffer.append(value);
							} else {
								buffer.append(dump(value, callCount));
							}
						}
					} catch (IllegalAccessException e) {
						buffer.append(e.getMessage());
					}
					buffer.append(""\n"");
				}
				oClass = oClass.getSuperclass();
			}
			buffer.append(tabs.toString());
			buffer.append(""}\n"");
		}
		return buffer.toString();
	}
}",True,"['Array', 'Field']","['java.lang.reflect.Array', 'java.lang.reflect.Field']","public class Class_18 {
	public static String dump(Object o, int callCount) {
		callCount++;
		StringBuffer tabs = new StringBuffer();
		for (int k = 0; k < callCount; k++) {
			tabs.append(""\t"");

		StringBuffer buffer = new StringBuffer();
		Class oClass = o.getClass();
		if (oClass.isArray()) {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""["");
			for (int i = 0; i < Array.getLength(o); i++) {
				if (i < 0)
					buffer.append("","");
				Object value = Array.get(o, i);
				if (value.getClass().isPrimitive() || value.getClass() == Long.class
						|| value.getClass() == String.class || value.getClass() == Integer.class
						|| value.getClass() == Boolean.class) {
					buffer.append(value);
				} else {
					buffer.append(dump(value, callCount));
				}
			}
			buffer.append(tabs.toString());
			buffer.append(""]\n"");
		} else {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""{\n"");
			while (oClass != null) {
				Field[] fields = oClass.getDeclaredFields();
				for (int i = 0; i < fields.length; i++) {
					buffer.append(tabs.toString());
					fields[i].setAccessible(true);
					buffer.append(fields[i].getName());
					buffer.append(""="");
					try {
						Object value = fields[i].get(o);
						if (value != null) {
							if (value.getClass().isPrimitive() || value.getClass() == Long.class
									|| value.getClass() == String.class
									|| value.getClass() == Integer.class
									|| value.getClass() == Boolean.class) {
								buffer.append(value);
							} else {
								buffer.append(dump(value, callCount));
							}
						}
					} catch (IllegalAccessException e) {
						buffer.append(e.getMessage());
					}
					buffer.append(""\n"");
				}
				oClass = oClass.getSuperclass();
			}
			buffer.append(tabs.toString());
			buffer.append(""}\n"");
		}
		return buffer.toString();
	}
}",Class_18.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/1519736/random-shuffling-of-an-array
*/
package Class_;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

class Test {
	public static void main(String args[]) {
		int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };

		shuffleArray(solutionArray);
		for (int i = 0; i < solutionArray.length; i++) {
			System.out.print(solutionArray[i] + "" "");
		}
		System.out.println();

	}

	// Implementing Fisher???Yates shuffle
	static void shuffleArray(int[] ar) {
		// If running on Java 6 or older, use `new Random()` on RHS here
		Random rnd = ThreadLocalRandom.current();
		for (int i = ar.length - 1; i > 0; i--) {
			int index = rnd.nextInt(i + 1);
			// Simple swap
			int a = ar[index];
			ar[index] = ar[i];
			ar[i] = a;
		}
	}

	protected static List<Integer> range(int n) {
		return toList(new Range(n), new ArrayList<Integer>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable) {
		return toList(iterable, new ArrayList<T>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) {
		addAll(destination, iterable.iterator());

		return destination;
	}

	protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) {
		while (iterator.hasNext()) {
			collection.add(iterator.next());
		}
	}

	private static class Range implements Iterable<Integer> {
		private int start;
		private int stop;
		private int step;

		private Range(int n) {
			this(0, n, 1);
		}

		private Range(int start, int stop) {
			this(start, stop, 1);
		}

		private Range(int start, int stop, int step) {
			this.start = start;
			this.stop = stop;
			this.step = step;
		}

		@Override
		public Iterator<Integer> iterator() {
			final int min = start;
			final int max = stop / step;

			return new Iterator<Integer>() {
				private int current = min;

				@Override
				public boolean hasNext() {
					return current < max;
				}

				@Override
				public Integer next() {
					if (hasNext()) {
						return current++ * step;
					} else {
						throw new NoSuchElementException(""Range reached the end"");
					}
				}

				@Override
				public void remove() {
					throw new UnsupportedOperationException(""Can't remove values from a Range"");
				}
			};
		}
	}
}",True,"['*', 'ThreadLocalRandom']","['java.util.*', 'java.util.concurrent.ThreadLocalRandom']","class Test {
	public static void main(String args[]) {
		int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };

		shuffleArray(solutionArray);
		for (int i = 0; i < solutionArray.length; i++) {
			System.out.print(solutionArray[i] + "" "");
		}
		System.out.println();

	}

	// Implementing Fisher???Yates shuffle
	static void shuffleArray(int[] ar) {
		// If running on Java 6 or older, use `new Random()` on RHS here
		Random rnd = ThreadLocalRandom.current();
		for (int i = ar.length - 1; i > 0; i--) {
			int index = rnd.nextInt(i + 1);
			// Simple swap
			int a = ar[index];
			ar[index] = ar[i];
			ar[i] = a;
		}
	}

	protected static List<Integer> range(int n) {
		return toList(new Range(n), new ArrayList<Integer>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable) {
		return toList(iterable, new ArrayList<T>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) {
		addAll(destination, iterable.iterator());

		return destination;
	}

	protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) {
		while (iterator.hasNext()) {
			collection.add(iterator.next());
		}
	}

	private static class Range implements Iterable<Integer> {
		private int start;
		private int stop;
		private int step;

		private Range(int n) {
			this(0, n, 1);
		}

		private Range(int start, int stop) {
			this(start, stop, 1);
		}

		private Range(int start, int stop, int step) {
			this.start = start;
			this.stop = stop;
			this.step = step;
		}

		@Override
		public Iterator<Integer> iterator() {
			final int min = start;
			final int max = stop / step;

			return new Iterator<Integer>() {
				private int current = min;

				@Override
				public boolean hasNext() {
					return current < max;
				}

				@Override
				public Integer next() {
					if (hasNext()) {
						return current++ * step;
					} else {
						throw new NoSuchElementException(""Range reached the end"");
					}
				}

				@Override
				public void remove() {
					throw new UnsupportedOperationException(""Can't remove values from a Range"");
				}
			}
		}
	}
}",Class_19.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/10367698/java-multiple-file-transfer-over-socket
*/
package Class_;

import java.io.File;
import java.io.BufferedInputStream;
import java.io.DataOutputStream;
import java.io.DataInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;

class Class_20 {
	public static void receive() {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));
			//read the number of files from the client
			int number = dis.readInt();
			ArrayList<File> files = new ArrayList<File>(number);
			System.out.println(""Number of Files to be received: "" + number);
			//read file names, add files to arraylist
			for (int i = 0; i < number; i++) {
				File file = new File(dis.readUTF());
				files.add(file);
			}
			int n = 0;
			byte[] buf = new byte[4092];

			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(""Receiving file: "" + files.get(i).getName());
				//create a new fileoutputstream for each new file
				FileOutputStream fos = new FileOutputStream(
						""C:\\users\\tom5\\desktop\\salestools\\"" + files.get(i).getName());
				//read file
				while ((n = dis.read(buf)) != -1) {
					fos.write(buf, 0, n);
					fos.flush();
				}
				fos.close();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}
	}

	public void send(ArrayList<File> files) {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));
			System.out.println(files.size());
			//write the number of files to the server
			dos.writeInt(files.size());
			dos.flush();

			//write file names 
			for (int i = 0; i < files.size(); i++) {
				dos.writeUTF(files.get(i).getName());
				dos.flush();
			}

			//buffer for file writing, to declare inside or outside loop?
			int n = 0;
			byte[] buf = new byte[4092];
			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(files.get(i).getName());
				//create new fileinputstream for each file
				FileInputStream fis = new FileInputStream(files.get(i));

				//write file to dos
				while ((n = fis.read(buf)) != -1) {
					dos.write(buf, 0, n);
					dos.flush();

				}
				//should i close the dataoutputstream here and make a new one each time?
			}
			//or is this good?
			dos.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}",True,"['File', 'BufferedInputStream', 'DataOutputStream', 'DataInputStream', 'BufferedOutputStream', 'FileOutputStream', 'FileInputStream', 'IOException', 'ArrayList']","['java.io.File', 'java.io.BufferedInputStream', 'java.io.DataOutputStream', 'java.io.DataInputStream', 'java.io.BufferedOutputStream', 'java.io.FileOutputStream', 'java.io.FileInputStream', 'java.io.IOException', 'java.util.ArrayList']","class Class_20 {
	public static void receive() {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));
			//read the number of files from the client
			int number = dis.readInt();
			ArrayList<File> files = new ArrayList<File>(number);
			System.out.println(""Number of Files to be received: "" + number);
			//read file names, add files to arraylist
			for (int i = 0; i < number; i++) {
				File file = new File(dis.readUTF());
				files.add(file);
			}
			int n = 0;
			byte[] buf = new byte[4092];

			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(""Receiving file: "" + files.get(i).getName());
				//create a new fileoutputstream for each new file
				FileOutputStream fos = new FileOutputStream(
						""C:\\users\\tom5\\desktop\\salestools\\"" + files.get(i).getName());
				//read file
				while ((n = dis.read(buf)) != -1) {
					fos.write(buf, 0, n);
					fos.flush();
				}
				fos.close();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}
	}

	public void send(ArrayList<File> files) {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));
			System.out.println(files.size());
			//write the number of files to the server
			dos.writeInt(files.size());
			dos.flush();

			//write file names 
			for (int i = 0; i < files.size(); i++) {
				dos.writeUTF(files.get(i).getName());
				dos.flush();
			}

			//buffer for file writing, to declare inside or outside loop?
			int n = 0;
			byte[] buf = new byte[4092];
			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(files.get(i).getName());
				//create new fileinputstream for each file
				FileInputStream fis = new FileInputStream(files.get(i));

				//write file to dos
				while ((n = fis.read(buf)) != -1) {
					dos.write(buf, 0, n);
					dos.flush();

				}
				//should i close the dataoutputstream here and make a new one each time?
			}
			//or is this good?
			dos.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


}",Class_20.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/5853879/swing-obtain-image-of-jframe
*/
package Class_;

import java.awt.event.ActionListener;
import javax.swing.KeyStroke;
import java.io.File;
import javax.swing.JMenuBar;
import java.awt.image.BufferedImage;
import java.awt.Image;
import javax.swing.JMenu;
import java.awt.event.ActionEvent;
import java.awt.Component;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JMenuItem;
import javax.swing.JTree;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.JTextArea;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.ImageIcon;
import java.awt.event.InputEvent;
import javax.imageio.ImageIO;
import java.awt.BorderLayout;

/**
Create a screenshot of a component.
@author Andrew Thompson
*/
class ComponentImageCapture {

	static final String HELP = ""Type Ctrl-0 to get a screenshot of the current GUI.\n""
			+ ""The screenshot will be saved to the current "" + ""directory as 'screenshot.png'."";

	public static BufferedImage getScreenShot(Component component) {

		BufferedImage image = new BufferedImage(component.getWidth(), component.getHeight(),
				BufferedImage.TYPE_INT_RGB);
		// call the Component's paint method, using
		// the Graphics object of the image.
		component.paint(image.getGraphics()); // alternately use .printAll(..)
		return image;
	}

	public static void main(String[] args) {
		Runnable r = new Runnable() {
			public void run() {
				final JFrame f = new JFrame(""Test Screenshot"");

				JMenuItem screenshot = new JMenuItem(""Screenshot"");
				screenshot.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, InputEvent.CTRL_DOWN_MASK));
				screenshot.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						BufferedImage img = getScreenShot(f.getContentPane());
						JOptionPane.showMessageDialog(null,
								new JLabel(new ImageIcon(img.getScaledInstance(img.getWidth(null) / 2,
										img.getHeight(null) / 2, Image.SCALE_SMOOTH))));
						try {
							// write the image as a PNG
							ImageIO.write(img, ""png"", new File(""screenshot.png""));
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});
				JMenu menu = new JMenu(""Other"");
				menu.add(screenshot);
				JMenuBar mb = new JMenuBar();
				mb.add(menu);
				f.setJMenuBar(mb);

				JPanel p = new JPanel(new BorderLayout(5, 5));
				p.setBorder(new TitledBorder(""Main GUI""));
				p.add(new JScrollPane(new JTree()), BorderLayout.WEST);
				p.add(new JScrollPane(new JTextArea(HELP, 10, 30)), BorderLayout.CENTER);

				f.setContentPane(p);
				f.pack();
				f.setLocationRelativeTo(null);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				f.setVisible(true);
			}
		};
		SwingUtilities.invokeLater(r);
	}
}",True,"['ActionListener', 'KeyStroke', 'File', 'JMenuBar', 'BufferedImage', 'Image', 'JMenu', 'ActionEvent', 'Component', 'KeyEvent', 'JOptionPane', 'JScrollPane', 'JMenuItem', 'JTree', 'JLabel', 'SwingUtilities', 'TitledBorder', 'JTextArea', 'JFrame', 'JPanel', 'ImageIcon', 'InputEvent', 'ImageIO', 'BorderLayout']","['java.awt.event.ActionListener', 'javax.swing.KeyStroke', 'java.io.File', 'javax.swing.JMenuBar', 'java.awt.image.BufferedImage', 'java.awt.Image', 'javax.swing.JMenu', 'java.awt.event.ActionEvent', 'java.awt.Component', 'java.awt.event.KeyEvent', 'javax.swing.JOptionPane', 'javax.swing.JScrollPane', 'javax.swing.JMenuItem', 'javax.swing.JTree', 'javax.swing.JLabel', 'javax.swing.SwingUtilities', 'javax.swing.border.TitledBorder', 'javax.swing.JTextArea', 'javax.swing.JFrame', 'javax.swing.JPanel', 'javax.swing.ImageIcon', 'java.awt.event.InputEvent', 'javax.imageio.ImageIO', 'java.awt.BorderLayout']","class ComponentImageCapture {

	static final String HELP = ""Type Ctrl-0 to get a screenshot of the current GUI.\n""
			+ ""The screenshot will be saved to the current "" + ""directory as 'screenshot.png'."";

	public static BufferedImage getScreenShot(Component component) {

		BufferedImage image = new BufferedImage(component.getWidth(), component.getHeight(),
				BufferedImage.TYPE_INT_RGB);
		// call the Component's paint method, using
		// the Graphics object of the image.
		component.paint(image.getGraphics()); // alternately use .printAll(..)
		return image;
	}

	public static void main(String[] args) {
		Runnable r = new Runnable() {
			public void run() {
				final JFrame f = new JFrame(""Test Screenshot"");

				JMenuItem screenshot = new JMenuItem(""Screenshot"");
				screenshot.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, InputEvent.CTRL_DOWN_MASK));
				screenshot.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						BufferedImage img = getScreenShot(f.getContentPane());
						JOptionPane.showMessageDialog(null,
								new JLabel(new ImageIcon(img.getScaledInstance(img.getWidth(null) / 2,
										img.getHeight(null) / 2, Image.SCALE_SMOOTH))));
						try {
							// write the image as a PNG
							ImageIO.write(img, ""png"", new File(""screenshot.png""))
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});
				JMenu menu = new JMenu(""Other"");
				menu.add(screenshot);
				JMenuBar mb = new JMenuBar();
				mb.add(menu);
				f.setJMenuBar(mb);

				JPanel p = new JPanel(new BorderLayout(5, 5));
				p.setBorder(new TitledBorder(""Main GUI""));
				p.add(new JScrollPane(new JTree()), BorderLayout.WEST);
				p.add(new JScrollPane(new JTextArea(HELP, 10, 30)), BorderLayout.CENTER);

				f.setContentPane(p);
				f.pack();
				f.setLocationRelativeTo(null);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				f.setVisible(true);
			}
		};
		SwingUtilities.invokeLater(r);
	}
}",Class_21.java
"/*
Date: 1/19/17
URL: http://stackoverflow.com/questions/4637215/can-a-progress-bar-be-used-in-a-class-outside-main
*/
package Class_;

import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import java.text.DecimalFormat;
import javax.swing.JProgressBar;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import java.beans.PropertyChangeEvent;
import javax.swing.SwingWorker;

public class Class_22 {
	// @see http://stackoverflow.com/questions/4637215
	public class TwoRoot extends JFrame {

		private static final String s = ""0.000000000000000"";
		private JProgressBar progressBar = new JProgressBar(0, 100);
		private JLabel label = new JLabel(s, JLabel.CENTER);

		public TwoRoot() {
			this.setLayout(new GridLayout(0, 1));
			this.setTitle(""???2"");
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.add(progressBar);
			this.add(label);
			this.setSize(161, 100);
			this.setLocationRelativeTo(null);
			this.setVisible(true);
		}

		public void runCalc() {
			progressBar.setIndeterminate(true);
			TwoWorker task = new TwoWorker();
			task.addPropertyChangeListener(new PropertyChangeListener() {

				@Override
				public void propertyChange(PropertyChangeEvent e) {
					if (""progress"".equals(e.getPropertyName())) {
						progressBar.setIndeterminate(false);
						progressBar.setValue((Integer) e.getNewValue());
					}
				}
			});
			task.execute();
		}

		private class TwoWorker extends SwingWorker<Double, Double> {

			private static final int N = 5;
			private final DecimalFormat df = new DecimalFormat(s);
			double x = 1;

			@Override
			protected Double doInBackground() throws Exception {
				for (int i = 1; i <= N; i++) {
					x = x - (((x * x - 2) / (2 * x)));
					setProgress(i * (100 / N));
					publish(Double.valueOf(x));
					Thread.sleep(1000); // simulate latency
				}
				return Double.valueOf(x);
			}

			@Override
			protected void process(List<Double> chunks) {
				for (double d : chunks) {
					label.setText(df.format(d));
				}
			}
		}

		public void main(String[] args) {
			EventQueue.invokeLater(new Runnable() {

				@Override
				public void run() {
					TwoRoot t = new TwoRoot();
					t.runCalc();
				}
			});
		}
	}

	JFrame progressFrame;
	JProgressBar progressBar;
	JLabel label = new JLabel(""Calculating..."");;
	Container pane;

	double amountSaved = 0;
	int i = 0;
	int iterations;

	public void createGui(int iterations) {
		//Create all components
		progressFrame = new JFrame(""Calculation Progress"");
		progressFrame.setSize(300, 100);
		pane = progressFrame.getContentPane();
		pane.setLayout(null);
		label = new JLabel(""Calculating..."");
		label.setBounds(115, 35, 200, 25);
		progressBar = new JProgressBar(0, iterations);
		progressBar.setBounds(10, 10, 280, 20);
		progressBar.setStringPainted(true);
		//Add components to pane
		pane.add(progressBar);
		pane.add(label);
		//Make frame visible
		progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		progressFrame.setResizable(false); //No resize
		progressFrame.setLocationRelativeTo(null);
		progressFrame.setVisible(true);
	}

	public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2,
			double M1Start, double M2Start) {

		progressBar.setIndeterminate(false);
		TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);
		task.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent e) {
				if (""progress"".equals(e.getPropertyName())) {
					progressBar.setIndeterminate(false);
					progressBar.setValue((Integer) e.getNewValue());
				}
			}
		});
		task.execute();
	} //end method runCalcs

	public class TwoWorker extends SwingWorker<Double, Double> {

		private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

		public TwoWorker(double MPa, double StepAmta, double L1a, double L2a, double C1a, double C2a, double IM1a,
				double IM2a, double M1Starta, double M2Starta) {

			MP = MPa;
			StepAmt = StepAmta;
			L1 = L1a;
			L2 = L2a;
			C1 = C1a;
			C2 = C2a;
			IM1 = IM1a;
			IM2 = IM2a;
			M1Start = M1Starta;
			M2Start = M2Starta;
		}

		@Override
		protected Double doInBackground() {

			double M1 = M1Start;
			double M2 = M2Start;

			// Set MinLoop as maximum to start
			// Loan 1
			double N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
			double M1Sum = M1 * N1;
			// Loan 2
			double N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
			double M2Sum = M2 * N2;
			double minLoop = M1Sum + M2Sum;
			double MTotal = 0;

			// Define variables for mins
			double MP1 = 0;
			double MP2 = 0;
			double NP1 = 0;
			double NP2 = 0;
			double MP1Sum = 0;
			double MP2Sum = 0;

			while (M1 <= MP - M2Start && M2 >= M2Start) {
				N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
				M1Sum = N1 * M1;
				N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
				M2Sum = N2 * M2;
				MTotal = M1Sum + M2Sum;
				if (MTotal < minLoop) {
					minLoop = MTotal;
					MP1 = M1;
					MP2 = M2;
					NP1 = N1;
					NP2 = N2;
					MP1Sum = M1Sum;
					MP2Sum = M2Sum;
				} // end if
				i++;
				progressBar.setValue(i);
				M1 = M1 + StepAmt;
				M2 = MP - M1;
				// Reset monthly sums
				M1Sum = 0;
				M2Sum = 0;
			} // end while

			System.out.printf(""MP1 = %.2f\n"", MP1);
			System.out.printf(""MP2 = %.2f\n"", MP2);
			System.out.printf(""NP1 = %.2f\n"", NP1);
			System.out.printf(""NP2 = %.2f\n"", NP2);
			System.out.printf(""MP1Sum = %.2f\n"", MP1Sum);
			System.out.printf(""MP2Sum = %.2f\n"", MP2Sum);
			System.out.printf(""MTotal = %.2f\n"", minLoop);
			System.out.printf(""i = %d\n"", i);
			System.out.printf(""M1Start = %.2f\n"", M1Start);
			System.out.printf(""M2Start = %.2f\n"", M2Start);
			System.out.printf(""MP= %.2f\n"", MP);

			// if there's a value for current payments, calculate amount saved
			if (C1 > 0) {
				double CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
				double CT1 = CN1 * C1;

				double CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
				double CT2 = CN2 * C2;

				double CTotal = CT1 + CT2;
				amountSaved = CTotal - minLoop;
			} // end if

			return null;

		} // end doInBackGround

		@Override
		protected void done() {
			label.setBounds(133, 35, 200, 25);
			label.setText(""Done!"");
		}
	} // end TwoWorker

	public double savedReturn() {
		return amountSaved;
	}
}",True,"['*', 'List', 'JLabel', 'DecimalFormat', 'JProgressBar', 'PropertyChangeListener', 'JFrame', 'PropertyChangeEvent', 'SwingWorker']","['java.awt.*', 'java.util.List', 'javax.swing.JLabel', 'java.text.DecimalFormat', 'javax.swing.JProgressBar', 'java.beans.PropertyChangeListener', 'javax.swing.JFrame', 'java.beans.PropertyChangeEvent', 'javax.swing.SwingWorker']","public class Class_22 {
	// @see http://stackoverflow.com/questions/4637215
	public class TwoRoot extends JFrame {

		private static final String s = ""0.000000000000000"";
		private JProgressBar progressBar = new JProgressBar(0, 100);
		private JLabel label = new JLabel(s, JLabel.CENTER);

		public TwoRoot() {
			this.setLayout(new GridLayout(0, 1));
			this.setTitle(""???2"");
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.add(progressBar);
			this.add(label);
			this.setSize(161, 100);
			this.setLocationRelativeTo(null);
			this.setVisible(true);
		}

		public void runCalc() {
			progressBar.setIndeterminate(true);
			TwoWorker task = new TwoWorker();
			task.addPropertyChangeListener(new PropertyChangeListener() {

				@Override
				public void propertyChange(PropertyChangeEvent e) {
					if (""progress"".equals(e.getPropertyName())) {
						progressBar.setIndeterminate(false);
						progressBar.setValue((Integer) e.getNewValue());
					}
				}
			});
			task.execute();
		}

		private class TwoWorker extends SwingWorker<Double, Double> {

			private static final int N = 5;
			private final DecimalFormat df = new DecimalFormat(s);
			double x = 1

			@Override
			protected Double doInBackground() throws Exception {
				for (int i = 1; i <= N; i++) {
					x = x - (((x * x - 2) / (2 * x)));
					setProgress(i * (100 / N));
					publish(Double.valueOf(x));
					Thread.sleep(1000); // simulate latency
				}
				return Double.valueOf(x);
			}

			@Override
			protected void process(List<Double> chunks) {
				for (double d : chunks) {
					label.setText(df.format(d));
				}
			}
		}

		public void main(String[] args) {
			EventQueue.invokeLater(new Runnable() {

				@Override
				public void run() {
					TwoRoot t = new TwoRoot();
					t.runCalc();
				}
			});
		}
	}

	JFrame progressFrame;
	JProgressBar progressBar;
	JLabel label = new JLabel(""Calculating..."");;
	Container pane;

	double amountSaved = 0;
	int i = 0;
	int iterations;

	public void createGui(int iterations) {
		//Create all components
		progressFrame = new JFrame(""Calculation Progress"");
		progressFrame.setSize(300, 100);
		pane = progressFrame.getContentPane();
		pane.setLayout(null);
		label = new JLabel(""Calculating..."");
		label.setBounds(115, 35, 200, 25);
		progressBar = new JProgressBar(0, iterations);
		progressBar.setBounds(10, 10, 280, 20);
		progressBar.setStringPainted(true);
		//Add components to pane
		pane.add(progressBar);
		pane.add(label);
		//Make frame visible
		progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		progressFrame.setResizable(false); //No resize
		progressFrame.setLocationRelativeTo(null);
		progressFrame.setVisible(true);
	}

	public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2,
			double M1Start, double M2Start) {

		progressBar.setIndeterminate(false);
		TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);
		task.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent e) {
				if (""progress"".equals(e.getPropertyName())) {
					progressBar.setIndeterminate(false);
					progressBar.setValue((Integer) e.getNewValue());
				}
			}
		});
		task.execute();
	} //end method runCalcs

	public class TwoWorker extends SwingWorker<Double, Double> {

		private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

		public TwoWorker(double MPa, double StepAmta, double L1a, double L2a, double C1a, double C2a, double IM1a,
				double IM2a, double M1Starta, double M2Starta) {

			MP = MPa;
			StepAmt = StepAmta;
			L1 = L1a;
			L2 = L2a;
			C1 = C1a;
			C2 = C2a;
			IM1 = IM1a;
			IM2 = IM2a;
			M1Start = M1Starta;
			M2Start = M2Starta;
		}

		@Override
		protected Double doInBackground() {

			double M1 = M1Start;
			double M2 = M2Start;

			// Set MinLoop as maximum to start
			// Loan 1
			double N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
			double M1Sum = M1 * N1;
			// Loan 2
			double N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
			double M2Sum = M2 * N2;
			double minLoop = M1Sum + M2Sum;
			double MTotal = 0;

			// Define variables for mins
			double MP1 = 0;
			double MP2 = 0;
			double NP1 = 0;
			double NP2 = 0;
			double MP1Sum = 0;
			double MP2Sum = 0;

			while (M1 <= MP - M2Start && M2 >= M2Start) {
				N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
				M1Sum = N1 * M1;
				N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
				M2Sum = N2 * M2;
				MTotal = M1Sum + M2Sum;
				if (MTotal < minLoop) {
					minLoop = MTotal;
					MP1 = M1;
					MP2 = M2;
					NP1 = N1;
					NP2 = N2;
					MP1Sum = M1Sum;
					MP2Sum = M2Sum;
				} // end if
				i++;
				progressBar.setValue(i);
				M1 = M1 + StepAmt;
				M2 = MP - M1;
				// Reset monthly sums
				M1Sum = 0;
				M2Sum = 0;
			} // end while

			System.out.printf(""MP1 = %.2f\n"", MP1);
			System.out.printf(""MP2 = %.2f\n"", MP2);
			System.out.printf(""NP1 = %.2f\n"", NP1);
			System.out.printf(""NP2 = %.2f\n"", NP2);
			System.out.printf(""MP1Sum = %.2f\n"", MP1Sum);
			System.out.printf(""MP2Sum = %.2f\n"", MP2Sum);
			System.out.printf(""MTotal = %.2f\n"", minLoop);
			System.out.printf(""i = %d\n"", i);
			System.out.printf(""M1Start = %.2f\n"", M1Start);
			System.out.printf(""M2Start = %.2f\n"", M2Start);
			System.out.printf(""MP= %.2f\n"", MP);

			// if there's a value for current payments, calculate amount saved
			if (C1 > 0) {
				double CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
				double CT1 = CN1 * C1;

				double CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
				double CT2 = CN2 * C2;

				double CTotal = CT1 + CT2;
				amountSaved = CTotal - minLoop;
			} // end if

			return null;

		} // end doInBackGround

		@Override
		protected void done() {
			label.setBounds(133, 35, 200, 25);
			label.setText(""Done!"");
		}
	} // end TwoWorker

	public double savedReturn() {
		return amountSaved;
	}
}",Class_22.java
"package Class_;
/*
 Date: 1/19/17
 URL: http://stackoverflow.com/questions/153724/how-to-round-a-number-to-n-decimal-places-in-java
 */

import java.util.Locale;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.math.RoundingMode;

public class Class_3 {

	private static final String SYMBOL_INFINITE = ""\u221e"";
	private static final char SYMBOL_MINUS = '-';
	private static final char SYMBOL_ZERO = '0';
	private static final int DECIMAL_LEADING_GROUPS = 10;
	private static final int EXPONENTIAL_INT_THRESHOLD = 1000000000; // After this value switch to exponential notation
	private static final double EXPONENTIAL_DEC_THRESHOLD = 0.0001; // Below this value switch to exponential notation

	private DecimalFormat decimalFormat;
	private DecimalFormat decimalFormatLong;
	private DecimalFormat exponentialFormat;

	private char groupSeparator;

	public void NumberFormatter(int decimalPlaces) {
		configureDecimalPlaces(decimalPlaces);
	}

	public void configureDecimalPlaces(int decimalPlaces) {
		if (decimalPlaces <= 0) {
			throw new IllegalArgumentException(""Invalid decimal places"");
		}

		DecimalFormatSymbols separators = new DecimalFormatSymbols(Locale.getDefault());
		separators.setMinusSign(SYMBOL_MINUS);
		separators.setZeroDigit(SYMBOL_ZERO);

		groupSeparator = separators.getGroupingSeparator();

		StringBuilder decimal = new StringBuilder();
		StringBuilder exponential = new StringBuilder(""0."");

		for (int i = 0; i < DECIMAL_LEADING_GROUPS; i++) {
			decimal.append(""###"").append(i == DECIMAL_LEADING_GROUPS - 1 ? ""."" : "","");
		}

		for (int i = 0; i < decimalPlaces; i++) {
			decimal.append(""#"");
			exponential.append(""0"");
		}

		exponential.append(""E0"");

		decimalFormat = new DecimalFormat(decimal.toString(), separators);
		decimalFormatLong = new DecimalFormat(decimal.append(""####"").toString(), separators);
		exponentialFormat = new DecimalFormat(exponential.toString(), separators);

		decimalFormat.setRoundingMode(RoundingMode.HALF_UP);
		decimalFormatLong.setRoundingMode(RoundingMode.HALF_UP);
		exponentialFormat.setRoundingMode(RoundingMode.HALF_UP);
	}

	public String format(double value) {
		String result;
		if (Double.isNaN(value)) {
			result = """";
		} else if (Double.isInfinite(value)) {
			result = String.valueOf(SYMBOL_INFINITE);
		} else {
			double absValue = Math.abs(value);
			if (absValue >= 1) {
				if (absValue >= EXPONENTIAL_INT_THRESHOLD) {
					value = Math.floor(value);
					result = exponentialFormat.format(value);
				} else {
					result = decimalFormat.format(value);
				}
			} else if (absValue < 1 && absValue > 0) {
				if (absValue >= EXPONENTIAL_DEC_THRESHOLD) {
					result = decimalFormat.format(value);
					if (result.equalsIgnoreCase(""0"")) {
						result = decimalFormatLong.format(value);
					}
				} else {
					result = exponentialFormat.format(value);
				}
			} else {
				result = ""0"";
			}
		}
		return result;
	}

	public String formatWithoutGroupSeparators(double value) {
		return removeGroupSeparators(format(value));
	}

	public double parse(String value, double defValue) {
		try {
			return decimalFormat.parse(value).doubleValue();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return defValue;
	}

	private String removeGroupSeparators(String number) {
		return number.replace(String.valueOf(groupSeparator), """");
	}

}",True,"['Locale', 'DecimalFormat', 'DecimalFormatSymbols', 'ParseException', 'RoundingMode']","['java.util.Locale', 'java.text.DecimalFormat', 'java.text.DecimalFormatSymbols', 'java.text.ParseException', 'java.math.RoundingMode']","public class Class_3 {

	private static final String SYMBOL_INFINITE = ""\u221e"";
	private static final char SYMBOL_MINUS = '-';
	private static final char SYMBOL_ZERO = '0';
	private static final int DECIMAL_LEADING_GROUPS = 10;
	private static final int EXPONENTIAL_INT_THRESHOLD = 1000000000; // After this value switch to exponential notation
	private static final double EXPONENTIAL_DEC_THRESHOLD = 0.0001; // Below this value switch to exponential notation

	private DecimalFormat decimalFormat;
	private DecimalFormat decimalFormatLong;
	private DecimalFormat exponentialFormat;

	private char groupSeparator;

	public void NumberFormatter(int decimalPlaces) {
		configureDecimalPlaces(decimalPlaces);
	}

	public void configureDecimalPlaces(int decimalPlaces) {
		if (decimalPlaces <= 0) {
			throw new IllegalArgumentException(""Invalid decimal places"");
		}

		DecimalFormatSymbols separators = new DecimalFormatSymbols(Locale.getDefault());
		separators.setMinusSign(SYMBOL_MINUS);
		separators.setZeroDigit(SYMBOL_ZERO);

		groupSeparator = separators.getGroupingSeparator();

		StringBuilder decimal = new StringBuilder();
		StringBuilder exponential = new StringBuilder(""0."");

		for (int i = 0; i < DECIMAL_LEADING_GROUPS; i++) {
			decimal.append(""###"").append(i == DECIMAL_LEADING_GROUPS - 1 ? ""."" : "","");
		}

		for (int i = 0; i < decimalPlaces; i++) {
			decimal.append(""#"");
			exponential.append(""0"");
		}

		exponential.append(""E0"");

		decimalFormat = new DecimalFormat(decimal.toString(), separators);
		decimalFormatLong = new DecimalFormat(decimal.append(""####"").toString(), separators);
		exponentialFormat = new DecimalFormat(exponential.toString(), separators);

		decimalFormat.setRoundingMode(RoundingMode.HALF_UP);
		decimalFormatLong.setRoundingMode(RoundingMode.HALF_UP);
		exponentialFormat.setRoundingMode(RoundingMode.HALF_UP);
	}

	public String format(double value) {
		String result;
		if (Double.isNaN(value))
			result = """";
		} else if (Double.isInfinite(value)) {
			result = String.valueOf(SYMBOL_INFINITE);
		} else {
			double absValue = Math.abs(value);
			if (absValue >= 1) {
				if (absValue >= EXPONENTIAL_INT_THRESHOLD) {
					value = Math.floor(value);
					result = exponentialFormat.format(value);
				} else {
					result = decimalFormat.format(value);
				}
			} else if (absValue < 1 && absValue > 0) {
				if (absValue >= EXPONENTIAL_DEC_THRESHOLD) {
					result = decimalFormat.format(value);
					if (result.equalsIgnoreCase(""0"")) {
						result = decimalFormatLong.format(value);
					}
				} else {
					result = exponentialFormat.format(value);
				}
			} else {
				result = ""0"";
			}
		}
		return result;
	}

	public String formatWithoutGroupSeparators(double value) {
		return removeGroupSeparators(format(value));
	}

	public double parse(String value, double defValue) {
		try {
			return decimalFormat.parse(value).doubleValue();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return defValue;
	}

	private String removeGroupSeparators(String number) {
		return number.replace(String.valueOf(groupSeparator), """");
	}

}",Class_3.java
"package Class_;
/*
 Date: 1/19/17
 URL: http://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java
 */

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;

class Class_4 {
	private static Pattern twopart = Pattern.compile(""(\\d+)-(\\d+)"");

	public static void checkString(String s) {
		Matcher m = twopart.matcher(s);
		if (m.matches()) {
			System.out.println(s + "" matches; first part is "" + m.group(0) + "", second part is "" + m.group(1) + ""."");
		} else {
			System.out.println(s + "" does not match."");
		}
	}

	public static void main(String[] args) {
		checkString(""123-4567"");
		checkString(""foo-bar"");
		checkString(""123-"");
		checkString(""-4567"");
		checkString(""123-4567-890"");
	}

	public static String[] mySplit(String text, String delimiter) {
		List<String> parts = new ArrayList<String>();

		text += delimiter;

		for (int i = text.indexOf(delimiter), j = 0; i != -1;) {
			String temp = text.substring(j, i);
			if (temp.trim().length() != 0) {
				parts.add(temp);
			}
			j = i + delimiter.length();
			i = text.indexOf(delimiter, j);
		}

		return parts.toArray(new String[0]);
	}

	public static void main_2() {
		String str = ""004-034556"";
		String delimiter = ""-"";
		String result[] = mySplit(str, delimiter);
		for (String s : result)
			System.out.println(s);
	}
}",True,"['List', 'Matcher', 'Pattern', 'ArrayList']","['java.util.List', 'java.util.regex.Matcher', 'java.util.regex.Pattern', 'java.util.ArrayList']","class Class_4 {
	private static Pattern twopart = Pattern.compile(""(\\d+)-(\\d+)"");

	public static void checkString(String s) {
		Matcher m = twopart.matcher(s);
		if (m.matches() {
			System.out.println(s + "" matches; first part is "" + m.group(0) + "", second part is "" + m.group(1) + ""."");
		} else {
			System.out.println(s + "" does not match."");
		}
	}

	public static void main(String[] args) {
		checkString(""123-4567"");
		checkString(""foo-bar"");
		checkString(""123-"");
		checkString(""-4567"");
		checkString(""123-4567-890"");
	}

	public static String[] mySplit(String text, String delimiter) {
		List<String> parts = new ArrayList<String>();

		text += delimiter;

		for (int i = text.indexOf(delimiter), j = 0; i != -1;) {
			String temp = text.substring(j, i);
			if (temp.trim().length() != 0) {
				parts.add(temp);
			}
			j = i + delimiter.length();
			i = text.indexOf(delimiter, j);
		}

		return parts.toArray(new String[0]);
	}

	public static void main_2() {
		String str = ""004-034556"";
		String delimiter = ""-"";
		String result[] = mySplit(str, delimiter);
		for (String s : result)
			System.out.println(s);
	}
}",Class_4.java
"/*
 Date: 1/19/17
 URL: http://stackoverflow.com/questions/109383/sort-a-mapkey-value-by-values-java
 */
package Class_;

import java.util.Map;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Comparator;

public class Class_5 {
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());
		Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
			public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
				return (o1.getValue()).compareTo(o2.getValue());
			}
		});

		Map<K, V> result = new LinkedHashMap<K, V>();
		for (Map.Entry<K, V> entry : list) {
			result.put(entry.getKey(), entry.getValue());
		}
		return result;
	}

	public class main {
		public void main_1() {
			HashMap<String, Double> map = new HashMap<String, Double>();
			ValueComparator bvc = new ValueComparator(map);
			TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);

			map.put(""A"", 99.5);
			map.put(""B"", 67.4);
			map.put(""C"", 67.4);
			map.put(""D"", 67.3);

			System.out.println(""unsorted map: "" + map);
			sorted_map.putAll(map);
			System.out.println(""results: "" + sorted_map);
		}
	}

	class ValueComparator implements Comparator<String> {
		Map<String, Double> base;

		public ValueComparator(Map<String, Double> base) {
			this.base = base;
		}

		// Note: this comparator imposes orderings that are inconsistent with
		// equals.
		public int compare(String a, String b) {
			if (base.get(a) >= base.get(b)) {
				return -1;
			} else {
				return 1;
			} // returning 0 would merge keys
		}
	}

}",True,"['Map', 'List', 'LinkedHashMap', 'TreeMap', 'HashMap', 'Collections', 'LinkedList', 'Comparator']","['java.util.Map', 'java.util.List', 'java.util.LinkedHashMap', 'java.util.TreeMap', 'java.util.HashMap', 'java.util.Collections', 'java.util.LinkedList', 'java.util.Comparator']","public class Class_5 {
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());
		Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
			public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
				return (o1.getValue()).compareTo(o2.getValue());
			}
		})

		Map<K, V> result = new LinkedHashMap<K, V>();
		for (Map.Entry<K, V> entry : list) {
			result.put(entry.getKey(), entry.getValue());
		}
		return result;
	}

	public class main {
		public void main_1() {
			HashMap<String, Double> map = new HashMap<String, Double>();
			ValueComparator bvc = new ValueComparator(map);
			TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);

			map.put(""A"", 99.5);
			map.put(""B"", 67.4);
			map.put(""C"", 67.4);
			map.put(""D"", 67.3);

			System.out.println(""unsorted map: "" + map);
			sorted_map.putAll(map);
			System.out.println(""results: "" + sorted_map);
		}
	}

	class ValueComparator implements Comparator<String> {
		Map<String, Double> base;

		public ValueComparator(Map<String, Double> base) {
			this.base = base;
		}

		// Note: this comparator imposes orderings that are inconsistent with
		// equals.
		public int compare(String a, String b) {
			if (base.get(a) >= base.get(b)) {
				return -1;
			} else {
				return 1;
			} // returning 0 would merge keys
		}
	}

}",Class_5.java
"package Class_;
/*
 Date: 1/19/17
 URL: http://stackoverflow.com/questions/2784514/sort-arraylist-of-custom-objects-by-property
 */

import java.util.Collections;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;

public class Class_7 {

	public static class Person {
		public String name;
		public int id;
		public Date hireDate;

		public Person(String iname, int iid, Date ihireDate) {
			name = iname;
			id = iid;
			hireDate = ihireDate;
		}

		public String toString() {
			return name + "" "" + id + "" "" + hireDate.toString();
		}

		// Comparator
		public static class CompId implements Comparator<Person> {
			@Override
			public int compare(Person arg0, Person arg1) {
				return arg0.id - arg1.id;
			}
		}

		public static class CompDate implements Comparator<Person> {
			private int mod = 1;

			public CompDate(boolean desc) {
				if (desc)
					mod = -1;
			}

			@Override
			public int compare(Person arg0, Person arg1) {
				return mod * arg0.hireDate.compareTo(arg1.hireDate);
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SimpleDateFormat df = new SimpleDateFormat(""mm-dd-yyyy"");
		ArrayList<Person> people;
		people = new ArrayList<Person>();
		try {
			people.add(new Person(""Joe"", 92422, df.parse(""12-12-2010"")));
			people.add(new Person(""Joef"", 24122, df.parse(""1-12-2010"")));
			people.add(new Person(""Joee"", 24922, df.parse(""12-2-2010"")));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Collections.sort(people, new Person.CompId());
		System.out.println(""BY ID"");
		for (Person p : people) {
			System.out.println(p.toString());
		}

		Collections.sort(people, new Person.CompDate(false));
		System.out.println(""BY Date asc"");
		for (Person p : people) {
			System.out.println(p.toString());
		}
		Collections.sort(people, new Person.CompDate(true));
		System.out.println(""BY Date desc"");
		for (Person p : people) {
			System.out.println(p.toString());
		}

	}

}",True,"['Collections', 'ParseException', 'SimpleDateFormat', 'ArrayList', 'Comparator', 'Date']","['java.util.Collections', 'java.text.ParseException', 'java.text.SimpleDateFormat', 'java.util.ArrayList', 'java.util.Comparator', 'java.util.Date']","public class Class_7 {

	public static class Person {
		public String name;
		public int id;
		public Date hireDate;

		public Person(String iname, int iid, Date ihireDate) {
			name = iname;
			id = iid;
			hireDate = ihireDate;
		}

		public String toString() {
			return name + "" "" + id + "" "" + hireDate.toString();
		}

		// Comparator
		public static class CompId implements Comparator<Person> {
			@Override
			public int compare(Person arg0, Person arg1) {
				return arg0.id - arg1.id;
			}
		}

		public static class CompDate implements Comparator<Person> {
			private int mod = 1;

			public CompDate(boolean desc) {
				if (desc)
					mod = -1;
			}

			@Override
			public int compare(Person arg0, Person arg1) {
				return mod * arg0.hireDate.compareTo(arg1.hireDate);
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SimpleDateFormat df = new SimpleDateFormat(""mm-dd-yyyy"");
		ArrayList<Person> people;
		people = new ArrayList<Person>();
		try {
			people.add(new Person(""Joe"", 92422, df.parse(""12-12-2010"")));
			people.add(new Person(""Joef"", 24122, df.parse(""1-12-2010"")));
			people.add(new Person(""Joee"", 24922, df.parse(""12-2-2010"")));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Collections.sort(people, new Person.CompId());
		System.out.println(""BY ID"");
		for (Person p : people) {
			System.out.println(p.toString());
		}

		Collections.sort(people, new Person.CompDate(false));
		System.out.println(""BY Date asc"")
		for (Person p : people) {
			System.out.println(p.toString());
		}
		Collections.sort(people, new Person.CompDate(true));
		System.out.println(""BY Date desc"");
		for (Person p : people) {
			System.out.println(p.toString());
		}

	}

}",Class_7.java
"package Class_;
/*
 Date: 1/19/17
 URL: http://stackoverflow.com/questions/2839321/connect-java-to-a-mysql-database
 */

import java.sql.Connection;
import java.util.Properties;
import java.sql.SQLException;
import java.sql.DriverManager;

public class Class_9 {
	// init database constants
	private static final String DATABASE_DRIVER = ""com.mysql.jdbc.Driver"";
	private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/database_name"";
	private static final String USERNAME = ""root"";
	private static final String PASSWORD = """";
	private static final String MAX_POOL = ""250"";

	// init connection object
	private Connection connection;
	// init properties object
	private Properties properties;

	// create properties
	private Properties getProperties() {
		if (properties == null) {
			properties = new Properties();
			properties.setProperty(""user"", USERNAME);
			properties.setProperty(""password"", PASSWORD);
			properties.setProperty(""MaxPooledStatements"", MAX_POOL);
		}
		return properties;
	}

	// connect database
	public Connection connect() {
		if (connection == null) {
			try {
				Class.forName(DATABASE_DRIVER);
				connection = DriverManager.getConnection(DATABASE_URL, getProperties());
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
		}
		return connection;
	}

	// disconnect database
	public void disconnect() {
		if (connection != null) {
			try {
				connection.close();
				connection = null;
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}",True,"['Connection', 'Properties', 'SQLException', 'DriverManager']","['java.sql.Connection', 'java.util.Properties', 'java.sql.SQLException', 'java.sql.DriverManager']","public class Class_9 {
	// init database constants
	private static final String DATABASE_DRIVER = ""com.mysql.jdbc.Driver"";
	private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/database_name"";
	private static final String USERNAME = ""root"";
	private static final String PASSWORD = """";
	private static final String MAX_POOL = ""250"";

	// init connection object
	private Connection connection;
	// init properties object
	private Properties properties;

	// create properties
	private Properties getProperties() {
		if (properties == null) {
			properties = new Properties();
			properties.setProperty(""user"", USERNAME);
			properties.setProperty(""password"", PASSWORD);
			properties.setProperty(""MaxPooledStatements"", MAX_POOL);

		return properties;
	}

	// connect database
	public Connection connect() {
		if (connection == null) {
			try {
				Class.forName(DATABASE_DRIVER);
				connection = DriverManager.getConnection(DATABASE_URL, getProperties());
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
		}
		return connection;
	}

	// disconnect database
	public void disconnect() {
		if (connection != null) {
			try {
				connection.close();
				connection = null;
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}",Class_9.java
"package gwt;
import com.google.gwt.core.client.JsArray;
import com.google.gwt.core.client.JsArrayInteger;

public class gwt_class_5 {
	private final JsArray<JsArrayInteger> popItemFromArray(
		     final JsArray<JsArrayInteger> oldArray) {

		    JsArray<JsArrayInteger> newArray = null;

		    for (int i = 0; i < oldArray.length() - 1; i++) {
		     newArray.set(i, oldArray.get(i));
		    }

		    return newArray;
		}
}
",True,"['JsArray', 'JsArrayInteger']","['com.google.gwt.core.client.JsArray', 'com.google.gwt.core.client.JsArrayInteger']","public class gwt_class_5
	private final JsArray<JsArrayInteger> popItemFromArray(
		     final JsArray<JsArrayInteger> oldArray) {

		    JsArray<JsArrayInteger> newArray = null;

		    for (int i = 0; i < oldArray.length() - 1; i++) {
		     newArray.set(i, oldArray.get(i));
		    }

		    return newArray;
		}
}
",gwt_class_5.java
"package hibernate;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

public class HibernateUtil {
	private static final SessionFactory sessionFactory;

	static {
		try {
			// Create the SessionFactory from hibernate.cfg.xml
			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}",True,"['SessionFactory', 'AnnotationConfiguration']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']","public class HibernateUtil {
	private static final SessionFactory sessionFactory;

	static {
		try {
			// Create the SessionFactory from hibernate.cfg.xml
			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;

}",HibernateUtil.java
"package hibernate;
//ID = 520902

import library.dao.UserDAO;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import library.model.User;
import org.hibernate.Transaction;

public class hibernate_class_1 {
	public class HibernateUserDAO implements UserDAO {

		private SessionFactory sessionFactory;

		public HibernateUserDAO() {
			AnnotationConfiguration annotConf = new AnnotationConfiguration();
			annotConf.addAnnotatedClass(User.class);
			annotConf.configure();
			sessionFactory = annotConf.buildSessionFactory();
		}

		public void store(User user) {
			Session session = sessionFactory.openSession();
			Transaction tx = session.getTransaction();
			try {
				tx.begin();
				session.saveOrUpdate(user);
				tx.commit();
			} catch (RuntimeException e) {
				tx.rollback();
				throw e;
			} finally {
				session.close();
			}
		}

		@Override
		public User getUser(int arg0) {

			return null;
		}

		@Override
		public User getUserByFirstLastName(String arg0, String arg1) {

			return null;
		}

		@Override
		public User getUserByUsername(String arg0) {

			return null;
		}

		@Override
		public int saveUser(User arg0) {

			return 0;
		}
	}
}",True,"['UserDAO', 'Session', 'SessionFactory', 'AnnotationConfiguration', 'User', 'Transaction']","['library.dao.UserDAO', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'library.model.User', 'org.hibernate.Transaction']","public class hibernate_class_1 {
	public class HibernateUserDAO implements UserDAO {

		private SessionFactory sessionFactory;

		public HibernateUserDAO()
			AnnotationConfiguration annotConf = new AnnotationConfiguration();
			annotConf.addAnnotatedClass(User.class);
			annotConf.configure();
			sessionFactory = annotConf.buildSessionFactory();
		}

		public void store(User user) {
			Session session = sessionFactory.openSession();
			Transaction tx = session.getTransaction();
			try {
				tx.begin();
				session.saveOrUpdate(user);
				tx.commit();
			} catch (RuntimeException e) {
				tx.rollback();
				throw e;
			} finally {
				session.close();
			}
		}

		@Override
		public User getUser(int arg0) {

			return null;
		}

		@Override
		public User getUserByFirstLastName(String arg0, String arg1) {

			return null;
		}

		@Override
		public User getUserByUsername(String arg0) {

			return null;
		}

		@Override
		public int saveUser(User arg0) {

			return 0;
		}
	}
}",hibernate_class_1.java
"package hibernate;
//ID = 1262298

import java.util.List;
import org.hibernate.Session;
import java.io.Serializable;

public class hibernate_class_10 implements Serializable {
	private String providerId;
	private String providerName;


	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_10 ProviderInfo = new hibernate_class_10();

		ProviderInfo.setProviderId(values.get(0));
		ProviderInfo.setProviderName(values.get(1));


		session.save(ProviderInfo);
	}

	public String getProviderName() {
		return providerName;
	}


	public void setProviderName(String name) {
		this.providerName = name;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}

	public static void main(String[] args) {

	}
}",True,"['List', 'Session', 'Serializable']","['java.util.List', 'org.hibernate.Session', 'java.io.Serializable']","public class hibernate_class_10 implements Serializable {
	private String providerId;
	private String providerName


	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_10 ProviderInfo = new hibernate_class_10();

		ProviderInfo.setProviderId(values.get(0));
		ProviderInfo.setProviderName(values.get(1));


		session.save(ProviderInfo);
	}

	public String getProviderName() {
		return providerName;
	}


	public void setProviderName(String name) {
		this.providerName = name;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}

	public static void main(String[] args) {

	}
}",hibernate_class_10.java
"package hibernate;
//ID = 1443590

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import javax.faces.context.FacesContext;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class hibernate_class_12 {
	public void main() {
		Session session = null;
		try {

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			String id = (String) FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap()
					.get(""storeId"");

			Transaction t = session.beginTransaction();
			t.commit();
		} catch (Exception e) {
		} finally {
			session.close();
		}
	}
}",True,"['Session', 'Configuration', 'FacesContext', 'SessionFactory', 'Transaction']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'javax.faces.context.FacesContext', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction']","public class hibernate_class_12 {
	public void main() {
		Session session = null;
		try {

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			String id = (String) FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap()
					.get(""storeId"")

			Transaction t = session.beginTransaction();
			t.commit();
		} catch (Exception e) {
		} finally {
			session.close();
		}
	}
}",hibernate_class_12.java
"package hibernate;
//ID = 1483026

import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.ManyToMany;
import java.util.Collection;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import org.hibernate.annotations.ForeignKey;
import java.io.Serializable;
import library.model.User;
import javax.persistence.Column;
import javax.persistence.Table;
import javax.persistence.FetchType;
import javax.persistence.Id;
import android.content.ClipData.Item;

public class hibernate_class_14 {
	@Entity
	@Table(name = ""tblPermission"")
	public class Permission implements Serializable, Cloneable {

		private static final long serialVersionUID = 7155322069731920447L;

		@Id
		@Column(name = ""PermissionId"", length = 8, nullable = false)
		private String PermissionId = """";

		@ManyToOne(fetch = FetchType.LAZY)
		@JoinColumn(name = ""CountyId"", nullable = false)
		@ForeignKey(name = ""FK_CountyID"")


		@Column(name = ""Permission"", nullable = true)
		private Integer permission = 1;

		@ManyToMany(cascade = { CascadeType.PERSIST,
				CascadeType.MERGE }, mappedBy = ""Permissions"", targetEntity = Item.class)
		private Collection<Item> items;

		@ManyToMany(cascade = { CascadeType.PERSIST,
				CascadeType.MERGE }, mappedBy = ""Permissions"", targetEntity = User.class)
		private Collection<User> users;


	}

}",True,"['Entity', 'ManyToOne', 'ManyToMany', 'Collection', 'CascadeType', 'JoinColumn', 'ForeignKey', 'Serializable', 'User', 'Column', 'Table', 'FetchType', 'Id', 'Item']","['javax.persistence.Entity', 'javax.persistence.ManyToOne', 'javax.persistence.ManyToMany', 'java.util.Collection', 'javax.persistence.CascadeType', 'javax.persistence.JoinColumn', 'org.hibernate.annotations.ForeignKey', 'java.io.Serializable', 'library.model.User', 'javax.persistence.Column', 'javax.persistence.Table', 'javax.persistence.FetchType', 'javax.persistence.Id', 'android.content.ClipData.Item']","public class hibernate_class_14 {
	@Entity
	@Table(name = ""tblPermission"")
	public class Permission implements Serializable, Cloneable {

		private static final long serialVersionUID = 7155322069731920447L;

		@Id
		@Column(name = ""PermissionId"", length = 8, nullable = false)
		private String PermissionId = """"

		@ManyToOne(fetch = FetchType.LAZY)
		@JoinColumn(name = ""CountyId"", nullable = false)
		@ForeignKey(name = ""FK_CountyID"")


		@Column(name = ""Permission"", nullable = true)
		private Integer permission = 1;

		@ManyToMany(cascade = { CascadeType.PERSIST,
				CascadeType.MERGE }, mappedBy = ""Permissions"", targetEntity = Item.class)
		private Collection<Item> items;

		@ManyToMany(cascade = { CascadeType.PERSIST,
				CascadeType.MERGE }, mappedBy = ""Permissions"", targetEntity = User.class)
		private Collection<User> users;


	}

}",hibernate_class_14.java
"package hibernate;
//ID = 1938476

import org.hibernate.shards.strategy.selection.RoundRobinShardSelectionStrategy;
import org.hibernate.shards.strategy.resolution.ShardResolutionStrategy;
import org.hibernate.shards.strategy.ShardStrategy;
import org.hibernate.shards.loadbalance.RoundRobinShardLoadBalancer;
import org.hibernate.shards.strategy.access.ShardAccessStrategy;
import org.hibernate.shards.strategy.ShardStrategyImpl;
import javax.naming.NamingException;
import org.hibernate.shards.ShardId;
import org.hibernate.shards.strategy.access.SequentialShardAccessStrategy;
import org.hibernate.SessionFactory;
import org.hibernate.shards.cfg.ConfigurationToShardConfigurationAdapter;
import org.hibernate.shards.strategy.selection.ShardSelectionStrategy;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.shards.strategy.resolution.AllShardsShardResolutionStrategy;
import org.hibernate.cfg.Configuration;
import org.hibernate.shards.ShardedConfiguration;
import org.hibernate.shards.strategy.ShardStrategyFactory;
import org.hibernate.shards.cfg.ShardConfiguration;

public class hibernate_class_17 {
	public class SessionFactoryImpl {

		private static final String SHARD_CFG_0 = ""/com/hibshards/config/shard0.hibernate.cfg.xml"";
		private static final String SHARD_CFG_1 = ""/com/hibshards/config/shard1.hibernate.cfg.xml"";
		private static final String SHARDED_TABLE = ""com/hibshards/orm/weather.hbm.xml"";

		public SessionFactory createSessionFactory() throws NamingException {
			Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0);
			prototypeConfig.addResource(SHARDED_TABLE);

			List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();
			shardConfigs.add(buildShardConfig(SHARD_CFG_0));
			shardConfigs.add(buildShardConfig(SHARD_CFG_1));

			ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();
			ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs,
					shardStrategyFactory);
			return shardedConfig.buildShardedSessionFactory();
		}

		private ShardStrategyFactory buildShardStrategyFactory() {

			ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() {
				public ShardStrategy newShardStrategy1(List<ShardId> shardIds) {
					RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);
					ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);
					ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);
					ShardAccessStrategy pas = new SequentialShardAccessStrategy();
					return new ShardStrategyImpl(pss, prs, pas);
				}

				@Override
				public ShardStrategy newShardStrategy(List<ShardId> arg0) {

					return null;
				}
			};
			return shardStrategyFactory;
		}

		private ShardConfiguration buildShardConfig(String configFile) {
			Configuration config = new Configuration().configure(configFile);
			return new ConfigurationToShardConfigurationAdapter(config);
		}
	}
}",True,"['RoundRobinShardSelectionStrategy', 'ShardResolutionStrategy', 'ShardStrategy', 'RoundRobinShardLoadBalancer', 'ShardAccessStrategy', 'ShardStrategyImpl', 'NamingException', 'ShardId', 'SequentialShardAccessStrategy', 'SessionFactory', 'ConfigurationToShardConfigurationAdapter', 'ShardSelectionStrategy', 'ArrayList', 'List', 'AllShardsShardResolutionStrategy', 'Configuration', 'ShardedConfiguration', 'ShardStrategyFactory', 'ShardConfiguration']","['org.hibernate.shards.strategy.selection.RoundRobinShardSelectionStrategy', 'org.hibernate.shards.strategy.resolution.ShardResolutionStrategy', 'org.hibernate.shards.strategy.ShardStrategy', 'org.hibernate.shards.loadbalance.RoundRobinShardLoadBalancer', 'org.hibernate.shards.strategy.access.ShardAccessStrategy', 'org.hibernate.shards.strategy.ShardStrategyImpl', 'javax.naming.NamingException', 'org.hibernate.shards.ShardId', 'org.hibernate.shards.strategy.access.SequentialShardAccessStrategy', 'org.hibernate.SessionFactory', 'org.hibernate.shards.cfg.ConfigurationToShardConfigurationAdapter', 'org.hibernate.shards.strategy.selection.ShardSelectionStrategy', 'java.util.ArrayList', 'java.util.List', 'org.hibernate.shards.strategy.resolution.AllShardsShardResolutionStrategy', 'org.hibernate.cfg.Configuration', 'org.hibernate.shards.ShardedConfiguration', 'org.hibernate.shards.strategy.ShardStrategyFactory', 'org.hibernate.shards.cfg.ShardConfiguration']","public class hibernate_class_17 {
	public class SessionFactoryImpl {

		private static final String SHARD_CFG_0 = ""/com/hibshards/config/shard0.hibernate.cfg.xml"";
		private static final String SHARD_CFG_1 = ""/com/hibshards/config/shard1.hibernate.cfg.xml"";
		private static final String SHARDED_TABLE = ""com/hibshards/orm/weather.hbm.xml"";

		public SessionFactory createSessionFactory() throws NamingException {
			Configuration prototypeConfig = new Configuration().configure(SHARD_CFG_0);
			prototypeConfig.addResource(SHARDED_TABLE);

			List<ShardConfiguration> shardConfigs = new ArrayList<ShardConfiguration>();
			shardConfigs.add(buildShardConfig(SHARD_CFG_0));
			shardConfigs.add(buildShardConfig(SHARD_CFG_1));

			ShardStrategyFactory shardStrategyFactory = buildShardStrategyFactory();
			ShardedConfiguration shardedConfig = new ShardedConfiguration(prototypeConfig, shardConfigs,
					shardStrategyFactory)
			return shardedConfig.buildShardedSessionFactory();
		}

		private ShardStrategyFactory buildShardStrategyFactory() {

			ShardStrategyFactory shardStrategyFactory = new ShardStrategyFactory() {
				public ShardStrategy newShardStrategy1(List<ShardId> shardIds) {
					RoundRobinShardLoadBalancer loadBalancer = new RoundRobinShardLoadBalancer(shardIds);
					ShardSelectionStrategy pss = new RoundRobinShardSelectionStrategy(loadBalancer);
					ShardResolutionStrategy prs = new AllShardsShardResolutionStrategy(shardIds);
					ShardAccessStrategy pas = new SequentialShardAccessStrategy();
					return new ShardStrategyImpl(pss, prs, pas);
				}

				@Override
				public ShardStrategy newShardStrategy(List<ShardId> arg0) {

					return null;
				}
			};
			return shardStrategyFactory;
		}

		private ShardConfiguration buildShardConfig(String configFile) {
			Configuration config = new Configuration().configure(configFile);
			return new ConfigurationToShardConfigurationAdapter(config);
		}
	}
}",hibernate_class_17.java
"package hibernate;
//ID = 2029301

import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;

public class hibernate_class_18 {

	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try {

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory1() {
		return sessionFactory;
	}

	private static final SessionFactory sessionFactory1 = buildSessionFactory();

	private static SessionFactory buildSessionFactory1() {
		try {

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

}",True,"['Configuration', 'SessionFactory']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']","public class hibernate_class_18 {

	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory1() {
		return sessionFactory;
	}

	private static final SessionFactory sessionFactory1 = buildSessionFactory();

	private static SessionFactory buildSessionFactory1() {
		try {

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

}",hibernate_class_18.java
"package hibernate;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.Index;

@Entity
@org.hibernate.annotations.Table(appliesTo = hibernate_class_19.TABLE_NAME, indexes = {
		@Index(name = ""IDX_XDN_DFN"", columnNames = { hibernate_class_19.XDN, hibernate_class_19.DFN }) })

public class hibernate_class_19 {
	public final static String TABLE_NAME = ""house"";
	public final static String XDN = ""xdn"";
	public final static String DFN = ""dfn"";

	@GeneratedValue
	private long Id;

	@Column(name = XDN)
	private long xdn;

	@Column(name = DFN)
	private long dfn;

	@Column
	private String address;

	public long getId() {
		return Id;
	}

	public void setId(long id) {
		this.Id = id;
	}

	public long getXdn() {
		return xdn;
	}

	public void setXdn(long xdn) {
		this.xdn = xdn;
	}

	public long getDfn() {
		return dfn;
	}

	public void setDfn(long dfn) {
		this.dfn = dfn;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
}",True,"['Column', 'Entity', 'GeneratedValue', 'Index']","['javax.persistence.Column', 'javax.persistence.Entity', 'javax.persistence.GeneratedValue', 'org.hibernate.annotations.Index']","public class hibernate_class_19 {
	public final static String TABLE_NAME = ""house"";
	public final static String XDN = ""xdn"";
	public final static String DFN = ""dfn"";

	@GeneratedValue
	private long Id;

	@Column(name = XDN)
	private long xdn;

	@Column(name = DFN)
	private long dfn;

	@Column
	private String address;

	public long getId() {
		return Id;
	}

	public void setId(long id)
		this.Id = id;
	}

	public long getXdn() {
		return xdn;
	}

	public void setXdn(long xdn) {
		this.xdn = xdn;
	}

	public long getDfn() {
		return dfn;
	}

	public void setDfn(long dfn) {
		this.dfn = dfn;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
}",hibernate_class_19.java
"package hibernate;
//ID = 643700

import static javax.persistence.CascadeType.ALL;
import javax.persistence.Column;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Id;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import java.io.Serializable;

public class hibernate_class_2 {

	@Entity
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public class Part implements Serializable {

		private int id;
		private String name;
		private static final long serialVersionUID = 1L;
		private Part mainPart;
		private List<Part> parts;

		public Part() {
			super();
		}

		@Id
		public int getId() {
			return this.id;
		}

		public void setId(int id) {
			this.id = id;
		}

		@Column(name = ""PART_NAME"")
		public String getName() {
			return this.name;
		}

		public void setName(String name) {
			this.name = name;
		}

		@ManyToOne(cascade = ALL)
		public Part getMainPart() {
			return mainPart;
		}

		public void setMainPart(Part mainPart) {
			this.mainPart = mainPart;
		}

		@OneToMany(cascade = ALL)
		@JoinColumn(name = ""mainPart_id"", referencedColumnName = ""id"")
		@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
		public List<Part> getParts() {
			return parts;
		}

		public void setParts(List<Part> parts) {
			this.parts = parts;
		}

	}
}",True,"['ALL', 'Column', 'List', 'Entity', 'ManyToOne', 'JoinColumn', 'OneToMany', 'Id', 'Cache', 'CacheConcurrencyStrategy', 'Serializable']","['staticjavax.persistence.CascadeType.ALL', 'javax.persistence.Column', 'java.util.List', 'javax.persistence.Entity', 'javax.persistence.ManyToOne', 'javax.persistence.JoinColumn', 'javax.persistence.OneToMany', 'javax.persistence.Id', 'org.hibernate.annotations.Cache', 'org.hibernate.annotations.CacheConcurrencyStrategy', 'java.io.Serializable']","public class hibernate_class_2 {

	@Entity
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public class Part implements Serializable {

		private int id;
		private String name
		private static final long serialVersionUID = 1L;
		private Part mainPart;
		private List<Part> parts;

		public Part() {
			super();
		}

		@Id
		public int getId() {
			return this.id;
		}

		public void setId(int id) {
			this.id = id;
		}

		@Column(name = ""PART_NAME"")
		public String getName() {
			return this.name;
		}

		public void setName(String name) {
			this.name = name;
		}

		@ManyToOne(cascade = ALL)
		public Part getMainPart() {
			return mainPart;
		}

		public void setMainPart(Part mainPart) {
			this.mainPart = mainPart;
		}

		@OneToMany(cascade = ALL)
		@JoinColumn(name = ""mainPart_id"", referencedColumnName = ""id"")
		@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
		public List<Part> getParts() {
			return parts;
		}

		public void setParts(List<Part> parts) {
			this.parts = parts;
		}

	}
}",hibernate_class_2.java
"package hibernate;


import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

public class hibernate_class_20 {
	private static final SessionFactory sessionFactory;

	static {
		try {

			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}",True,"['SessionFactory', 'AnnotationConfiguration']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']","public class hibernate_class_20 {
	private static final SessionFactory sessionFactory;

	static {
		try {

			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);

	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}",hibernate_class_20.java
"package hibernate;


import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class hibernate_class_21 {

	public static void main(String[] args) {
		Session session = null;
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();

		try {
			transaction.begin();

			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}",True,"['Session', 'Configuration', 'SessionFactory', 'Transaction']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction']","public class hibernate_class_21 {

	public static void main(String[] args) {
		Session session = null;
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();

		try {
			transaction.begin();

			transaction.commit();
		} catch (Exception e)
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}",hibernate_class_21.java
"package hibernate;
//ID = 2724147

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.HibernateException;
import org.hibernate.cfg.AnnotationConfiguration;

public class hibernate_class_23 {
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	private static Configuration configuration = new AnnotationConfiguration();
	private static org.hibernate.SessionFactory sessionFactory;
	static {
		try {
			String configFile = """";
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
		}
	}

	private hibernate_class_23() {
	}

	public static Session getSession() throws HibernateException {
		Session session = (Session) threadLocal.get();
		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {

			}
			session = (sessionFactory != null) ? sessionFactory.openSession() : null;
			threadLocal.set(session);
		}
		return session;
	}
}",True,"['Session', 'Configuration', 'HibernateException', 'AnnotationConfiguration']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.HibernateException', 'org.hibernate.cfg.AnnotationConfiguration']","public class hibernate_class_23 {
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	private static Configuration configuration = new AnnotationConfiguration();
	private static org.hibernate.SessionFactory sessionFactory;
	static
		try {
			String configFile = """";
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
		}
	}

	private hibernate_class_23() {
	}

	public static Session getSession() throws HibernateException {
		Session session = (Session) threadLocal.get();
		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {

			}
			session = (sessionFactory != null) ? sessionFactory.openSession() : null;
			threadLocal.set(session);
		}
		return session;
	}
}",hibernate_class_23.java
"package hibernate;
//ID = 2768511

import org.hibernate.cfg.Configuration;
import java.lang.reflect.InvocationHandler;
import org.hibernate.SessionFactory;
import java.lang.reflect.Method;

public class hibernate_class_24 {
	public static class HibernateInvocationHandler implements InvocationHandler {
		final private Configuration config;
		private SessionFactory realSessionFactory;

		public HibernateInvocationHandler(Configuration config) {
			this.config = config;
		}

		public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable {
			if (false)
				proxy.hashCode();
			System.out.println(""Proxy for SessionFactory called"");
			synchronized (this) {
				if (this.realSessionFactory == null) {
					SessionFactory sf = null;
					try {
						System.out.println(""Gonna BUILD one or die trying"");

						sf = this.config.buildSessionFactory();
					} catch (RuntimeException e) {

						System.out.println(""FAILED to build"");
						sf = null;
					}

					this.realSessionFactory = sf;
				}
				return method.invoke(this.realSessionFactory, args);
			}

		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

			return null;
		}
	}
}",True,"['Configuration', 'InvocationHandler', 'SessionFactory', 'Method']","['org.hibernate.cfg.Configuration', 'java.lang.reflect.InvocationHandler', 'org.hibernate.SessionFactory', 'java.lang.reflect.Method']","public class hibernate_class_24 {
	public static class HibernateInvocationHandler implements InvocationHandler {
		final private Configuration config;
		private SessionFactory realSessionFactory;

		public HibernateInvocationHandler(Configuration config) {
			this.config = config;
		}

		public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable {
			if (false)
				proxy.hashCode();
			System.out.println(""Proxy for SessionFactory called"");
			synchronized (this) {
				if (this.realSessionFactory == null) {
					SessionFactory sf = null;
					try {
						System.out.println(""Gonna BUILD one or die trying"");

						sf = this.config.buildSessionFactory();
					} catch (RuntimeException e)

						System.out.println(""FAILED to build"");
						sf = null;
					}

					this.realSessionFactory = sf;
				}
				return method.invoke(this.realSessionFactory, args);
			}

		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

			return null;
		}
	}
}",hibernate_class_24.java
"package hibernate;
//ID = 2931936

import org.hibernate.annotations.Fetch;
import javax.persistence.GeneratedValue;
import javax.persistence.CascadeType;
import org.hibernate.annotations.Entity;
import javax.persistence.OneToOne;
import org.hibernate.FetchMode;
import javax.persistence.Id;

public class hibernate_class_25 {
	@Entity
	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}

		@OneToOne(cascade = CascadeType.ALL)
		public B getB() {
			return b;
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}
}",True,"['Fetch', 'GeneratedValue', 'CascadeType', 'Entity', 'OneToOne', 'FetchMode', 'Id']","['org.hibernate.annotations.Fetch', 'javax.persistence.GeneratedValue', 'javax.persistence.CascadeType', 'org.hibernate.annotations.Entity', 'javax.persistence.OneToOne', 'org.hibernate.FetchMode', 'javax.persistence.Id']","public class hibernate_class_25 {
	@Entity
	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}

		@OneToOne(cascade = CascadeType.ALL)
		public B getB() {
			return b
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}
}",hibernate_class_25.java
"package hibernate;
//ID = 2931936

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.Entity;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import java.util.List;
import javax.persistence.GeneratedValue;
import org.hibernate.Session;
import org.hibernate.annotations.CascadeType;
import javax.persistence.OneToOne;
import org.hibernate.tool.hbm2ddl.SchemaExport;
import org.hibernate.FetchMode;
import org.hibernate.Query;
import javax.persistence.Id;

public class hibernate_class_26 {
	private SessionFactory sessionFactory;

	public static void main(String[] args) {
		hibernate_class_26 d = new hibernate_class_26();
		d.run3();
	}

	public void run3() {

		Session session = getSession();
		session.beginTransaction();

		createEntities(session);

		session.getTransaction().commit();

		System.out.println(""NOW WITH A NEW TRANSACTION"");
		session = getSession();
		session.beginTransaction();

		Query query = session.createQuery(""from A"");
		List results = query.list();
		for (int i = 0; i < results.size(); i++) {
			System.out.println(""Row "" + i + "" was:"");
			A a = (A) results.get(i);
			System.out.println(""Result "" + i);
			System.out.println(a.toString());
		}

		session.getTransaction().commit();

	}

	public void createEntities(Session session) {
		for (int i = 0; i < 2; i++) {
			A a = new A();

			B b = new B();

			a.setB(b);

			session.save(a);

		}

	}

	public Session getSession() {
		if (sessionFactory == null) {
			AnnotationConfiguration config = new AnnotationConfiguration();
			config.addAnnotatedClass(A.class);
			config.addAnnotatedClass(B.class);
			config.configure();
			new SchemaExport(config).create(true, true);

			sessionFactory = config.buildSessionFactory();
		}
		Session session = sessionFactory.getCurrentSession();

		return session;
	}

	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}


		public B getB() {
			return b;
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}

}",True,"['Fetch', 'Entity', 'SessionFactory', 'AnnotationConfiguration', 'List', 'GeneratedValue', 'Session', 'CascadeType', 'OneToOne', 'SchemaExport', 'FetchMode', 'Query', 'Id']","['org.hibernate.annotations.Fetch', 'org.hibernate.annotations.Entity', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'java.util.List', 'javax.persistence.GeneratedValue', 'org.hibernate.Session', 'org.hibernate.annotations.CascadeType', 'javax.persistence.OneToOne', 'org.hibernate.tool.hbm2ddl.SchemaExport', 'org.hibernate.FetchMode', 'org.hibernate.Query', 'javax.persistence.Id']","public class hibernate_class_26 {
	private SessionFactory sessionFactory;

	public static void main(String[] args) {
		hibernate_class_26 d = new hibernate_class_26();
		d.run3()
	}

	public void run3() {

		Session session = getSession();
		session.beginTransaction();

		createEntities(session);

		session.getTransaction().commit();

		System.out.println(""NOW WITH A NEW TRANSACTION"");
		session = getSession();
		session.beginTransaction();

		Query query = session.createQuery(""from A"");
		List results = query.list();
		for (int i = 0; i < results.size(); i++) {
			System.out.println(""Row "" + i + "" was:"");
			A a = (A) results.get(i);
			System.out.println(""Result "" + i);
			System.out.println(a.toString())
		}

		session.getTransaction().commit();

	}

	public void createEntities(Session session) {
		for (int i = 0; i < 2; i++) {
			A a = new A();

			B b = new B();

			a.setB(b);

			session.save(a);

		}

	}

	public Session getSession() {
		if (sessionFactory == null) {
			AnnotationConfiguration config = new AnnotationConfiguration();
			config.addAnnotatedClass(A.class);
			config.addAnnotatedClass(B.class);
			config.configure();
			new SchemaExport(config).create(true, true);

			sessionFactory = config.buildSessionFactory();
		}
		Session session = sessionFactory.getCurrentSession();

		return session;
	}

	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}


		public B getB() {
			return b;
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}

}",hibernate_class_26.java
"package hibernate;
//ID = 3182759

import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import java.io.Serializable;
import org.hibernate.annotations.IndexColumn;
import java.util.ArrayList;
import library.model.User;
import javax.persistence.GenerationType;
import javax.persistence.Column;
import java.util.List;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class hibernate_class_28 implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	@ManyToOne
	@JoinColumn(name = ""user_id"")
	private User user;
	@OneToMany(targetEntity = hibernate_class_28.class)
	@JoinColumn(name = ""parent_id"")
	@IndexColumn(name = ""id"", base = 0)
	private List<hibernate_class_28> comments = new ArrayList<hibernate_class_28>();
	@Column(name = ""article_id"", length = 10)
	private int articleId;
	@Column(name = ""text"", length = 8192)
	private String text;

	public int getArticleId() {
		return articleId;
	}

	public void setArticleId(int articleId) {
		this.articleId = articleId;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public String toString() {
		return ""Comment ["" + ""articleId "" + articleId + "" "" + ""id "" + id + "" "" + ""text "" + text + "" "" + ""]"";
	}

}",True,"['Entity', 'ManyToOne', 'JoinColumn', 'OneToMany', 'Serializable', 'IndexColumn', 'ArrayList', 'User', 'GenerationType', 'Column', 'List', 'GeneratedValue', 'Id']","['javax.persistence.Entity', 'javax.persistence.ManyToOne', 'javax.persistence.JoinColumn', 'javax.persistence.OneToMany', 'java.io.Serializable', 'org.hibernate.annotations.IndexColumn', 'java.util.ArrayList', 'library.model.User', 'javax.persistence.GenerationType', 'javax.persistence.Column', 'java.util.List', 'javax.persistence.GeneratedValue', 'javax.persistence.Id']","public class hibernate_class_28 implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	@ManyToOne
	@JoinColumn(name = ""user_id"")
	private User user;
	@OneToMany(targetEntity = hibernate_class_28.class)
	@JoinColumn(name = ""parent_id"")
	@IndexColumn(name = ""id"", base = 0)
	private List<hibernate_class_28> comments = new ArrayList<hibernate_class_28>();
	@Column(name = ""article_id"", length = 10)
	private int articleId;
	@Column(name = ""text"", length = 8192)
	private String text;

	public int getArticleId() {
		return articleId;
	}

	public void setArticleId(int articleId) {
		this.articleId = articleId;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public String toString()
		return ""Comment ["" + ""articleId "" + articleId + "" "" + ""id "" + id + "" "" + ""text "" + text + "" "" + ""]"";
	}

}",hibernate_class_28.java
"package hibernate;
//ID = 3184069

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;

import java.util.List;

public abstract class hibernate_class_29<T> {

	private Class<T> domainClass;

	private SessionFactory sf;

	public hibernate_class_29(Class<T> domainClass) {
		this.domainClass = domainClass;
	}

	public SessionFactory getSessionFactory() {
		return sf;
	}

	public void setSessionFactory(SessionFactory sf) {
		this.sf = sf;
	}

	public void delete(T object) {
		getSession().delete(object);
	}

	@SuppressWarnings(""unchecked"")
	public T load(long id) {
		return (T) getSession().get(domainClass, id);
	}

	public void save(T object) {
		getSession().saveOrUpdate(object);
	}

	@SuppressWarnings(""unchecked"")
	public List<T> findAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		List<T> r = (List<T>) criteria.list();
		return r;
	}

	public int countAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		criteria.setProjection(Projections.rowCount());
		return (Integer) criteria.uniqueResult();
	}

	public Session getSession() {

		return sf.getCurrentSession();
	}
}",True,"['Criteria', 'Session', 'SessionFactory', 'Projections', 'List']","['org.hibernate.Criteria', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.criterion.Projections', 'java.util.List']","public abstract class hibernate_class_29<T> {

	private Class<T> domainClass;

	private SessionFactory sf;

	public hibernate_class_29(Class<T> domainClass) {
		this.domainClass = domainClass;
	}

	public SessionFactory getSessionFactory() {
		return sf;
	}

	public void setSessionFactory(SessionFactory sf) {
		this.sf = sf;
	}

	public void delete(T object) {
		getSession().delete(object);
	}

	@SuppressWarnings(""unchecked"")
	public T load(long id) {
		return (T) getSession().get(domainClass, id);
	}

	public void save(T object) {
		getSession().saveOrUpdate(object);
	}

	@SuppressWarnings(""unchecked"")
	public List<T> findAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		List<T> r = (List<T>) criteria.list();
		return r;
	}

	public int countAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		criteria.setProjection(Projections.rowCount());
		return (Integer) criteria.uniqueResult()
	}

	public Session getSession() {

		return sf.getCurrentSession();
	}
}",hibernate_class_29.java
"package hibernate;
//ID = 3204328

import javax.persistence.Column;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.NamedQuery;
import javax.persistence.NamedQueries;
import javax.persistence.Id;
import java.io.Serializable;

@Entity
@Table(name = ""basic_user"")
@NamedQueries({ @NamedQuery(name = ""BasicUser.findAll"", query = ""SELECT b FROM BasicUser b""),
		@NamedQuery(name = ""BasicUser.findByFirstName"", query = ""SELECT b FROM BasicUser b WHERE b.firstName = :firstName""),
		@NamedQuery(name = ""BasicUser.findByLastName"", query = ""SELECT b FROM BasicUser b WHERE b.lastName = :lastName""),
		@NamedQuery(name = ""BasicUser.findByEmail"", query = ""SELECT b FROM BasicUser b WHERE b.email = :email""),
		@NamedQuery(name = ""BasicUser.findByPassword"", query = ""SELECT b FROM BasicUser b WHERE b.password = :password"") })
public class hibernate_class_30 implements Serializable {
	private static final long serialVersionUID = 1L;
	@Basic(optional = false)
	@Column(name = ""First_Name"")
	private String firstName;
	@Basic(optional = false)
	@Column(name = ""Last_Name"")
	private String lastName;
	@Id
	@Basic(optional = false)
	@Column(name = ""Email"")
	private String email;
	@Basic(optional = false)
	@Column(name = ""Password"")
	private String password;

	public hibernate_class_30() {
	}
}",True,"['Column', 'Basic', 'Entity', 'Table', 'NamedQuery', 'NamedQueries', 'Id', 'Serializable']","['javax.persistence.Column', 'javax.persistence.Basic', 'javax.persistence.Entity', 'javax.persistence.Table', 'javax.persistence.NamedQuery', 'javax.persistence.NamedQueries', 'javax.persistence.Id', 'java.io.Serializable']","public class hibernate_class_30 implements Serializable {
	private static final long serialVersionUID = 1L;
	@Basic(optional = false)
	@Column(name = ""First_Name"")
	private String firstName;
	@Basic(optional = false)
	@Column(name = ""Last_Name"")
	private String lastName;
	@Id
	@Basic(optional = false)
	@Column(name = ""Email"")
	private String email;
	@Basic(optional = false)
	@Column(name = ""Password"")
	private String password

	public hibernate_class_30() {
	}
}",hibernate_class_30.java
"package hibernate;
//ID = 3218631

import java.util.List;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.Query;
import org.hibernate.SessionFactory;

public class hibernate_class_31 {
	public static List<?> getData() {
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		Session session = sessionFactory.getCurrentSession();
		List<?> result = null;
		try {
			session.beginTransaction();
			Query query = session.createQuery(""from Users"");
			result = query.list();
			session.getTransaction().commit();
			query.setReadOnly(true);
			query.setMaxResults(50);
			session.flush();
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}",True,"['List', 'Session', 'Configuration', 'Query', 'SessionFactory']","['java.util.List', 'org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.Query', 'org.hibernate.SessionFactory']","public class hibernate_class_31 {
	public static List<?> getData() {
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		Session session = sessionFactory.getCurrentSession();
		List<?> result = null;
		try
			session.beginTransaction();
			Query query = session.createQuery(""from Users"");
			result = query.list();
			session.getTransaction().commit();
			query.setReadOnly(true);
			query.setMaxResults(50);
			session.flush();
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}",hibernate_class_31.java
"package hibernate;
//ID = 3287351

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.Index;
import javax.persistence.Id;

@Entity
@Table(name = ""log_entries"")
@org.hibernate.annotations.Table(appliesTo = ""log_entries"", indexes = {
		@Index(name = ""idx"", columnNames = { ""job"", ""version"", ""schedule"", ""dttmRun"", ""pid"" }) })
public class hibernate_class_32 {
	@Id
	@GeneratedValue
	Long id;
	String job;
	String version;
	String schedule;
	String dttmRun;
	int pid;
	String command;
	int duration;

}",True,"['Entity', 'Table', 'GeneratedValue', 'Index', 'Id']","['javax.persistence.Entity', 'javax.persistence.Table', 'javax.persistence.GeneratedValue', 'org.hibernate.annotations.Index', 'javax.persistence.Id']","public class hibernate_class_32 {
	@Id
	@GeneratedValue
	Long id;
	String job;
	String version;
	String schedule;
	String dttmRun;
	int pid
	String command;
	int duration;

}",hibernate_class_32.java
"package hibernate;
//ID = 3332212

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;

public class hibernate_class_33 {

	private static hibernate_class_33 instance = null;

	private SessionFactory sessionFactory;

	public static hibernate_class_33 getInstance() {
		if (hibernate_class_33.instance == null) {
			hibernate_class_33.instance = new hibernate_class_33().init();
		}

		return hibernate_class_33.instance;
	}

	public SessionFactory getSessionFactory() {
		return this.sessionFactory;
	}

	public Session getSession() {
		return this.sessionFactory.openSession();
	}

	private hibernate_class_33 init() {
		Configuration cfg = new Configuration();


		cfg.setProperties(System.getProperties());
		cfg.configure();
		SessionFactory sessions = cfg.buildSessionFactory();

		sessionFactory = cfg.configure().buildSessionFactory();
		return this;
	}
}",True,"['Session', 'Configuration', 'SessionFactory']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']","public class hibernate_class_33 {

	private static hibernate_class_33 instance = null;

	private SessionFactory sessionFactory;

	public static hibernate_class_33 getInstance() {
		if (hibernate_class_33.instance == null) {
			hibernate_class_33.instance = new hibernate_class_33().init();
		}

		return hibernate_class_33.instance;
	}

	public SessionFactory getSessionFactory() {
		return this.sessionFactory;
	}

	public Session getSession() {
		return this.sessionFactory.openSession();
	}

	private hibernate_class_33 init()
		Configuration cfg = new Configuration();


		cfg.setProperties(System.getProperties());
		cfg.configure();
		SessionFactory sessions = cfg.buildSessionFactory();

		sessionFactory = cfg.configure().buildSessionFactory();
		return this;
	}
}",hibernate_class_33.java
"package hibernate;
//ID = 3332212

import org.hibernate.Session;
import org.hibernate.Transaction;

public class hibernate_class_34 {
	public void testUserClassAndUsers() {
		System.out.println(""Testing Users and UserClasses..."");

		Session newSession = null;

		System.out.println(""1 - Creating UserClasses:"");
		Transaction t1 = newSession.beginTransaction();

		t1.commit();

		System.out.println(""2 - Creating Users:"");
		Transaction t2 = newSession.beginTransaction();

		t2.commit();

		System.out.println(""3 - Deleting UserClass (\""UserClass 1\""):"");
		Transaction t3 = newSession.beginTransaction();
		t3.commit();

		newSession.close();
	}

	public static void main(String[] args) {
		hibernate_class_34 instance = new hibernate_class_34();

		instance.testUserClassAndUsers();
	}
}",True,"['Session', 'Transaction']","['org.hibernate.Session', 'org.hibernate.Transaction']","public class hibernate_class_34 {
	public void testUserClassAndUsers() {
		System.out.println(""Testing Users and UserClasses..."");

		Session newSession = null;

		System.out.println(""1 - Creating UserClasses:"");
		Transaction t1 = newSession.beginTransaction();

		t1.commit()

		System.out.println(""2 - Creating Users:"");
		Transaction t2 = newSession.beginTransaction();

		t2.commit();

		System.out.println(""3 - Deleting UserClass (\""UserClass 1\""):"");
		Transaction t3 = newSession.beginTransaction();
		t3.commit();

		newSession.close();
	}

	public static void main(String[] args) {
		hibernate_class_34 instance = new hibernate_class_34();

		instance.testUserClassAndUsers();
	}
}",hibernate_class_34.java
"package hibernate;
//ID = 3513366

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class hibernate_class_36 {
	public static void main(String[] args) {
		Session session = null;
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();

		Transaction tx = null;
		try {
			session = sessionFactory.openSession();
			tx = session.beginTransaction();

			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}",True,"['Session', 'Configuration', 'SessionFactory', 'Transaction']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction']","public class hibernate_class_36 {
	public static void main(String[] args) {
		Session session = null;
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();

		Transaction tx = null
		try {
			session = sessionFactory.openSession();
			tx = session.beginTransaction();

			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}",hibernate_class_36.java
"package hibernate;
//ID = 3534854

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.HibernateException;
import org.hibernate.cfg.AnnotationConfiguration;

public class hibernate_class_37 {

	public static void test() {
		String c = """";
		Session session = HibernateUtil.getSession();
		session.beginTransaction();
		session.save(c);
		session.getTransaction().commit();

	}


	public static void main(String[] args) {
		hibernate_class_37.test();

	}

	public static class HibernateUtil {

		private static final SessionFactory sessionFactory;
		static {
			try {
				sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
			} catch (Throwable ex) {

				throw new ExceptionInInitializerError(ex);
			}
		}

		public static Session getSession() throws HibernateException {
			return sessionFactory.openSession();
		}
	}

}",True,"['Session', 'SessionFactory', 'HibernateException', 'AnnotationConfiguration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.HibernateException', 'org.hibernate.cfg.AnnotationConfiguration']","public class hibernate_class_37 {

	public static void test() {
		String c = """";
		Session session = HibernateUtil.getSession();
		session.beginTransaction();
		session.save(c);
		session.getTransaction().commit()

	}


	public static void main(String[] args) {
		hibernate_class_37.test();

	}

	public static class HibernateUtil {

		private static final SessionFactory sessionFactory;
		static {
			try {
				sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
			} catch (Throwable ex) {

				throw new ExceptionInInitializerError(ex);
			}
		}

		public static Session getSession() throws HibernateException {
			return sessionFactory.openSession();
		}
	}

}",hibernate_class_37.java
"package hibernate;
//ID = 3556392

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class hibernate_class_38 {

	public static void main(String... args) {
		SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();
		Session ses = sessionFact.openSession();
		Transaction tx = ses.beginTransaction();
		String bean = """";
		ses.save(bean);
		tx.commit();
		ses.close();
	}
}",True,"['Session', 'Configuration', 'SessionFactory', 'Transaction']","['org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction']","public class hibernate_class_38 {

	public static void main(String... args) {
		SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();
		Session ses = sessionFact.openSession();
		Transaction tx = ses.beginTransaction();
		String bean = """";
		ses.save(bean);
		tx.commit()
		ses.close();
	}
}",hibernate_class_38.java
"package hibernate;
//ID = 3573479

import java.util.Map;
import org.appfuse.dao.GenericDao;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.appfuse.dao.SearchException;
import org.springframework.transaction.annotation.Transactional;
import java.io.Serializable;
import org.hibernate.Transaction;

public class hibernate_class_39 {
	@Transactional
	@SuppressWarnings(""unchecked"")
	public class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> {
		private SessionFactory sessionFactory;

		public void setSessionFactory(final SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;
		}

		public ID create(final T newInstance) {
			ID id = null;
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				id = (ID) session.save(newInstance);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
			return id;
		}

		public T read(final ID primaryKey) {
			T id = null;
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				id = (T) session.get(""aaa"", primaryKey);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
			return id;
		}

		public void update(final T transientObject) {
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				session.saveOrUpdate(transientObject);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
		}

		public void delete(final T persistentObject) {
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				session.delete(persistentObject);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
		}

		@Override
		public boolean exists(ID arg0) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) {

			return null;
		}

		@Override
		public T get(ID arg0) {

			return null;
		}

		@Override
		public List<T> getAll() {

			return null;
		}

		@Override
		public List<T> getAllDistinct() {

			return null;
		}

		@Override
		public void reindex() {


		}

		@Override
		public void reindexAll(boolean arg0) {


		}

		@Override
		public void remove(T arg0) {


		}

		@Override
		public void remove(ID arg0) {

		}

		@Override
		public T save(T arg0) {

			return null;
		}

		@Override
		public List<T> search(String arg0) throws SearchException {

			return null;
		}
	}
}",True,"['Map', 'GenericDao', 'List', 'Session', 'SessionFactory', 'SearchException', 'Transactional', 'Serializable', 'Transaction']","['java.util.Map', 'org.appfuse.dao.GenericDao', 'java.util.List', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.appfuse.dao.SearchException', 'org.springframework.transaction.annotation.Transactional', 'java.io.Serializable', 'org.hibernate.Transaction']","public class hibernate_class_39 {
	@Transactional
	@SuppressWarnings(""unchecked"")
	public class GenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> {
		private SessionFactory sessionFactory;

		public void setSessionFactory(final SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory
		}

		public ID create(final T newInstance) {
			ID id = null;
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				id = (ID) session.save(newInstance);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
			return id;
		}

		public T read(final ID primaryKey) {
			T id = null;
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				id = (T) session.get(""aaa"", primaryKey);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
			return id;
		}

		public void update(final T transientObject) {
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				session.saveOrUpdate(transientObject);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
		}

		public void delete(final T persistentObject) {
			final Session session = sessionFactory.openSession();
			final Transaction tx = session.beginTransaction();
			try {
				session.delete(persistentObject);
				tx.commit();
				session.close();
			} catch (final Exception e) {
				if (tx != null) {
					tx.rollback();
				}
				e.printStackTrace();
			} finally {
				if (session.isOpen()) {
					session.close();
				}
			}
		}

		@Override
		public boolean exists(ID arg0) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public List<T> findByNamedQuery(String arg0, Map<String, Object> arg1) {

			return null;
		}

		@Override
		public T get(ID arg0) {

			return null;
		}

		@Override
		public List<T> getAll() {

			return null;
		}

		@Override
		public List<T> getAllDistinct() {

			return null;
		}

		@Override
		public void reindex() {


		}

		@Override
		public void reindexAll(boolean arg0) {


		}

		@Override
		public void remove(T arg0) {


		}

		@Override
		public void remove(ID arg0) {

		}

		@Override
		public T save(T arg0) {

			return null;
		}

		@Override
		public List<T> search(String arg0) throws SearchException {

			return null;
		}
	}
}",hibernate_class_39.java
"package hibernate;
//ID = 970573

import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;
import org.hibernate.HibernateException;

public class hibernate_class_4 {
	private static final SessionFactory sessionFactory;

	static {
		try {
			sessionFactory = new Configuration().configure().buildSessionFactory();
		} catch (HibernateException he) {
			System.err.println(he);
			throw new ExceptionInInitializerError(he);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}",True,"['Configuration', 'SessionFactory', 'HibernateException']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.HibernateException']","public class hibernate_class_4 {
	private static final SessionFactory sessionFactory;

	static {
		try {
			sessionFactory = new Configuration().configure().buildSessionFactory();
		} catch (HibernateException he) {
			System.err.println(he)
			throw new ExceptionInInitializerError(he);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}",hibernate_class_4.java
"package hibernate;
//ID = 3681045

import java.util.List;
import org.hibernate.Session;
import java.util.Iterator;
import org.hibernate.cfg.Configuration;
import org.hibernate.Query;
import org.hibernate.SessionFactory;

public class hibernate_class_40 {

	public static void main(String[] args) {

		Session session = null;

		try {

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			System.out.println(""selecting records"");
			Query q = session.getNamedQuery(""getRecordsSP"");


			System.out.print(""Done"");
			List l = q.list();

			for (Iterator it = l.iterator(); it.hasNext();) {
				Object row[] = (Object[]) it.next();
				System.out.println(row.length);

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.flush();
			session.close();

		}
	}
}",True,"['List', 'Session', 'Iterator', 'Configuration', 'Query', 'SessionFactory']","['java.util.List', 'org.hibernate.Session', 'java.util.Iterator', 'org.hibernate.cfg.Configuration', 'org.hibernate.Query', 'org.hibernate.SessionFactory']","public class hibernate_class_40 {

	public static void main(String[] args) {

		Session session = null;

		try

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			System.out.println(""selecting records"");
			Query q = session.getNamedQuery(""getRecordsSP"");


			System.out.print(""Done"");
			List l = q.list();

			for (Iterator it = l.iterator(); it.hasNext();) {
				Object row[] = (Object[]) it.next();
				System.out.println(row.length);

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.flush();
			session.close();

		}
	}
}",hibernate_class_40.java
"package hibernate;
//ID = 3816385

import org.apache.log4j.Logger;
import java.util.Properties;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;

public class hibernate_class_43 {
	private static Logger log = Logger.getLogger(hibernate_class_43.class);
	private static SessionFactory sessionFactory;
	private static String confFile = ""hibernate-test.properties"";
	private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();

	private hibernate_class_43() {

	}

	public static void buildSessionFactory() {
		Configuration configuration = new Configuration();
		synchronized (hibernate_class_43.class) {
			if (sessionFactory == null) {
				try {
					Properties properties = new Properties();
					properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
					configuration.setProperties(properties);
				} catch (Exception e) {
					log.fatal(""cannot load the specified hibernate properties file: "" + confFile);
					throw new RuntimeException(""cannot load the specified hibernate properties file : "" + confFile, e);
				}
				sessionFactory = configuration.configure().buildSessionFactory();
			}
		}
	}

	public static SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			buildSessionFactory();
		}
		return sessionFactory;
	}

	public static Session getCurrentSession() {
		if (!getSessionFactory().getCurrentSession().isOpen())
			getSessionFactory().openSession();
		return getSessionFactory().getCurrentSession();
	}
}",True,"['Logger', 'Properties', 'Session', 'Configuration', 'SessionFactory']","['org.apache.log4j.Logger', 'java.util.Properties', 'org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']","public class hibernate_class_43 {
	private static Logger log = Logger.getLogger(hibernate_class_43.class);
	private static SessionFactory sessionFactory;
	private static String confFile = ""hibernate-test.properties"";
	private static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();

	private hibernate_class_43()

	}

	public static void buildSessionFactory() {
		Configuration configuration = new Configuration();
		synchronized (hibernate_class_43.class) {
			if (sessionFactory == null) {
				try {
					Properties properties = new Properties();
					properties.load(hibernate_class_43.class.getClassLoader().getResourceAsStream(confFile));
					configuration.setProperties(properties);
				} catch (Exception e) {
					log.fatal(""cannot load the specified hibernate properties file: "" + confFile);
					throw new RuntimeException(""cannot load the specified hibernate properties file : "" + confFile, e);
				}
				sessionFactory = configuration.configure().buildSessionFactory();
			}
		}
	}

	public static SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			buildSessionFactory();
		}
		return sessionFactory;
	}

	public static Session getCurrentSession() {
		if (!getSessionFactory().getCurrentSession().isOpen())
			getSessionFactory().openSession();
		return getSessionFactory().getCurrentSession();
	}
}",hibernate_class_43.java
"package hibernate;
//ID = 3853106

import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForm;
import org.apache.struts.actions.DispatchAction;
import java.util.Iterator;
import javax.servlet.http.HttpServletResponse;
import java.util.Set;
import org.hibernate.SessionFactory;
import java.util.ArrayList;
import javax.servlet.http.HttpServletRequest;
import org.hibernate.Session;
import java.util.HashSet;
import org.hibernate.Query;
import org.hibernate.Transaction;

public class hibernate_class_44 extends DispatchAction {

	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		if (log.isDebugEnabled()) {
			log.debug(""Entering Master add method"");
		}

		try {

		}

		catch (Exception ex) {
			ex.printStackTrace();
			return mapping.findForward(""failure"");
		}

		return mapping.findForward(""success1"");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		SessionFactory sessionFactory = null;
		Session session = null;
		System.out.println(""in cargo Action"");
		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();


			System.out.println(""in cargo Action"");
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward(""success"");

	}

	public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		System.out.println(""in cargo search Action"");
		SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
		HttpSession session1 = request.getSession();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		System.out.println(""in cargo search Action"");

		String name = null;
		String status = null;
		String createby = null;


		try {

			String SQL_QUERY = ""createby"";
			Query query = session.createQuery(SQL_QUERY);
			query.setParameter(""name"", name);
			query.setParameter(""status"", status);
			query.setParameter(""createby"", createby);
			ArrayList al = new ArrayList();
			for (Iterator i = query.iterate(); i.hasNext();) {

			}
			System.out.println(""Cargo list is:"" + al.size());
			session1.setAttribute(""clist"", al);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""search Cargo list is success"");

		return mapping.findForward(""success"");
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
		if (log.isDebugEnabled()) {
			log.debug(""Entering Master Edit method"");
		}

		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction transaction = session.beginTransaction();

			String qstring = ""from cargo c where c.id=:id"";
			Query query = session.createQuery(qstring);

			ArrayList all = new ArrayList();

			System.out.println(""Edit Cargo list "" + all.size());

			Set purchaseArray = new HashSet();

			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}

		System.out.println(""Edit Cargo list is success"");
		return mapping.findForward(""succ"");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		try {
			SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
			Session session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""Deleted success"");
		return mapping.findForward(""succes"");
	}

}",True,"['HttpSession', 'ActionForward', 'ActionMapping', 'ActionForm', 'DispatchAction', 'Iterator', 'HttpServletResponse', 'Set', 'SessionFactory', 'ArrayList', 'HttpServletRequest', 'Session', 'HashSet', 'Query', 'Transaction']","['javax.servlet.http.HttpSession', 'org.apache.struts.action.ActionForward', 'org.apache.struts.action.ActionMapping', 'org.apache.struts.action.ActionForm', 'org.apache.struts.actions.DispatchAction', 'java.util.Iterator', 'javax.servlet.http.HttpServletResponse', 'java.util.Set', 'org.hibernate.SessionFactory', 'java.util.ArrayList', 'javax.servlet.http.HttpServletRequest', 'org.hibernate.Session', 'java.util.HashSet', 'org.hibernate.Query', 'org.hibernate.Transaction']","public class hibernate_class_44 extends DispatchAction {

	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		if (log.isDebugEnabled()) {
			log.debug(""Entering Master add method"");
		}

		try

		}

		catch (Exception ex) {
			ex.printStackTrace();
			return mapping.findForward(""failure"");
		}

		return mapping.findForward(""success1"");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		SessionFactory sessionFactory = null;
		Session session = null;
		System.out.println(""in cargo Action"");
		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();


			System.out.println(""in cargo Action"");
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward(""success"");

	}

	public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		System.out.println(""in cargo search Action"");
		SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
		HttpSession session1 = request.getSession();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		System.out.println(""in cargo search Action"");

		String name = null;
		String status = null;
		String createby = null;


		try {

			String SQL_QUERY = ""createby"";
			Query query = session.createQuery(SQL_QUERY);
			query.setParameter(""name"", name);
			query.setParameter(""status"", status);
			query.setParameter(""createby"", createby);
			ArrayList al = new ArrayList();
			for (Iterator i = query.iterate(); i.hasNext();) {

			}
			System.out.println(""Cargo list is:"" + al.size());
			session1.setAttribute(""clist"", al);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""search Cargo list is success"");

		return mapping.findForward(""success"");
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
		if (log.isDebugEnabled()) {
			log.debug(""Entering Master Edit method"");
		}

		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction transaction = session.beginTransaction();

			String qstring = ""from cargo c where c.id=:id"";
			Query query = session.createQuery(qstring);

			ArrayList all = new ArrayList();

			System.out.println(""Edit Cargo list "" + all.size());

			Set purchaseArray = new HashSet();

			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}

		System.out.println(""Edit Cargo list is success"");
		return mapping.findForward(""succ"");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		try {
			SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
			Session session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""Deleted success"");
		return mapping.findForward(""succes"");
	}

}",hibernate_class_44.java
"package hibernate;
//ID = 4001795

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

public class hibernate_class_45 {
	public static void main(String[] args) {
		SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();
		Session session = factory.openSession();
		session.beginTransaction();

		session.save(""aa"");
		session.getTransaction().commit();
		session.close();
	}
}",True,"['Session', 'SessionFactory', 'AnnotationConfiguration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']","public class hibernate_class_45 {
	public static void main(String[] args) {
		SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();
		Session session = factory.openSession();
		session.beginTransaction();

		session.save(""aa"");
		session.getTransaction().commit()
		session.close();
	}
}",hibernate_class_45.java
"package hibernate;
//ID = 4530572

import javax.persistence.Entity;
import org.hibernate.annotations.NaturalId;
import java.io.Serializable;
import javax.persistence.Version;

@Entity
public class hibernate_class_49 implements Serializable {

	private static final long serialVersionUID = 1L;
	private String username;
	private String password;
	private Integer VERSION;

	@Version
	public Integer getVERSION() {
		return VERSION;
	}

	public void setVERSION(Integer vERSION) {
		VERSION = vERSION;
	}

	@NaturalId
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

}",True,"['Entity', 'NaturalId', 'Serializable', 'Version']","['javax.persistence.Entity', 'org.hibernate.annotations.NaturalId', 'java.io.Serializable', 'javax.persistence.Version']","public class hibernate_class_49 implements Serializable {

	private static final long serialVersionUID = 1L;
	private String username;
	private String password;
	private Integer VERSION;

	@Version
	public Integer getVERSION()
		return VERSION;
	}

	public void setVERSION(Integer vERSION) {
		VERSION = vERSION;
	}

	@NaturalId
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

}",hibernate_class_49.java
"package hibernate;
//ID = 1080766

import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;

public class hibernate_class_5 {

	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try {

			return new Configuration().configure().buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

}",True,"['Configuration', 'SessionFactory']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']","public class hibernate_class_5 {

	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try {

			return new Configuration().configure().buildSessionFactory();
		} catch (Throwable ex)

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

}",hibernate_class_5.java
"package hibernate;

import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import javax.naming.Name;

public class hibernate_class_50 {
	private SessionFactory sessionFactory;

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	@SuppressWarnings(""unchecked"")
	public List<Name> getAll() {
		Session session = this.sessionFactory.getCurrentSession();
		List<Name> names = (List<Name>) session.createQuery(""from Name"").list();
		return names;
	}

	public void save(Name name) {
		Session session = this.sessionFactory.getCurrentSession();
		session.saveOrUpdate(name);
		session.flush();
	}
}",True,"['List', 'Session', 'SessionFactory', 'Name']","['java.util.List', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'javax.naming.Name']","public class hibernate_class_50 {
	private SessionFactory sessionFactory;

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	public SessionFactory getSessionFactory() {
		return sessionFactory
	}

	@SuppressWarnings(""unchecked"")
	public List<Name> getAll() {
		Session session = this.sessionFactory.getCurrentSession();
		List<Name> names = (List<Name>) session.createQuery(""from Name"").list();
		return names;
	}

	public void save(Name name) {
		Session session = this.sessionFactory.getCurrentSession();
		session.saveOrUpdate(name);
		session.flush();
	}
}",hibernate_class_50.java
"package hibernate;
//ID = 1116268

import java.io.File;
import org.hibernate.EntityMode;
import org.dom4j.Document;
import java.net.MalformedURLException;
import java.util.Iterator;
import org.hibernate.SessionFactory;
import org.dom4j.io.SAXReader;
import java.util.List;
import org.dom4j.DocumentException;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;
import org.hibernate.HibernateException;
import org.hibernate.Transaction;

public class hibernate_class_6 {

	public static void main(final String[] args) throws MalformedURLException {
		File baseDir = new File(""C:\\workspaces\\hobby"");
		hibernate_class_6 importer = new hibernate_class_6();
		Configuration config = importer.setupDb(baseDir);

		if (config != null) {
			importer.importContents(new File(baseDir, ""people.xml""), config);
		}
	}

	private void importContents(final File file, final Configuration config) throws MalformedURLException {
		SessionFactory sessionFactory = config.buildSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();
		Session dom4jSession = session.getSession(EntityMode.DOM4J);

		SAXReader saxReader = new SAXReader();
		try {
			Document document = saxReader.read(file);

			List list = document.selectNodes(""//Person"");
			Iterator iter = list.iterator();

			while (iter.hasNext()) {
				Object personObj = iter.next();

			}

			session.flush();
			tx.commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
	}

	private Configuration setupDb(final File baseDir) throws HibernateException {
		Configuration cfg = new Configuration();
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Person.hbm.xml""));
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Hobby.hbm.xml""));

		SchemaExport export = new SchemaExport(cfg);

		export.setOutputFile(""hobbyDB.txt"");
		export.execute(false, true, false, false);
		return cfg;
	}
}",True,"['File', 'EntityMode', 'Document', 'MalformedURLException', 'Iterator', 'SessionFactory', 'SAXReader', 'List', 'DocumentException', 'Session', 'Configuration', 'SchemaExport', 'HibernateException', 'Transaction']","['java.io.File', 'org.hibernate.EntityMode', 'org.dom4j.Document', 'java.net.MalformedURLException', 'java.util.Iterator', 'org.hibernate.SessionFactory', 'org.dom4j.io.SAXReader', 'java.util.List', 'org.dom4j.DocumentException', 'org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.tool.hbm2ddl.SchemaExport', 'org.hibernate.HibernateException', 'org.hibernate.Transaction']","public class hibernate_class_6 {

	public static void main(final String[] args) throws MalformedURLException {
		File baseDir = new File(""C:\\workspaces\\hobby"");
		hibernate_class_6 importer = new hibernate_class_6();
		Configuration config = importer.setupDb(baseDir);

		if (config != null)
			importer.importContents(new File(baseDir, ""people.xml""), config);
		}
	}

	private void importContents(final File file, final Configuration config) throws MalformedURLException {
		SessionFactory sessionFactory = config.buildSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();
		Session dom4jSession = session.getSession(EntityMode.DOM4J);

		SAXReader saxReader = new SAXReader();
		try {
			Document document = saxReader.read(file);

			List list = document.selectNodes(""//Person"");
			Iterator iter = list.iterator();

			while (iter.hasNext()) {
				Object personObj = iter.next();

			}

			session.flush();
			tx.commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
	}

	private Configuration setupDb(final File baseDir) throws HibernateException {
		Configuration cfg = new Configuration();
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Person.hbm.xml""));
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Hobby.hbm.xml""));

		SchemaExport export = new SchemaExport(cfg);

		export.setOutputFile(""hobbyDB.txt"");
		export.execute(false, true, false, false);
		return cfg;
	}
}",hibernate_class_6.java
"package hibernate;
//ID = 1205820

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;

public class hibernate_class_7 {
	public class HibernateUtils {
		private final SessionFactory sessionFactory;
		private Session session;

		public HibernateUtils() {
			this.sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		}

		public HibernateUtils(SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;
		}


		public Session requestSession() {

			session = sessionFactory.openSession();

			return session;
		}
	}
}",True,"['Session', 'SessionFactory', 'AnnotationConfiguration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']","public class hibernate_class_7 {
	public class HibernateUtils {
		private final SessionFactory sessionFactory;
		private Session session;

		public HibernateUtils()
			this.sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		}

		public HibernateUtils(SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;
		}


		public Session requestSession() {

			session = sessionFactory.openSession();

			return session;
		}
	}
}",hibernate_class_7.java
"package hibernate;
//ID = 1262298

import java.util.List;
import org.hibernate.Session;
import java.io.Serializable;

public class hibernate_class_9 implements Serializable {
	private int patientId;
	private String patientName;
	private String providerId; // foreign key to provider

	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_9 PatientInfo = new hibernate_class_9();

		PatientInfo.setPatientId(Integer.parseInt(values.get(0)));
		PatientInfo.setPatientName(values.get(1));
		PatientInfo.setProviderId(values.get(2));

		session.save(PatientInfo);
	}


	public int getPatientId() {
		return patientId;
	}


	public void setPatientId(int PatientId) {
		this.patientId = PatientId;
	}


	public String getPatientName() {
		return this.patientName;
	}


	public void setPatientName(String PatientName) {
		this.patientName = PatientName;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}


	public String getProvider() {
		return this.providerId;
	}

	public void setProvider(String id) {
		this.providerId = id;
	}


	public static void main(String[] args) {

	}
}",True,"['List', 'Session', 'Serializable']","['java.util.List', 'org.hibernate.Session', 'java.io.Serializable']","public class hibernate_class_9 implements Serializable {
	private int patientId;
	private String patientName;
	private String providerId; // foreign key to provider

	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_9 PatientInfo = new hibernate_class_9();

		PatientInfo.setPatientId(Integer.parseInt(values.get(0)));
		PatientInfo.setPatientName(values.get(1));
		PatientInfo.setProviderId(values.get(2));

		session.save(PatientInfo)
	}


	public int getPatientId() {
		return patientId;
	}


	public void setPatientId(int PatientId) {
		this.patientId = PatientId;
	}


	public String getPatientName() {
		return this.patientName;
	}


	public void setPatientName(String PatientName) {
		this.patientName = PatientName;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}


	public String getProvider() {
		return this.providerId;
	}

	public void setProvider(String id) {
		this.providerId = id;
	}


	public static void main(String[] args) {

	}
}",hibernate_class_9.java
"package joda_time;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

import java.util.TimeZone;

public class JodaTime01 {
	public static void main(String[] args) {

		DateTimeFormatter timeParser = ISODateTimeFormat.timeParser();
//		Prompt: DateTimeFormatter timeParser = <mask><mask><mask>.timeParser();
		TimeZone timeZone = TimeZone.getDefault();
		System.out.println(timeZone.getID());
		System.out.println(timeZone.getDisplayName());

		DateTimeZone defaultTimeZone = DateTimeZone.getDefault();
		System.out.println(defaultTimeZone.getID());
		System.out.println(defaultTimeZone.getName(0L));

		DateTime currentTime = new DateTime();
		DateTimeZone currentZone = currentTime.getZone();
		System.out.println(currentZone.getID());
		System.out.println(currentZone.getName(0L));
	}
}",True,"['DateTime', 'DateTimeZone', 'DateTimeFormatter', 'ISODateTimeFormat', 'TimeZone']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.ISODateTimeFormat', 'java.util.TimeZone']","public class JodaTime01 {
	public static void main(String[] args) {

		DateTimeFormatter timeParser = ISODateTimeFormat.timeParser();
//		Prompt: DateTimeFormatter timeParser = <mask><mask><mask>.timeParser();
		TimeZone timeZone = TimeZone.getDefault();
		System.out.println(timeZone.getID());
		System.out.println(timeZone.getDisplayName());

		DateTimeZone defaultTimeZone = DateTimeZone.getDefault();
		System.out.println(defaultTimeZone.getID());
		System.out.println(defaultTimeZone.getName(0L));

		DateTime currentTime = new DateTime();
		DateTimeZone currentZone = currentTime.getZone();
		System.out.println(currentZone.getID());
		System.out.println(currentZone.getName(0L));
	}
",JodaTime01.java
"package joda_time;


import org.joda.time.DateTimeZone;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;

public class JodaTime02 {

	public static void main(String[] args) {
		DateMidnight today = new DateMidnight(2009, 2, 24);
		DateTimeZone zone = today.getZone();

		DateTime previousTransition = new DateTime(zone.previousTransition(today.getMillis()));

		System.out.println(previousTransition);

		DateTime nextTransition = new DateTime(zone.nextTransition(today.getMillis()));

		System.out.println(nextTransition);

	}

}",True,"['DateTimeZone', 'DateMidnight', 'DateTime']","['org.joda.time.DateTimeZone', 'org.joda.time.DateMidnight', 'org.joda.time.DateTime']","public class JodaTime02 {

	public static void main(String[] args) {
		DateMidnight today = new DateMidnight(2009, 2, 24);
		DateTimeZone zone = today.getZone();

		DateTime previousTransition = new DateTime(zone.previousTransition(today.getMillis()));

		System.out.println(previousTransition);

		DateTime nextTransition = new DateTime(zone.nextTransition(today.getMillis()));

		System.out.println(nextTransition);



}",JodaTime02.java
"package joda_time;


import org.joda.time.Interval;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodFormatter;

public class JodaTime03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public static String formatDuration(long start, long end) {
		Interval interval = new Interval(start, end);
		return getPeriodFormatter().print(interval.toPeriod()).trim();
	}

	private static PeriodFormatter getPeriodFormatter() {
		PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(""y "", ""y "")
				.appendMonths().appendSuffix(""m"", ""m "").appendDays().appendSuffix(""d "", ""d "").appendHours()
				.appendSuffix(""h "", ""h "").appendMinutes().appendSuffix(""m "", ""m "").appendSeconds()
				.appendSuffix(""s "", ""s "").toFormatter();

		return pf;
	}
}",True,"['Interval', 'PeriodFormatterBuilder', 'PeriodFormatter']","['org.joda.time.Interval', 'org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.PeriodFormatter']","public class JodaTime03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public static String formatDuration(long start, long end) {
		Interval interval = new Interval(start, end);
		return getPeriodFormatter().print(interval.toPeriod()).trim();
	}

	private static PeriodFormatter getPeriodFormatter() {
		PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(""y "", ""y "")
				.appendMonths().appendSuffix(""m"", ""m "").appendDays().appendSuffix(""d "", ""d "").appendHours()
				.appendSuffix(""h "", ""h "").appendMinutes().appendSuffix(""m "", ""m "").appendSeconds()
				.appendSuffix(""s "", ""s "").toFormatter();

		return pf;

}",JodaTime03.java
"package joda_time;


import org.joda.time.ReadableInstant;
import org.joda.time.Period;

public class JodaTime04 {
	private ReadableInstant[] startTime;
	private ReadableInstant[] endTime;

	public String foobar(int dayIndex) {
		Period p = new Period(this.startTime[dayIndex], this.endTime[dayIndex]);
		long hours = p.getHours();
		long minutes = p.getMinutes();

		String format = String.format(""%%0%dd"", 2);//Ensures that the minutes will always display as two digits.

		return Long.toString(hours) + "":"" + String.format(format, minutes);
	}

}",True,"['ReadableInstant', 'Period']","['org.joda.time.ReadableInstant', 'org.joda.time.Period']","public class JodaTime04 {
	private ReadableInstant[] startTime;
	private ReadableInstant[] endTime;

	public String foobar(int dayIndex) {
		Period p = new Period(this.startTime[dayIndex], this.endTime[dayIndex]);
		long hours = p.getHours();
		long minutes = p.getMinutes()

		String format = String.format(""%%0%dd"", 2);//Ensures that the minutes will always display as two digits.

		return Long.toString(hours) + "":"" + String.format(format, minutes);
	}

}",JodaTime04.java
"package joda_time;

import org.joda.time.PeriodType;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.Duration;

public class JodaTime06 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		printDuration(new Duration(5000));
		printDuration(new Duration(4900));
		printDuration(new Duration(1000));
		printDuration(new Duration(900));
		printDuration(new Duration(0));
	}

	static void printDuration(Duration d) {
		System.out.println(d.toPeriod(PeriodType.time())
				.toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));
	}

}",True,"['PeriodType', 'PeriodFormatterBuilder', 'Duration']","['org.joda.time.PeriodType', 'org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.Duration']","public class JodaTime06 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		printDuration(new Duration(5000));
		printDuration(new Duration(4900));
		printDuration(new Duration(1000));
		printDuration(new Duration(900));
		printDuration(new Duration(0));
	}

	static void printDuration(Duration d) {
		System.out.println(d.toPeriod(PeriodType.time())
				.toString(new PeriodFormatterBuilder().printZeroAlways().appendSeconds().toFormatter()));


}",JodaTime06.java
"package joda_time;

import java.util.Calendar;
import java.util.Date;
import org.joda.time.Days;
import org.joda.time.DateTime;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;


public class JodaTime07 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		DateFormat formatter = new SimpleDateFormat(""mm/dd/yyyy"");

		Date someDate = new Date();
		Date today = Calendar.getInstance().getTime();

		try {
			someDate = formatter.parse(""06/22/2010"");
		} catch (ParseException pe) {
			System.out.println(""Parser Exception"");
		}

		int days = Days.daysBetween(new DateTime(someDate), new DateTime(today)).getDays();

		System.out.println("" Days Between "" + someDate + "" : "" + today + "" - "" + days);

	}

}",True,"['Calendar', 'Date', 'Days', 'DateTime', 'DateFormat', 'ParseException', 'SimpleDateFormat']","['java.util.Calendar', 'java.util.Date', 'org.joda.time.Days', 'org.joda.time.DateTime', 'java.text.DateFormat', 'java.text.ParseException', 'java.text.SimpleDateFormat']","public class JodaTime07 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		DateFormat formatter = new SimpleDateFormat(""mm/dd/yyyy"");

		Date someDate = new Date();
		Date today = Calendar.getInstance().getTime();

		try {
			someDate = formatter.parse(""06/22/2010"");
		} catch (ParseException pe) {
			System.out.println(""Parser Exception"");


		int days = Days.daysBetween(new DateTime(someDate), new DateTime(today)).getDays();

		System.out.println("" Days Between "" + someDate + "" : "" + today + "" - "" + days);

	}

}",JodaTime07.java
"package joda_time;

import org.joda.time.Period;
import java.util.concurrent.TimeUnit;
import org.joda.time.PeriodType;

public class JodaTime08 {
	public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() {
		long twentyDaysInMillis = TimeUnit.MILLISECONDS.convert(20, TimeUnit.DAYS);
		Period twoWeeks = new Period(twentyDaysInMillis, PeriodType.weeks());
		return (2 == twoWeeks.getWeeks()) ? true : false;
	}
}",True,"['Period', 'TimeUnit', 'PeriodType']","['org.joda.time.Period', 'java.util.concurrent.TimeUnit', 'org.joda.time.PeriodType']","public class JodaTime08
	public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() {
		long twentyDaysInMillis = TimeUnit.MILLISECONDS.convert(20, TimeUnit.DAYS);
		Period twoWeeks = new Period(twentyDaysInMillis, PeriodType.weeks());
		return (2 == twoWeeks.getWeeks()) ? true : false;
	}
}",JodaTime08.java
"package joda_time;

import org.joda.time.DateTimeZone;

import java.util.TimeZone;

public class JodaTime09 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		final String string_from_3rd_party = ""GMT+08:00"";
		System.out.println(TimeZone.getTimeZone(string_from_3rd_party));

		System.out.println(DateTimeZone.forID(string_from_3rd_party));
	}

}",True,"['DateTimeZone', 'TimeZone']","['org.joda.time.DateTimeZone', 'java.util.TimeZone']","public class JodaTime09 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		final String string_from_3rd_party = ""GMT+08:00"";
		System.out.println(TimeZone.getTimeZone(string_from_3rd_party));

		System.out.println(DateTimeZone.forID(string_from_3rd_party));


}",JodaTime09.java
"package joda_time;

import org.joda.time.DateTimeZone;
import org.joda.time.chrono.ISOChronology;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class JodaTime10 {

	private Object writeReplace() {
		return new Stub(null);
	}

	private static final class Stub implements Serializable {
		private static final long serialVersionUID = -6212696554273812441L;

		private transient DateTimeZone iZone;

		Stub(DateTimeZone zone) {
			iZone = zone;
		}

		private Object readResolve() {
			return ISOChronology.getInstance(iZone);
		}

		private void writeObject(ObjectOutputStream out) throws IOException {
			out.writeObject(iZone);
		}

		private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
			iZone = (DateTimeZone) in.readObject();
		}
	}
}",True,"['DateTimeZone', 'ISOChronology', 'ObjectInputStream', 'IOException', 'ObjectOutputStream', 'Serializable']","['org.joda.time.DateTimeZone', 'org.joda.time.chrono.ISOChronology', 'java.io.ObjectInputStream', 'java.io.IOException', 'java.io.ObjectOutputStream', 'java.io.Serializable']","public class JodaTime10 {

	private Object writeReplace() {
		return new Stub(null);
	}

	private static final class Stub implements Serializable {
		private static final long serialVersionUID = -6212696554273812441L;

		private transient DateTimeZone iZone;

		Stub(DateTimeZone zone) {
			iZone = zone;
		}

		private Object readResolve() {
			return ISOChronology.getInstance(iZone);


		private void writeObject(ObjectOutputStream out) throws IOException {
			out.writeObject(iZone);
		}

		private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
			iZone = (DateTimeZone) in.readObject();
		}
	}
}",JodaTime10.java
"package joda_time;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class JodaTime11 {
	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""EEE MMM dd HH:mm:ss z yyyy"");
		System.out.println(dtf.parseDateTime(""Fri Nov 11 12:13:14 JST 2010""));
		try {
			System.out.println(new SimpleDateFormat(""EEE MMM dd HH:mm:ss z yyyy"").parse(""Fri Nov 11 12:13:14 JST 2010""));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'ParseException', 'SimpleDateFormat']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'java.text.ParseException', 'java.text.SimpleDateFormat']","public class JodaTime11 {
	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""EEE MMM dd HH:mm:ss z yyyy"");
		System.out.println(dtf.parseDateTime(""Fri Nov 11 12:13:14 JST 2010""));
		try {
			System.out.println(new SimpleDateFormat(""EEE MMM dd HH:mm:ss z yyyy"").parse(""Fri Nov 11 12:13:14 JST 2010""));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


}",JodaTime11.java
"package joda_time;

import org.joda.time.DateTime;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;


public class JodaTime12 {

	public static void main(String[] args) {

		String currentDate;
		SimpleDateFormat myFormat = new SimpleDateFormat(""dd/MM/yyyy HH:mm"");
		Date date1 = null;
		DateTime dt;

		currentDate = ""27/12/2010 11:29"";

		try {
			date1 = (Date) myFormat.parse(currentDate);

		} catch (ParseException ex) {

			ex.printStackTrace();

		}
		dt = new DateTime(date1);
		dt.plusMinutes(30);

	}

}",True,"['DateTime', 'Date', 'ParseException', 'SimpleDateFormat']","['org.joda.time.DateTime', 'java.sql.Date', 'java.text.ParseException', 'java.text.SimpleDateFormat']","public class JodaTime12 {

	public static void main(String[] args) {

		String currentDate;
		SimpleDateFormat myFormat = new SimpleDateFormat(""dd/MM/yyyy HH:mm"");
		Date date1 = null;
		DateTime dt

		currentDate = ""27/12/2010 11:29"";

		try {
			date1 = (Date) myFormat.parse(currentDate);

		} catch (ParseException ex) {

			ex.printStackTrace();

		}
		dt = new DateTime(date1);
		dt.plusMinutes(30);

	}

}",JodaTime12.java
"package joda_time;

import static org.junit.Assert.*;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.Test;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;

public class JodaTime13 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Test
	public void second() {
		assertEquals(""00:00:01"", OurDateTimeFormatter.format(1000));
	}

	@Test
	public void minute() {
		assertEquals(""00:01:00"", OurDateTimeFormatter.format(1000 * 60));
	}

	@Test
	public void hour() {
		assertEquals(""01:00:00"", OurDateTimeFormatter.format(1000 * 60 * 60));
	}

	@Test
	public void almostMidnight() {
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""23:59:59"", OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
	}

	@Test
	public void twoDaysAndAHalf() {
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""12:00:00 and 2 days"", OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
	}

	public static class OurDateTimeFormatter {
		public OurDateTimeFormatter() {
		}

		private final static PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays()
				.appendSuffix("" day"", "" days"").appendSeparator("" "").appendHours().appendSeparator("":"").appendMinutes()
				.minimumPrintedDigits(2).appendSeparator("":"").appendSeconds().minimumPrintedDigits(2).toFormatter();

		public static String format(long millis) {
			return dateFormat.print(new Period(millis).normalizedStandard());
		}
	}
}",True,"['*', 'PeriodFormatterBuilder', 'Test', 'PeriodFormatter', 'Period']","['staticorg.junit.Assert.*', 'org.joda.time.format.PeriodFormatterBuilder', 'org.junit.Test', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime13 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Test
	public void second() {
		assertEquals(""00:00:01"", OurDateTimeFormatter.format(1000));
	}

	@Test
	public void minute() {
		assertEquals(""00:01:00"", OurDateTimeFormatter.format(1000 * 60));
	}

	@Test
	public void hour() {
		assertEquals(""01:00:00"", OurDateTimeFormatter.format(1000 * 60 * 60));
	}

	@Test
	public void almostMidnight() {
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""23:59:59"", OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
	}

	@Test
	public void twoDaysAndAHalf()
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""12:00:00 and 2 days"", OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
	}

	public static class OurDateTimeFormatter {
		public OurDateTimeFormatter() {
		}

		private final static PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays()
				.appendSuffix("" day"", "" days"").appendSeparator("" "").appendHours().appendSeparator("":"").appendMinutes()
				.minimumPrintedDigits(2).appendSeparator("":"").appendSeconds().minimumPrintedDigits(2).toFormatter();

		public static String format(long millis) {
			return dateFormat.print(new Period(millis).normalizedStandard());
		}
	}
}",JodaTime13.java
"package joda_time;


import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime14 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String start = ""Sunday, January 09, 2011 6:15:00 PM"";

		DateTimeFormatter parser1 = DateTimeFormat.forPattern(""EEEE, MMMM dd, yyyy H:mm:ss aa"");

		DateTime startTime = parser1.parseDateTime(start);
	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime14 {

	public static void main(String[] args)
		// TODO Auto-generated method stub
		String start = ""Sunday, January 09, 2011 6:15:00 PM"";

		DateTimeFormatter parser1 = DateTimeFormat.forPattern(""EEEE, MMMM dd, yyyy H:mm:ss aa"");

		DateTime startTime = parser1.parseDateTime(start);
	}

}",JodaTime14.java
"package joda_time;


import org.joda.time.DateTime;
import org.joda.time.MutableDateTime;

public class JodaTime15 {
	public static void main(String[] args) {
		MutableDateTime now = new MutableDateTime();
		now.setHourOfDay(2);
		now.setMinuteOfHour(0);
		now.setSecondOfMinute(0);
		now.setMillisOfSecond(0);
		DateTime myDate = now.toDateTime();
	}
}",True,"['DateTime', 'MutableDateTime']","['org.joda.time.DateTime', 'org.joda.time.MutableDateTime']","public class JodaTime15 {
	public static void main(String[] args)
		MutableDateTime now = new MutableDateTime();
		now.setHourOfDay(2);
		now.setMinuteOfHour(0);
		now.setSecondOfMinute(0);
		now.setMillisOfSecond(0);
		DateTime myDate = now.toDateTime();
	}
}",JodaTime15.java
"package joda_time;

import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.DateTime;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;

public class JodaTime16 {
	public static void main(String[] args) {
		DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);
		DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);

		Period negativePeriod = new Period(d1, d2);
		Period positivePeriod = new Period(d2, d1);

		PeriodFormatter pf = new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix("":"")
				.rejectSignedValues(true) // Does this do anything?
				.appendMinutes().appendSuffix("":"").appendSeconds().toFormatter();

		System.out.printf(""Negative Period: %s\n"", pf.print(negativePeriod));
		System.out.printf(""Positive Period: %s\n"", pf.print(positivePeriod));
	}
}",True,"['PeriodFormatterBuilder', 'DateTime', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.DateTime', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime16 {
	public static void main(String[] args) {
		DateTime d1 = new DateTime(2011, 6, 17, 13, 13, 5, 0);
		DateTime d2 = new DateTime(2011, 6, 17, 10, 17, 3, 0);

		Period negativePeriod = new Period(d1, d2);
		Period positivePeriod = new Period(d2, d1)

		PeriodFormatter pf = new PeriodFormatterBuilder().minimumPrintedDigits(2).appendHours().appendSuffix("":"")
				.rejectSignedValues(true) // Does this do anything?
				.appendMinutes().appendSuffix("":"").appendSeconds().toFormatter();

		System.out.printf(""Negative Period: %s\n"", pf.print(negativePeriod));
		System.out.printf(""Positive Period: %s\n"", pf.print(positivePeriod));
	}
}",JodaTime16.java
"package joda_time;


import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime17 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""dd-MM-yyyy HH:mm:ss.SSS z"");

		String dts = dtf.print(System.currentTimeMillis());

		System.out.println(dts);

		DateTime dt = dtf.parseDateTime(dts);

	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime17 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""dd-MM-yyyy HH:mm:ss.SSS z"");

		String dts = dtf.print(System.currentTimeMillis());

		System.out.println(dts)

		DateTime dt = dtf.parseDateTime(dts);

	}

}",JodaTime17.java
"package joda_time;

import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeFormatter;


public class JodaTime18 {

	private static final DateTimeZone LOCAL_TZ = DateTimeZone.getDefault();

	private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder()
			.appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1)
			.appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':')
			.appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);
}",True,"['DateTimeZone', 'DateTimeFormatterBuilder', 'DateTimeFormatter']","['org.joda.time.DateTimeZone', 'org.joda.time.format.DateTimeFormatterBuilder', 'org.joda.time.format.DateTimeFormatter']","public class JodaTime18 {

	private static final DateTimeZone LOCAL_TZ = DateTimeZone.getDefault();

	private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder()
			.appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1)
			.appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':')
			.appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);
",JodaTime18.java
"package joda_time;

import org.joda.time.Instant;
import java.util.Date;
import org.joda.time.Interval;
import org.joda.time.ReadableInstant;

public class JodaTime19 {
	public static void main(String[] args) {
		Instant now = new Instant(new Date().getTime());
		Interval i2 = new Interval(now, (ReadableInstant) null);
		Interval i1 = new Interval(now, (ReadableInstant) null);
		boolean overlapping = i2.overlaps(i1);
	}
}",True,"['Instant', 'Date', 'Interval', 'ReadableInstant']","['org.joda.time.Instant', 'java.util.Date', 'org.joda.time.Interval', 'org.joda.time.ReadableInstant']","public class JodaTime19 {
	public static void main(String[] args) {
		Instant now = new Instant(new Date().getTime());
		Interval i2 = new Interval(now, (ReadableInstant) null);
		Interval i1 = new Interval(now, (ReadableInstant) null);
		boolean overlapping = i2.overlaps(i1)
	}
}",JodaTime19.java
"package joda_time;
//ID = 7807271

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

public class JodaTime20 {

	public static void main(String[] args) {
		String DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
		DateTimeFormatter DATETIME_FORMATTER = DateTimeFormat.forPattern(DATE_FORMAT);
		DateTimeZone dateTimeZone = DateTimeZone.forID(""-03:00"");

		DateTime date = DATETIME_FORMATTER.withZone(dateTimeZone).parseDateTime(""2000-01-01 00:00:00"");
		System.out.println(""Current date is: "" + date.toString());

		DateTime convertedDate = date.toDateTime(DateTimeZone.UTC);
		System.out.println(""Converted date: "" + date.toString());
		// TODO Auto-generated method stub

	}

}",True,"['DateTime', 'DateTimeZone', 'DateTimeFormat', 'DateTimeFormatter']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter']","public class JodaTime20 {

	public static void main(String[] args) {
		String DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
		DateTimeFormatter DATETIME_FORMATTER = DateTimeFormat.forPattern(DATE_FORMAT);
		DateTimeZone dateTimeZone = DateTimeZone.forID(""-03:00"");

		DateTime date = DATETIME_FORMATTER.withZone(dateTimeZone).parseDateTime(""2000-01-01 00:00:00"");
		System.out.println(""Current date is: "" + date.toString());

		DateTime convertedDate = date.toDateTime(DateTimeZone.UTC);
		System.out.println(""Converted date: "" + date.toString());
		// TODO Auto-generated method stub



}",JodaTime20.java
"package joda_time;


import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.DateTime;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class JodaTime21 {
	public static void main(String[] args) {
		DateFormat formatter = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
		Date dt = null;
		try {
			dt = (Date) formatter.parse(""2011-10-23 12:00:00"");
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		LocalDateTime ldt = new DateTime(dt).withZone(DateTimeZone.UTC).toLocalDateTime();
		System.out.println(""Original date: "" + ldt.toDateTime().toDate().toString());
		DateTime cvtldt = ldt.toDateTime(DateTimeZone.forID(""-05:00""));
		System.out.println(""Converted date: "" + cvtldt.toLocalDateTime().toDateTime().toDate().toString());
	}
}",True,"['DateTimeZone', 'LocalDateTime', 'DateTime', 'Date', 'DateFormat', 'ParseException', 'SimpleDateFormat']","['org.joda.time.DateTimeZone', 'org.joda.time.LocalDateTime', 'org.joda.time.DateTime', 'java.sql.Date', 'java.text.DateFormat', 'java.text.ParseException', 'java.text.SimpleDateFormat']","public class JodaTime21 {
	public static void main(String[] args) {
		DateFormat formatter = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
		Date dt = null;
		try
			dt = (Date) formatter.parse(""2011-10-23 12:00:00"");
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		LocalDateTime ldt = new DateTime(dt).withZone(DateTimeZone.UTC).toLocalDateTime();
		System.out.println(""Original date: "" + ldt.toDateTime().toDate().toString());
		DateTime cvtldt = ldt.toDateTime(DateTimeZone.forID(""-05:00""));
		System.out.println(""Converted date: "" + cvtldt.toLocalDateTime().toDateTime().toDate().toString());
	}
}",JodaTime21.java
"package joda_time;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;
import java.sql.Date;
import java.text.ParseException;

public class JodaTime22 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public String getDateFromDateTime(Date date, Boolean display) throws ParseException {

		DateTimeFormatter dtFormatter;

		if (display)
			dtFormatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");
		else
			dtFormatter = DateTimeFormat.forPattern(""yyyy-MM-dd"");

		DateTime dt = new DateTime(date);
		String myDate = dt.toString(dtFormatter);

		System.out.println(
				""OrderDisplayUtil.java:getDateFromDateTime("" + date + "", "" + display + ""): "" + ""myDate = "" + myDate);

		return myDate;

	}
}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime', 'Date', 'ParseException']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime', 'java.sql.Date', 'java.text.ParseException']","public class JodaTime22 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public String getDateFromDateTime(Date date, Boolean display) throws ParseException {

		DateTimeFormatter dtFormatter

		if (display)
			dtFormatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");
		else
			dtFormatter = DateTimeFormat.forPattern(""yyyy-MM-dd"");

		DateTime dt = new DateTime(date);
		String myDate = dt.toString(dtFormatter);

		System.out.println(
				""OrderDisplayUtil.java:getDateFromDateTime("" + date + "", "" + display + ""): "" + ""myDate = "" + myDate);

		return myDate;

	}
}",JodaTime22.java
"package joda_time;
//ID = 8321537

import org.joda.time.LocalDate;
import org.joda.time.DateTimeConstants;

public class JodaTime23 {

	LocalDate getNearestDayOfWeek(LocalDate ld, String day) {
		LocalDate target = ld.dayOfWeek().setCopy(day);
		if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
			target = target.plusWeeks(1);
		}
		return target;
	}
}",True,"['LocalDate', 'DateTimeConstants']","['org.joda.time.LocalDate', 'org.joda.time.DateTimeConstants']","public class JodaTime23 {

	LocalDate getNearestDayOfWeek(LocalDate ld, String day) {
		LocalDate target = ld.dayOfWeek().setCopy(day);
		if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
			target = target.plusWeeks(1);

		return target;
	}
}",JodaTime23.java
"package joda_time;
//ID = 8525863

import org.joda.time.format.PeriodFormat;
import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;

public class JodaTime24 {

	public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) {
		Period p = new Period(startDate, endDate, PeriodType.standard().withSecondsRemoved().withMillisRemoved());
		return PeriodFormat.getDefault().print(p);
	}
}",True,"['PeriodFormat', 'DateTime', 'Period', 'PeriodType']","['org.joda.time.format.PeriodFormat', 'org.joda.time.DateTime', 'org.joda.time.Period', 'org.joda.time.PeriodType']","public class JodaTime24 {

	public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) {
		Period p = new Period(startDate, endDate, PeriodType.standard().withSecondsRemoved().withMillisRemoved());
		return PeriodFormat.getDefault().print(p)
	}
}",JodaTime24.java
"package joda_time;

import org.joda.time.LocalDateTime;
import org.joda.time.DateMidnight;
import org.joda.time.Days;


public class JodaTime25 {
	public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) {
		System.out.println(""--Calculate days between: "" + oldDate.toString() + ""->"" + newDate);
		Days days = Days.daysBetween(new DateMidnight(oldDate.toDateTime()), new DateMidnight(newDate.toDateTime()));
		System.out.println(""----DIFF: "" + days.size());
		return days.size();
	}
}",True,"['LocalDateTime', 'DateMidnight', 'Days']","['org.joda.time.LocalDateTime', 'org.joda.time.DateMidnight', 'org.joda.time.Days']","public class JodaTime25 {
	public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) {
		System.out.println(""--Calculate days between: "" + oldDate.toString() + ""->"" + newDate);
		Days days = Days.daysBetween(new DateMidnight(oldDate.toDateTime()), new DateMidnight(newDate.toDateTime()));
		System.out.println(""----DIFF: "" + days.size())
		return days.size();
	}
}",JodaTime25.java
"package joda_time;


import org.joda.time.Duration;
import org.joda.time.Period;

public class JodaTime26 {

	public static void main(String[] args) {
		Duration duration = new Duration(1328223198241L - 1326308781131L);
		Period p2 = new Period(duration.getMillis());
		System.out.println(p2.getDays());
		System.out.println(p2.getHours());
	}

}",True,"['Duration', 'Period']","['org.joda.time.Duration', 'org.joda.time.Period']","public class JodaTime26 {

	public static void main(String[] args) {
		Duration duration = new Duration(1328223198241L - 1326308781131L);
		Period p2 = new Period(duration.getMillis());
		System.out.println(p2.getDays())
		System.out.println(p2.getHours());
	}

}",JodaTime26.java
"package joda_time;


import org.joda.time.DateTime;
import java.util.ArrayList;

public class JodaTime27 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<DateTime> monthStarts = new ArrayList<DateTime>();
		int firstYear = 0;
		int lastYear = 0;
		for (int y = firstYear; y <= lastYear; y++) {
			for (int m = 1; m <= 12; m++) {
				monthStarts.add(new DateTime(y + ""-"" + m + ""-01""));
			}
		}
	}

}",True,"['DateTime', 'ArrayList']","['org.joda.time.DateTime', 'java.util.ArrayList']","public class JodaTime27 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<DateTime> monthStarts = new ArrayList<DateTime>();
		int firstYear = 0;
		int lastYear = 0;
		for (int y = firstYear; y <= lastYear; y++) {
			for (int m = 1; m <= 12; m++) {
				monthStarts.add(new DateTime(y + ""-"" + m + ""-01""));

		}
	}

}",JodaTime27.java
"package joda_time;

import java.util.List;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;
import org.joda.time.Days;
import java.util.ArrayList;

public class JodaTime28 {
	public static void main(String[] args) {
		DateTimeFormatter dateFromatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		DateTime startDate = dateFromatter.parseDateTime(""01/02/2012"");
		DateTime endDate = dateFromatter.parseDateTime(""01/31/2012"");

		List<LocalDate> dates = new ArrayList<LocalDate>();

		int days = Days.daysBetween(startDate, endDate).getDays();
	}
}",True,"['List', 'DateTimeFormat', 'LocalDate', 'DateTimeFormatter', 'DateTime', 'Days', 'ArrayList']","['java.util.List', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.LocalDate', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime', 'org.joda.time.Days', 'java.util.ArrayList']","public class JodaTime28 {
	public static void main(String[] args) {
		DateTimeFormatter dateFromatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		DateTime startDate = dateFromatter.parseDateTime(""01/02/2012"");
		DateTime endDate = dateFromatter.parseDateTime(""01/31/2012"");

		List<LocalDate> dates = new ArrayList<LocalDate>();

		int days = Days.daysBetween(startDate, endDate).getDays();

}",JodaTime28.java
"package joda_time;

import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime29 {

	private static final int FIELD_COUNT = 10;

	public static void main(String[] args) {

	}

	public DateTime parseDateTime(final String text) {
		DateTimeFormatter formatters[] = new DateTimeFormatter[20];
		if (text.isEmpty())
			return null;
		int field = 0;
		DateTime dateTime = null;
		IllegalArgumentException exception = null;
		for (; field < FIELD_COUNT; ++field) {
			if (null != formatters[field]) {
				try {
					dateTime = formatters[field].parseDateTime(text);
					break;
				} catch (final IllegalArgumentException e) {
					exception = null != exception ? exception : e;
				}
			}
		}
		if (dateTime == null) {
			throw exception;
		}
		return dateTime;
	}
}",True,"['DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime29 {

	private static final int FIELD_COUNT = 10;

	public static void main(String[] args) {

	}

	public DateTime parseDateTime(final String text) {
		DateTimeFormatter formatters[] = new DateTimeFormatter[20];
		if (text.isEmpty())
			return null;
		int field = 0;
		DateTime dateTime = null;
		IllegalArgumentException exception = null;
		for (; field < FIELD_COUNT; ++field) {
			if (null != formatters[field]) {
				try
					dateTime = formatters[field].parseDateTime(text);
					break;
				} catch (final IllegalArgumentException e) {
					exception = null != exception ? exception : e;
				}
			}
		}
		if (dateTime == null) {
			throw exception;
		}
		return dateTime;
	}
}",JodaTime29.java
"package joda_time;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

public class JodaTime30 {

	public static void main(String[] args) {
		DateTimeZone dtz = DateTimeZone.forOffsetHours(0);

		DateTime dt = new DateTime(dtz);

		System.out.println(dt);
		System.out.println(dt.toDate());

	}

}",True,"['DateTime', 'DateTimeZone']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone']","public class JodaTime30 {

	public static void main(String[] args) {
		DateTimeZone dtz = DateTimeZone.forOffsetHours(0);

		DateTime dt = new DateTime(dtz)

		System.out.println(dt);
		System.out.println(dt.toDate());

	}

}",JodaTime30.java
"package joda_time;

import org.joda.time.DateTime;
import org.joda.time.Weeks;

public class JodaTime31 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		DateTime s = new DateTime(Long.parseLong(""1330573027000""));
		DateTime e = new DateTime(Long.parseLong(""1331005027000""));

		Weeks weeks = Weeks.weeksBetween(s, e).plus(1);
		DateTime start = new DateTime(Long.parseLong(""1330659427000""));
		DateTime end = new DateTime(Long.parseLong(""1530659427000""));
		DateTime finalStart = start.dayOfWeek().withMinimumValue();

		DateTime finalEnd = end.dayOfWeek().withMaximumValue();
	}

}",True,"['DateTime', 'Weeks']","['org.joda.time.DateTime', 'org.joda.time.Weeks']","public class JodaTime31 {

	public static void main(String[] args)
		// TODO Auto-generated method stub

		DateTime s = new DateTime(Long.parseLong(""1330573027000""));
		DateTime e = new DateTime(Long.parseLong(""1331005027000""));

		Weeks weeks = Weeks.weeksBetween(s, e).plus(1);
		DateTime start = new DateTime(Long.parseLong(""1330659427000""));
		DateTime end = new DateTime(Long.parseLong(""1530659427000""));
		DateTime finalStart = start.dayOfWeek().withMinimumValue();

		DateTime finalEnd = end.dayOfWeek().withMaximumValue();
	}

}",JodaTime31.java
"package joda_time;

import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;


public class JodaTime32 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = null;
		// TODO Auto-generated method stub
		final DateTime date1 = dtf.parseDateTime(""1979-04-29"");
		final DateTime date2 = dtf.parseDateTime(""1979-05-12"");
		final DateTime date3 = dtf.parseDateTime(""1979-04-02"");
		final DateTime date4 = dtf.parseDateTime(""1979-04-15"");
		System.err.println(date1.toString());
		System.err.println(date2.toString());
		System.err.println(date3.toString());
		System.err.println(date4.toString());
	}

}",True,"['DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime32 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = null;
		// TODO Auto-generated method stub
		final DateTime date1 = dtf.parseDateTime(""1979-04-29"");
		final DateTime date2 = dtf.parseDateTime(""1979-05-12"");
		final DateTime date3 = dtf.parseDateTime(""1979-04-02"");
		final DateTime date4 = dtf.parseDateTime(""1979-04-15"");
		System.err.println(date1.toString())
		System.err.println(date2.toString());
		System.err.println(date3.toString());
		System.err.println(date4.toString());
	}

}",JodaTime32.java
"package joda_time;

import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;

public class JodaTime33 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix("" hour"", "" hours"")
				.appendSeparator("", "", "" and "").appendMinutes().appendSuffix("" minute"", "" minutes"")
				.appendSeparator("" and "").printZeroRarelyFirst().appendSeconds().appendSuffix("" second"", "" seconds"")
				.toFormatter();

		System.out.println(hoursMinutesSeconds.print(new Period(0, 0, 0, 500)));
	}

}",True,"['PeriodFormatterBuilder', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime33 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix("" hour"", "" hours"")
				.appendSeparator("", "", "" and "").appendMinutes().appendSuffix("" minute"", "" minutes"")
				.appendSeparator("" and "").printZeroRarelyFirst().appendSeconds().appendSuffix("" second"", "" seconds"")
				.toFormatter()

		System.out.println(hoursMinutesSeconds.print(new Period(0, 0, 0, 500)));
	}

}",JodaTime33.java
"package joda_time;

import java.util.Locale;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;


public class JodaTime34 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Locale.setDefault(Locale.GERMAN);
		final PeriodFormatter periodFormatter = PeriodFormat.wordBased(Locale.ENGLISH);
		final Period period = new Period(6, 5, 4, 3);
		final String s = period.toString(periodFormatter);
		System.out.println(""s = "" + s);
	}

}",True,"['Locale', 'PeriodFormat', 'PeriodFormatter', 'Period']","['java.util.Locale', 'org.joda.time.format.PeriodFormat', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime34 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Locale.setDefault(Locale.GERMAN)
		final PeriodFormatter periodFormatter = PeriodFormat.wordBased(Locale.ENGLISH);
		final Period period = new Period(6, 5, 4, 3);
		final String s = period.toString(periodFormatter);
		System.out.println(""s = "" + s);
	}

}",JodaTime34.java
"package joda_time;

import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.format.PeriodFormatterBuilder;
import java.sql.Date;
import org.joda.time.format.PeriodFormatter;

public class JodaTime35 {

	// TODO Auto-generated method stub

	private final static PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears()
			.appendSuffix(""year"", ""years"").appendSeparator("" "").appendMonths().appendSuffix(""month"", ""months"")
			.appendSeparator("" "").appendDays().appendSuffix(""day"", ""days"").appendSeparator("" "").appendHours()
			.appendSuffix(""hour"", ""hours"").appendSeparator("" "").appendMinutes().appendSuffix(""minute"", ""minutes"")
			.appendSeparator("" "").appendSeconds().appendSuffix(""second"", ""seconds"").toFormatter();

	public static String format(Date start) {
		StringBuffer result = new StringBuffer();
		DURATION_FORMATTER.printTo(result, (ReadablePeriod) new Period(new DateTime(start), new DateTime()));
		return result.toString();
	}

	public static String format(Date start, Date end) {
		StringBuffer result = new StringBuffer();
		DURATION_FORMATTER.printTo(result,
				new Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));
		return result.toString();
	}

}",True,"['DateTime', 'Period', 'ReadablePeriod', 'PeriodFormatterBuilder', 'Date', 'PeriodFormatter']","['org.joda.time.DateTime', 'org.joda.time.Period', 'org.joda.time.ReadablePeriod', 'org.joda.time.format.PeriodFormatterBuilder', 'java.sql.Date', 'org.joda.time.format.PeriodFormatter']","public class JodaTime35 {

	// TODO Auto-generated method stub

	private final static PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears()
			.appendSuffix(""year"", ""years"").appendSeparator("" "").appendMonths().appendSuffix(""month"", ""months"")
			.appendSeparator("" "").appendDays().appendSuffix(""day"", ""days"").appendSeparator("" "").appendHours()
			.appendSuffix(""hour"", ""hours"").appendSeparator("" "").appendMinutes().appendSuffix(""minute"", ""minutes"")
			.appendSeparator("" "").appendSeconds().appendSuffix(""second"", ""seconds"").toFormatter();

	public static String format(Date start) {
		StringBuffer result = new StringBuffer();
		DURATION_FORMATTER.printTo(result, (ReadablePeriod) new Period(new DateTime(start), new DateTime()));
		return result.toString();
	}

	public static String format(Date start, Date end) {
		StringBuffer result = new StringBuffer()
		DURATION_FORMATTER.printTo(result,
				new Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));
		return result.toString();
	}

}",JodaTime35.java
"package joda_time;


import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;

public class JodaTime36 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter pf = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter();

		Period period = pf.parsePeriod(""PT01H00M"");
	}

}",True,"['PeriodFormatterBuilder', 'ISOPeriodFormat', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.ISOPeriodFormat', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime36 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter pf = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter();

		Period period = pf.parsePeriod(""PT01H00M"")
	}

}",JodaTime36.java
"package joda_time;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

import java.util.concurrent.TimeUnit;

public class JodaTime37 {

	public static void main(String[] args) {
		DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
		DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
		DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);
		System.out.println(getDaysBetween(start, end));
	}

	public static int getDaysBetween(DateTime earlier, DateTime later) {
		return (int) TimeUnit.MILLISECONDS.toDays(later.getMillis() - earlier.getMillis());
	}
}",True,"['DateTime', 'DateTimeZone', 'TimeUnit']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone', 'java.util.concurrent.TimeUnit']","public class JodaTime37 {

	public static void main(String[] args)
		DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
		DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
		DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);
		System.out.println(getDaysBetween(start, end));
	}

	public static int getDaysBetween(DateTime earlier, DateTime later) {
		return (int) TimeUnit.MILLISECONDS.toDays(later.getMillis() - earlier.getMillis());
	}
}",JodaTime37.java
"package joda_time;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime38 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String dateTime = ""11/15/2013 08:00:00"";

		DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");

		DateTime jodatime = dtf.parseDateTime(dateTime);

		DateTimeFormatter dtfOut = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		System.out.println(dtfOut.print(jodatime));
	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime38 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String dateTime = ""11/15/2013 08:00:00"";

		DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");

		DateTime jodatime = dtf.parseDateTime(dateTime);

		DateTimeFormatter dtfOut = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		System.out.println(dtfOut.print(jodatime)
	}

}",JodaTime38.java
"package joda_time;


import org.joda.time.DateTime;

public class JodaTime39 {

	public static void main(String[] args) {
		DateTime d1 = new DateTime();
		DateTime d2 = new DateTime();

		long diffInMillis = d2.getMillis() - d1.getMillis();
	}

}",True,['DateTime'],['org.joda.time.DateTime'],"public class JodaTime39 {

	public static void main(String[] args) {
		DateTime d1 = new DateTime();
		DateTime d2 = new DateTime();

		long diffInMillis = d2.getMillis() - d1.getMillis();


}",JodaTime39.java
"package joda_time;


import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime41 {

	public static void main(String[] args) {
		DateTime dt4 = new DateTime(""2017-01-01T10:52:07.656-10:00"");
		System.out.println(""Given Date:"" + dt4);
		DateTimeFormatter fmt = DateTimeFormat.forPattern(""MM/DD/YYYY"");
		System.out.println(""Given Date After Date format: "" + fmt.print(dt4));

		DateTime previousDay = dt4.minusDays(1);
		System.out.println(""Previous Day: "" + previousDay);
		System.out.println(""Previous Date After Date format: "" + fmt.print(previousDay));

	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime41 {

	public static void main(String[] args) {
		DateTime dt4 = new DateTime(""2017-01-01T10:52:07.656-10:00"");
		System.out.println(""Given Date:"" + dt4);
		DateTimeFormatter fmt = DateTimeFormat.forPattern(""MM/DD/YYYY"");
		System.out.println(""Given Date After Date format: "" + fmt.print(dt4));

		DateTime previousDay = dt4.minusDays(1)
		System.out.println(""Previous Day: "" + previousDay);
		System.out.println(""Previous Date After Date format: "" + fmt.print(previousDay));

	}

}",JodaTime41.java
"package joda_time;

import org.joda.time.LocalDate;

public class JodaTime42 {
	public static final int JANUARY = 1;

	public static final int DECEMBER = 12;

	public static final int FIRST_OF_THE_MONTH = 1;

	public final int getLastDayOfMonth(final int month, final int year) {
		int lastDay = 0;

		if ((month >= JANUARY) && (month <= DECEMBER)) {
			LocalDate aDate = new LocalDate(year, month, FIRST_OF_THE_MONTH);

			lastDay = aDate.dayOfMonth().getMaximumValue();
		}
		return lastDay;

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}",True,['LocalDate'],['org.joda.time.LocalDate'],"public class JodaTime42 {
	public static final int JANUARY = 1;

	public static final int DECEMBER = 12;

	public static final int FIRST_OF_THE_MONTH = 1;

	public final int getLastDayOfMonth(final int month, final int year) {
		int lastDay = 0

		if ((month >= JANUARY) && (month <= DECEMBER)) {
			LocalDate aDate = new LocalDate(year, month, FIRST_OF_THE_MONTH);

			lastDay = aDate.dayOfMonth().getMaximumValue();
		}
		return lastDay;

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}",JodaTime42.java
"package joda_time;


import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.DateTime;

public class JodaTime43 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DateTimeParser[] parsers = { DateTimeFormat.forPattern(""yyyy-MM-dd HH"").getParser(),
				DateTimeFormat.forPattern(""yyyy-MM-dd"").getParser() };
		DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();

		DateTime date1 = formatter.parseDateTime(""2010-01-01"");
		DateTime date2 = formatter.parseDateTime(""2010-01-01 01"");
	}

}",True,"['DateTimeFormat', 'DateTimeFormatterBuilder', 'DateTimeFormatter', 'DateTimeParser', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatterBuilder', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeParser', 'org.joda.time.DateTime']","public class JodaTime43 {

	public static void main(String[] args)
		// TODO Auto-generated method stub
		DateTimeParser[] parsers = { DateTimeFormat.forPattern(""yyyy-MM-dd HH"").getParser(),
				DateTimeFormat.forPattern(""yyyy-MM-dd"").getParser() };
		DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();

		DateTime date1 = formatter.parseDateTime(""2010-01-01"");
		DateTime date2 = formatter.parseDateTime(""2010-01-01 01"");
	}

}",JodaTime43.java
"package joda_time;

import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.Period;

public class JodaTime44 {

	public static void main(String[] args) {
		PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix("" day"", "" days"")
				.appendSeparator("" and "").appendMinutes().appendSuffix("" minute"", "" minutes"").appendSeparator("" and "")
				.appendSeconds().appendSuffix("" second"", "" seconds"").toFormatter();

		Period period = new Period(72, 24, 12, 0);

		System.out.println(daysHoursMinutes.print(period));
		System.out.println(daysHoursMinutes.print(period.normalizedStandard()));
	}

}",True,"['PeriodFormatterBuilder', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']","public class JodaTime44 {

	public static void main(String[] args) {
		PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix("" day"", "" days"")
				.appendSeparator("" and "").appendMinutes().appendSuffix("" minute"", "" minutes"").appendSeparator("" and "")
				.appendSeconds().appendSuffix("" second"", "" seconds"").toFormatter();

		Period period = new Period(72, 24, 12, 0)

		System.out.println(daysHoursMinutes.print(period));
		System.out.println(daysHoursMinutes.print(period.normalizedStandard()));
	}

}",JodaTime44.java
"package joda_time;


import org.joda.time.DateTimeZone;
import org.joda.time.DateTime;

public class JodaTime46 {

	public static void main(String[] args) {
		DateTimeZone date = null;
		// TODO Auto-generated method stub
		DateTime dateTime = new DateTime(date);
		dateTime = dateTime.plusDays(1);

	}

}",True,"['DateTimeZone', 'DateTime']","['org.joda.time.DateTimeZone', 'org.joda.time.DateTime']","public class JodaTime46 {

	public static void main(String[] args) {
		DateTimeZone date = null
		// TODO Auto-generated method stub
		DateTime dateTime = new DateTime(date);
		dateTime = dateTime.plusDays(1);

	}

}",JodaTime46.java
"package joda_time;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime47 {

	public static void main(String[] args) {
		final DateTimeFormatter df = DateTimeFormat.forPattern(""EEE MMM dd HH:mm:ss 'GMT'Z yyyy"");
		final DateTime dateTime = df.withOffsetParsed().parseDateTime(""Mon Aug 24 12:36:46 GMT+1000 2009"");
		System.out.println(""dateTime = "" + dateTime);
	}

}",True,"['DateTimeFormat', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime47 {

	public static void main(String[] args) {
		final DateTimeFormatter df = DateTimeFormat.forPattern(""EEE MMM dd HH:mm:ss 'GMT'Z yyyy"");
		final DateTime dateTime = df.withOffsetParsed().parseDateTime(""Mon Aug 24 12:36:46 GMT+1000 2009"");
		System.out.println(""dateTime = "" + dateTime)
	}

}",JodaTime47.java
"package joda_time;

import org.joda.time.DateTimeUtils.MillisProvider;
import org.joda.time.DateTime;

public class JodaTime48 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	private final MillisProvider millisProvider;
	private final DateTime someDate;

	public JodaTime48(MillisProvider millisProvider, DateTime someDate) {
		this.millisProvider = millisProvider;
		this.someDate = someDate;
	}

	public boolean isAvailable() {
		long now = millisProvider.getMillis();
		return (someDate.isBefore(now));
	}
}",True,"['MillisProvider', 'DateTime']","['org.joda.time.DateTimeUtils.MillisProvider', 'org.joda.time.DateTime']","public class JodaTime48 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	private final MillisProvider millisProvider;
	private final DateTime someDate;

	public JodaTime48(MillisProvider millisProvider, DateTime someDate) {
		this.millisProvider = millisProvider;
		this.someDate = someDate
	}

	public boolean isAvailable() {
		long now = millisProvider.getMillis();
		return (someDate.isBefore(now));
	}
}",JodaTime48.java
"package joda_time;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.DateTime;

public class JodaTime49 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DateTimeFormatter FORMATTER = DateTimeFormat.forPattern(""yyyy-MMM-dd"");
		DateTime dateTime = FORMATTER.parseDateTime(""2005-nov-12"");
		LocalDate localDate = dateTime.toLocalDate();
	}

}",True,"['DateTimeFormat', 'LocalDate', 'DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormat', 'org.joda.time.LocalDate', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']","public class JodaTime49 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DateTimeFormatter FORMATTER = DateTimeFormat.forPattern(""yyyy-MMM-dd"");
		DateTime dateTime = FORMATTER.parseDateTime(""2005-nov-12"");
		LocalDate localDate = dateTime.toLocalDate()
	}

}",JodaTime49.java
"package joda_time;

import org.joda.time.DateTime;

public class JodaTime50 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	public static int daysOfMonth(int year, int month) {
		DateTime dateTime = new DateTime(year, month, 14, 12, 0, 0, 000);
		return dateTime.dayOfMonth().getMaximumValue();
	}
}",True,['DateTime'],['org.joda.time.DateTime'],"public class JodaTime50 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	public static int daysOfMonth(int year, int month) {
		DateTime dateTime = new DateTime(year, month, 14, 12, 0, 0, 000);
		return dateTime.dayOfMonth().getMaximumValue()
	}
}",JodaTime50.java
"package xstream;
//ID = 6107965

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public class xstream_class_1 implements Converter {
	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {

		while (reader.hasMoreChildren()) {
			reader.moveDown();
			String a;
			if (reader.getNodeName().equals(""a"")) {
				a = reader.getValue();
			} else if (reader.getNodeName().equals(""b"")) {
				Object b = (Object) context.convertAnother(reader, Object.class);
			} else if (reader.getNodeName().equals(""c"")) {
				a = reader.getValue();
			}

		}
		return context;
	}

	@Override
	public boolean canConvert(Class arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void marshal(Object arg0, HierarchicalStreamWriter arg1, MarshallingContext arg2) {
		// TODO Auto-generated method stub

	}
}",True,"['Converter', 'UnmarshallingContext', 'HierarchicalStreamWriter', 'MarshallingContext', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public class xstream_class_1 implements Converter {
	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {

		while (reader.hasMoreChildren())
			reader.moveDown();
			String a;
			if (reader.getNodeName().equals(""a"")) {
				a = reader.getValue();
			} else if (reader.getNodeName().equals(""b"")) {
				Object b = (Object) context.convertAnother(reader, Object.class);
			} else if (reader.getNodeName().equals(""c"")) {
				a = reader.getValue();
			}

		}
		return context;
	}

	@Override
	public boolean canConvert(Class arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void marshal(Object arg0, HierarchicalStreamWriter arg1, MarshallingContext arg2) {
		// TODO Auto-generated method stub

	}
}",xstream_class_1.java
"package xstream;
//ID=2008043

import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
import com.thoughtworks.xstream.XStream;
import java.io.StringWriter;

public class xstream_class_10 {
	private String generateResponse(final XStream xStream) {
		StringWriter writer = new StringWriter();
		xStream.marshal(this, new PrettyPrintWriter(writer) {
			@Override
			public void addAttribute(final String key, final String value) {
				if (!key.equals(""class"")) {
					super.addAttribute(key, value);
				}
			}
		});
		return writer.toString();
	}
}",True,"['PrettyPrintWriter', 'XStream', 'StringWriter']","['com.thoughtworks.xstream.io.xml.PrettyPrintWriter', 'com.thoughtworks.xstream.XStream', 'java.io.StringWriter']","public class xstream_class_10 {
	private String generateResponse(final XStream xStream) {
		StringWriter writer = new StringWriter();
		xStream.marshal(this, new PrettyPrintWriter(writer) {
			@Override
			public void addAttribute(final String key, final String value) {
				if (!key.equals(""class"")) {
					super.addAttribute(key, value);

			}
		});
		return writer.toString();
	}
}",xstream_class_10.java
"package xstream;
//ID=1791178

import com.thoughtworks.xstream.XStream;
import java.util.ArrayList;
import java.util.List;

import com.thoughtworks.xstream.mapper.ClassAliasingMapper;
import com.thoughtworks.xstream.converters.collections.CollectionConverter;

public class xstream_class_11 {
	public List<String> tags = new ArrayList<String>();
	public List<String> notags = new ArrayList<String>();

	public xstream_class_11(String tag, String tag2) {
		tags.add(tag);
		tags.add(tag2);
		notags.add(tag);
		notags.add(tag2);
	}

	public static void main(String[] args) {
		xstream_class_11 test = new xstream_class_11(""foo"", ""bar"");
		XStream xstream = new XStream();

		ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
		mapper.addClassAlias(""tag"", String.class);
		xstream.registerLocalConverter(xstream_class_11.class, ""tags"", new CollectionConverter(mapper));

		System.out.println(xstream.toXML(test));
	}
}",True,"['XStream', 'ArrayList', 'List', 'ClassAliasingMapper', 'CollectionConverter']","['com.thoughtworks.xstream.XStream', 'java.util.ArrayList', 'java.util.List', 'com.thoughtworks.xstream.mapper.ClassAliasingMapper', 'com.thoughtworks.xstream.converters.collections.CollectionConverter']","public class xstream_class_11 {
	public List<String> tags = new ArrayList<String>();
	public List<String> notags = new ArrayList<String>();

	public xstream_class_11(String tag, String tag2) {
		tags.add(tag);
		tags.add(tag2);
		notags.add(tag);
		notags.add(tag2)
	}

	public static void main(String[] args) {
		xstream_class_11 test = new xstream_class_11(""foo"", ""bar"");
		XStream xstream = new XStream();

		ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
		mapper.addClassAlias(""tag"", String.class);
		xstream.registerLocalConverter(xstream_class_11.class, ""tags"", new CollectionConverter(mapper));

		System.out.println(xstream.toXML(test));
	}
}",xstream_class_11.java
"package xstream;
//ID = 1791178

import java.util.List;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public class xstream_class_12 {
	public class ListToStringXStreamConverter implements Converter {

		private String alias;

		public ListToStringXStreamConverter(String alias) {
			super();
			this.alias = alias;
		}

		@SuppressWarnings(""rawtypes"")
		@Override
		public boolean canConvert(Class type) {
			return true;
		}

		@Override
		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {

			@SuppressWarnings(""unchecked"")
			List<String> list = (List<String>) source;

			for (String string : list) {
				writer.startNode(alias);
				writer.setValue(string);
				writer.endNode();
			}

		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			throw new UnsupportedOperationException(
					""ListToStringXStreamConverter does not offer suport for unmarshal operation"");
		}

	}

}",True,"['List', 'Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['java.util.List', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public class xstream_class_12 {
	public class ListToStringXStreamConverter implements Converter {

		private String alias;

		public ListToStringXStreamConverter(String alias) {
			super()
			this.alias = alias;
		}

		@SuppressWarnings(""rawtypes"")
		@Override
		public boolean canConvert(Class type) {
			return true;
		}

		@Override
		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {

			@SuppressWarnings(""unchecked"")
			List<String> list = (List<String>) source;

			for (String string : list) {
				writer.startNode(alias);
				writer.setValue(string);
				writer.endNode();
			}

		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			throw new UnsupportedOperationException(
					""ListToStringXStreamConverter does not offer suport for unmarshal operation"");
		}

	}

}",xstream_class_12.java
"package xstream;
//ID=1372467

import com.thoughtworks.xstream.mapper.Mapper;
import com.thoughtworks.xstream.mapper.ClassAliasingMapper;

public class xstream_class_13 {
	public class MyClassAliasingMapper extends ClassAliasingMapper {

		public MyClassAliasingMapper(Mapper wrapped) {
			super(wrapped);
		}

		@Override
		public Class realClass(String elementName) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.realClass(elementName);
		}

		@Override
		public String serializedClass(Class type) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.serializedClass(type);
		}
	}
}",True,"['Mapper', 'ClassAliasingMapper']","['com.thoughtworks.xstream.mapper.Mapper', 'com.thoughtworks.xstream.mapper.ClassAliasingMapper']","public class xstream_class_13 {
	public class MyClassAliasingMapper extends ClassAliasingMapper {

		public MyClassAliasingMapper(Mapper wrapped) {
			super(wrapped)
		}

		@Override
		public Class realClass(String elementName) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.realClass(elementName);
		}

		@Override
		public String serializedClass(Class type) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.serializedClass(type);
		}
	}
}",xstream_class_13.java
"package xstream;
//ID = 5377380

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.mapper.MapperWrapper;

public class xstream_class_16 {
	public static void main(String arg[]) {
		XStream xstream = new XStream() {
			@Override
			protected MapperWrapper wrapMapper(MapperWrapper next) {
				return new MapperWrapper(next) {
					@Override
					public boolean shouldSerializeMember(Class definedIn, String fieldName) {
						if (definedIn == Object.class) {
							return false;
						}
						return super.shouldSerializeMember(definedIn, fieldName);
					}
				};
			}
		};
	}
}",True,"['XStream', 'MapperWrapper']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper']","public class xstream_class_16 {
	public static void main(String arg[]) {
		XStream xstream = new XStream()
			@Override
			protected MapperWrapper wrapMapper(MapperWrapper next) {
				return new MapperWrapper(next) {
					@Override
					public boolean shouldSerializeMember(Class definedIn, String fieldName) {
						if (definedIn == Object.class) {
							return false;
						}
						return super.shouldSerializeMember(definedIn, fieldName);
					}
				};
			}
		};
	}
}",xstream_class_16.java
"package xstream;
//ID=2045290

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public final class xstream_class_17 {
	public static void main(String[] args) {
		XStream xstream = new XStream();
		xstream.autodetectAnnotations(true);
		xstream.registerConverter(new PositionConverter());

		final Position position = new Position();
		position.setTitle(""The Title"");
		position.setStartDate(""The Start Date"");
		position.setEndDate(""The End Date"");

		final String xml = xstream.toXML(position);
		System.out.println(""Generated XML:"");
		System.out.println(xml);

		final Position genPosition = (Position) xstream.fromXML(xml);
		System.out.println(""Generated Position:"");
		System.out.println(""\tTitle: "" + genPosition.getTitle());
		System.out.println(""\tStart Date: "" + genPosition.getStartDate());
		System.out.println(""\tEnd Date: "" + genPosition.getEndDate());
	}

	@XStreamAlias(""Position"")
	private static class Position {
		public String getEndDate() {
			return endDate;
		}

		public void setEndDate(String endDate) {
			this.endDate = endDate;
		}

		public String getStartDate() {
			return startDate;
		}

		public void setStartDate(String startDate) {
			this.startDate = startDate;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		private String title;
		private String startDate;
		private String endDate;
	}

	private static class PositionConverter implements Converter {
		public boolean canConvert(Class clazz) {
			return Position.class == clazz;
		}

		public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
			Position position = (Position) value;
			writer.startNode(""PositionBorder"");

			writer.startNode(""Title"");
			writer.setValue(position.getTitle());
			writer.endNode();

			writer.startNode(""StartDate"");
			writer.setValue(position.getStartDate());
			writer.endNode();

			writer.startNode(""EndDate"");
			writer.setValue(position.getEndDate());
			writer.endNode();

			writer.endNode();
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			Position position = new Position();
			// move it to <PositionBorder> tag.
			reader.moveDown();
			// now move it to <Title> tag.
			reader.moveDown();
			String title = reader.getValue();
			position.setTitle(title);
			reader.moveUp(); // moves back to <PositionBorder>

			reader.moveDown(); // should move down to <StartDate> tag
			String startDate = reader.getValue();
			position.setStartDate(startDate);
			reader.moveUp(); // move back to <PositionBorder>

			reader.moveDown(); // should move down to <EndDate> tag
			String endDate = reader.getValue();
			position.setEndDate(endDate);
			reader.moveUp(); // move back to <PositionBorder>

			return position;
		}
	}
}",True,"['XStream', 'Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'XStreamAlias', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public final class xstream_class_17
	public static void main(String[] args) {
		XStream xstream = new XStream();
		xstream.autodetectAnnotations(true);
		xstream.registerConverter(new PositionConverter());

		final Position position = new Position();
		position.setTitle(""The Title"");
		position.setStartDate(""The Start Date"");
		position.setEndDate(""The End Date"");

		final String xml = xstream.toXML(position);
		System.out.println(""Generated XML:"");
		System.out.println(xml);

		final Position genPosition = (Position) xstream.fromXML(xml);
		System.out.println(""Generated Position:"");
		System.out.println(""\tTitle: "" + genPosition.getTitle());
		System.out.println(""\tStart Date: "" + genPosition.getStartDate());
		System.out.println(""\tEnd Date: "" + genPosition.getEndDate());
	}

	@XStreamAlias(""Position"")
	private static class Position {
		public String getEndDate() {
			return endDate;
		}

		public void setEndDate(String endDate) {
			this.endDate = endDate;
		}

		public String getStartDate() {
			return startDate;
		}

		public void setStartDate(String startDate) {
			this.startDate = startDate;
		}

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		private String title;
		private String startDate;
		private String endDate;
	}

	private static class PositionConverter implements Converter {
		public boolean canConvert(Class clazz) {
			return Position.class == clazz;
		}

		public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
			Position position = (Position) value;
			writer.startNode(""PositionBorder"");

			writer.startNode(""Title"");
			writer.setValue(position.getTitle());
			writer.endNode();

			writer.startNode(""StartDate"");
			writer.setValue(position.getStartDate());
			writer.endNode();

			writer.startNode(""EndDate"");
			writer.setValue(position.getEndDate());
			writer.endNode();

			writer.endNode();
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			Position position = new Position();
			// move it to <PositionBorder> tag.
			reader.moveDown();
			// now move it to <Title> tag.
			reader.moveDown();
			String title = reader.getValue();
			position.setTitle(title);
			reader.moveUp(); // moves back to <PositionBorder>

			reader.moveDown(); // should move down to <StartDate> tag
			String startDate = reader.getValue();
			position.setStartDate(startDate);
			reader.moveUp(); // move back to <PositionBorder>

			reader.moveDown(); // should move down to <EndDate> tag
			String endDate = reader.getValue();
			position.setEndDate(endDate);
			reader.moveUp(); // move back to <PositionBorder>

			return position;
		}
	}
}",xstream_class_17.java
"package xstream;
//11484532

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public class xstream_class_19 {
	public class CustomConverter implements Converter {

		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
			// TODO: Get annotation value from object 'source' with name of tag via Reflection.
			// Or add a method to the AnimalConfig interface giving you tag name to put to serialization output.
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			Class canConvert = null;
			// TODO: use reflection to create animal object based on what you xml tag you have at hahd.
			return context.convertAnother(context.currentObject(), canConvert);
		}

		public boolean canConvert(Class type) {
			return true;
		}
	}
}",True,"['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public class xstream_class_19
	public class CustomConverter implements Converter {

		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
			// TODO: Get annotation value from object 'source' with name of tag via Reflection.
			// Or add a method to the AnimalConfig interface giving you tag name to put to serialization output.
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			Class canConvert = null;
			// TODO: use reflection to create animal object based on what you xml tag you have at hahd.
			return context.convertAnother(context.currentObject(), canConvert);
		}

		public boolean canConvert(Class type) {
			return true;
		}
	}
}",xstream_class_19.java
"package xstream;

import com.thoughtworks.xstream.XStream;
import java.io.BufferedReader;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.FileReader;
import java.io.IOException;

//ID = 7491195
public class xstream_class_2 {
	public static void main(String arg[]) throws IOException {
		XStream xstream = new XStream(new DomDriver());
		FileReader fin = new FileReader(""path_to_file.xml"");
		BufferedReader br = new BufferedReader(fin);

		String str = null;
		while (br.ready()) {
			str += br.readLine() + ""\n"";
		}

	}
}",True,"['XStream', 'BufferedReader', 'DomDriver', 'FileReader', 'IOException']","['com.thoughtworks.xstream.XStream', 'java.io.BufferedReader', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.io.FileReader', 'java.io.IOException']","public class xstream_class_2 {
	public static void main(String arg[]) throws IOException {
		XStream xstream = new XStream(new DomDriver());
		FileReader fin = new FileReader(""path_to_file.xml"");
		BufferedReader br = new BufferedReader(fin);

		String str = null
		while (br.ready()) {
			str += br.readLine() + ""\n"";
		}

	}
}",xstream_class_2.java
"package xstream;
//ID = 3623546

import java.io.File;
import com.thoughtworks.xstream.XStream;
import java.nio.charset.Charset;
import java.io.Reader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class xstream_class_20 {
	@SuppressWarnings(""unchecked"")
	public static <A> A fromXML(Class c, File file) {
		// Don't ever try to use DomDriver. They are VERY slow.
		XStream xStream = new XStream();
		InputStream inputStream = null;
		Reader reader = null;

		try {
			inputStream = new java.io.FileInputStream(file);
			reader = new InputStreamReader(inputStream, Charset.forName(""UTF-8""));
			Object object = xStream.fromXML(reader);

			if (c.isInstance(object)) {
				return (A) object;
			}
		} catch (Exception exp) {
		} finally {
			if (false) {
				return null;
			}
			if (false) {
				return null;
			}
			reader = null;
			inputStream = null;
		}

		return null;
	}
}",True,"['File', 'XStream', 'Charset', 'Reader', 'InputStream', 'InputStreamReader']","['java.io.File', 'com.thoughtworks.xstream.XStream', 'java.nio.charset.Charset', 'java.io.Reader', 'java.io.InputStream', 'java.io.InputStreamReader']","public class xstream_class_20 {
	@SuppressWarnings(""unchecked"")
	public static <A> A fromXML(Class c, File file) {
		// Don't ever try to use DomDriver. They are VERY slow.
		XStream xStream = new XStream();
		InputStream inputStream = null;
		Reader reader = null

		try {
			inputStream = new java.io.FileInputStream(file);
			reader = new InputStreamReader(inputStream, Charset.forName(""UTF-8""));
			Object object = xStream.fromXML(reader);

			if (c.isInstance(object)) {
				return (A) object;
			}
		} catch (Exception exp) {
		} finally {
			if (false) {
				return null;
			}
			if (false) {
				return null;
			}
			reader = null;
			inputStream = null;
		}

		return null;
	}
}",xstream_class_20.java
"package xstream;
//ID=7608007

import java.util.Map;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.mapper.Mapper;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;

public class xstream_class_21 {
	static class MyConverter implements Converter {

		private final Map<String, String> attributes;

		private final Class<?> clazz;

		private final Mapper mapper;

		private final ReflectionProvider reflectionProvider;

		public MyConverter(Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz,
				Map<String, String> attributes) {
			super();
			this.mapper = mapper;
			this.reflectionProvider = reflectionProvider;
			this.attributes = attributes;
			this.clazz = clazz;
		}

		@Override
		public boolean canConvert(Class cls) {
			return cls == clazz;
		}

		@Override
		public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
			for (String key : attributes.keySet()) {
				writer.addAttribute(key, attributes.get(key));
			}

			Converter converter = new ReflectionConverter(mapper, reflectionProvider);
			Object p = null;
			context.convertAnother(p, converter);
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader arg0, UnmarshallingContext arg1) {
			// TODO Auto-generated method stub
			return null;
		}

	}
}",True,"['Map', 'Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'Mapper', 'ReflectionProvider', 'ReflectionConverter']","['java.util.Map', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'com.thoughtworks.xstream.mapper.Mapper', 'com.thoughtworks.xstream.converters.reflection.ReflectionProvider', 'com.thoughtworks.xstream.converters.reflection.ReflectionConverter']","public class xstream_class_21 {
	static class MyConverter implements Converter

		private final Map<String, String> attributes;

		private final Class<?> clazz;

		private final Mapper mapper;

		private final ReflectionProvider reflectionProvider;

		public MyConverter(Mapper mapper, ReflectionProvider reflectionProvider, Class<?> clazz,
				Map<String, String> attributes) {
			super();
			this.mapper = mapper;
			this.reflectionProvider = reflectionProvider;
			this.attributes = attributes;
			this.clazz = clazz;
		}

		@Override
		public boolean canConvert(Class cls) {
			return cls == clazz;
		}

		@Override
		public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
			for (String key : attributes.keySet()) {
				writer.addAttribute(key, attributes.get(key));
			}

			Converter converter = new ReflectionConverter(mapper, reflectionProvider);
			Object p = null;
			context.convertAnother(p, converter);
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader arg0, UnmarshallingContext arg1) {
			// TODO Auto-generated method stub
			return null;
		}

	}
}",xstream_class_21.java
"package xstream;
//2456470

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.XppDriver;
import com.thoughtworks.xstream.converters.javabean.JavaBeanConverter;
import com.thoughtworks.xstream.annotations.XStreamAlias;

public class xstream_class_23 {
	@XStreamAlias(""test"")
	public class TestObject {
		private String foo;

		public String getFoo() {
			//return foo; -- Adjusted for EDIT#2
			return foo.toLowerCase();
		}

		public void setFoo(String foo) {
			this.foo = foo;
		}
	}

	public void test() throws Exception {
		XStream x = new XStream(new XppDriver());
		x.autodetectAnnotations(true);
		x.processAnnotations(TestObject.class);

		x.registerConverter(new JavaBeanConverter(x.getMapper()));

		TestObject o = new TestObject();
		//o.setFoo(""bar""); -- Adjusted for EDIT#2
		o.setFoo(""BAR"");

		String xml = x.toXML(o);

		System.out.println(xml);

		/*
		  Expecting...
		    <test>
		      <foo>bar</foo>
		    </test>
		
		  But instead getting...
		    <test>
		      <foo/>
		    </test>         
		*/
	}
}",True,"['XStream', 'XppDriver', 'JavaBeanConverter', 'XStreamAlias']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.XppDriver', 'com.thoughtworks.xstream.converters.javabean.JavaBeanConverter', 'com.thoughtworks.xstream.annotations.XStreamAlias']","public class xstream_class_23 {
	@XStreamAlias(""test"")
	public class TestObject {
		private String foo;

		public String getFoo() {
			//return foo; -- Adjusted for EDIT#2
			return foo.toLowerCase()
		}

		public void setFoo(String foo) {
			this.foo = foo;
		}
	}

	public void test() throws Exception {
		XStream x = new XStream(new XppDriver());
		x.autodetectAnnotations(true);
		x.processAnnotations(TestObject.class);

		x.registerConverter(new JavaBeanConverter(x.getMapper()));

		TestObject o = new TestObject();
		//o.setFoo(""bar""); -- Adjusted for EDIT#2
		o.setFoo(""BAR"");

		String xml = x.toXML(o);

		System.out.println(xml);

		/*
		  Expecting...
		    <test>
		      <foo>bar</foo>
		    </test>
		
		  But instead getting...
		    <test>
		      <foo/>
		    </test>         
		*/
	}
}",xstream_class_23.java
"package xstream;
//ID=2456909

import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.mapper.Mapper;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import com.thoughtworks.xstream.converters.reflection.ReflectionConverter;

public class xstream_class_24 {
	public class DetailDollarsConverter extends ReflectionConverter {

		public DetailDollarsConverter(Mapper mapper, ReflectionProvider reflectionProvider) {
			super(mapper, reflectionProvider);
		}

		@Override
		public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) {
			super.marshal(obj, writer, context);

			writer.startNode(""node4"");
			writer.setValue(Double.toString(20));
			writer.endNode();
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			return super.unmarshal(reader, context);
		}

		@SuppressWarnings(""unchecked"")
		@Override
		public boolean canConvert(Class clazz) {
			Object o = null;
			return clazz.equals(o);
		}
	}
}",True,"['HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'Mapper', 'ReflectionProvider', 'ReflectionConverter']","['com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'com.thoughtworks.xstream.mapper.Mapper', 'com.thoughtworks.xstream.converters.reflection.ReflectionProvider', 'com.thoughtworks.xstream.converters.reflection.ReflectionConverter']","public class xstream_class_24 {
	public class DetailDollarsConverter extends ReflectionConverter {

		public DetailDollarsConverter(Mapper mapper, ReflectionProvider reflectionProvider) {
			super(mapper, reflectionProvider)
		}

		@Override
		public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) {
			super.marshal(obj, writer, context);

			writer.startNode(""node4"");
			writer.setValue(Double.toString(20));
			writer.endNode();
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			return super.unmarshal(reader, context);
		}

		@SuppressWarnings(""unchecked"")
		@Override
		public boolean canConvert(Class clazz) {
			Object o = null;
			return clazz.equals(o);
		}
	}
}",xstream_class_24.java
"package xstream;
//ID=17871210

import com.thoughtworks.xstream.converters.SingleValueConverter;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

public class xstream_class_26 {
	public class IntegerListConverter implements SingleValueConverter {
		@Override
		public boolean canConvert(Class clazz) {
			return List.class.isAssignableFrom(clazz);
		}

		@Override
		public Object fromString(String arg0) {
			Collection<Integer> collection = new ArrayList<Integer>();
			String[] integerStrings = arg0.split("" "");
			for (int i = 0; i < integerStrings.length; i++) {
				collection.add(Integer.valueOf(integerStrings[i]));
			}
			return collection;
		}

		@Override
		public String toString(Object arg0) {
			List collection = (List) arg0;
			StringBuffer sb = new StringBuffer();
			boolean first = true;
			for (Object object : collection) {
				if (first) {
					first = false;
				} else {
					sb.append(' ');
				}
				sb.append(object.toString());
			}
			return sb.toString();
		}
	}
}",True,"['SingleValueConverter', 'Collection', 'List', 'ArrayList']","['com.thoughtworks.xstream.converters.SingleValueConverter', 'java.util.Collection', 'java.util.List', 'java.util.ArrayList']","public class xstream_class_26 {
	public class IntegerListConverter implements SingleValueConverter {
		@Override
		public boolean canConvert(Class clazz)
			return List.class.isAssignableFrom(clazz);
		}

		@Override
		public Object fromString(String arg0) {
			Collection<Integer> collection = new ArrayList<Integer>();
			String[] integerStrings = arg0.split("" "");
			for (int i = 0; i < integerStrings.length; i++) {
				collection.add(Integer.valueOf(integerStrings[i]));
			}
			return collection;
		}

		@Override
		public String toString(Object arg0) {
			List collection = (List) arg0;
			StringBuffer sb = new StringBuffer();
			boolean first = true;
			for (Object object : collection) {
				if (first) {
					first = false;
				} else {
					sb.append(' ');
				}
				sb.append(object.toString());
			}
			return sb.toString();
		}
	}
}",xstream_class_26.java
"package xstream;
//Id=6825271

import javax.swing.text.AbstractDocument.Content;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import org.apache.commons.lang.WordUtils;

public class xstream_class_27 {
	private class ObjectContentConverter implements Converter {
		XStream xStream;

		private ObjectContentConverter(XStream xStream) {
			this.xStream = xStream;
		}

		@Override
		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
			String className = WordUtils.uncapitalize(source.getClass().getSimpleName());
			xStream.aliasField(className, Content.class, ""objectContent"");
			xStream.marshal(source, writer);
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			return null; //To change body of implemented methods use File | Settings | File Templates.
		}

		@Override
		public boolean canConvert(Class type) {
			return true; //To change body of implemented methods use File | Settings | File Templates.
		}
	}
}",True,"['Content', 'XStream', 'Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'WordUtils']","['javax.swing.text.AbstractDocument.Content', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'org.apache.commons.lang.WordUtils']","public class xstream_class_27 {
	private class ObjectContentConverter implements Converter {
		XStream xStream;

		private ObjectContentConverter(XStream xStream) {
			this.xStream = xStream
		}

		@Override
		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
			String className = WordUtils.uncapitalize(source.getClass().getSimpleName());
			xStream.aliasField(className, Content.class, ""objectContent"");
			xStream.marshal(source, writer);
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			return null; //To change body of implemented methods use File | Settings | File Templates.
		}

		@Override
		public boolean canConvert(Class type) {
			return true; //To change body of implemented methods use File | Settings | File Templates.
		}
	}
}",xstream_class_27.java
"package xstream;
//Id=14440011

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.util.ArrayList;
import java.util.List;

public class xstream_class_29 {
	private static void createXmlEmail() {
		XStream xstream = new XStream(new DomDriver());
		xstream.setMode(XStream.NO_REFERENCES);
		xstream.alias(""email"", EmailPojo.class);
		xstream.alias(""recipient"", Recipient.class);

		EmailPojo ep = new EmailPojo();

		List<Recipient> toRecipient = new ArrayList<Recipient>();
		toRecipient.add(new Recipient(""user1@somecompany.com""));
		toRecipient.add(new Recipient(""user2@somecompany.com""));

		List<Recipient> ccRecipient = new ArrayList<Recipient>();
		ccRecipient.add(new Recipient(""user3@somecompany.com""));
		ccRecipient.add(new Recipient(""user4@somecompany.com""));

		List<Recipient> bccRecipient = new ArrayList<Recipient>();
		bccRecipient.add(new Recipient(""user5@somecompany.com""));
		bccRecipient.add(new Recipient(""user6@somecompany.com""));

		ep.setTo(toRecipient);
		ep.setCc(ccRecipient);
		ep.setBcc(bccRecipient);
		ep.setSubject(""subject test"");
		ep.setBody(""body test"");

		String xml = xstream.toXML(ep);
		System.out.println(xml);
	}

	public static class EmailPojo {
		private List<Recipient> to;
		private List<Recipient> cc;
		private List<Recipient> bcc;
		private String subject;
		private String body;

		public List<Recipient> getTo() {
			return to;
		}

		public void setTo(List<Recipient> to) {
			this.to = to;
		}

		public List<Recipient> getCc() {
			return cc;
		}

		public void setCc(List<Recipient> cc) {
			this.cc = cc;
		}

		public List<Recipient> getBcc() {
			return bcc;
		}

		public void setBcc(List<Recipient> bcc) {
			this.bcc = bcc;
		}

		public String getSubject() {
			return subject;
		}

		public void setSubject(String subject) {
			this.subject = subject;
		}

		public String getBody() {
			return body;
		}

		public void setBody(String body) {
			this.body = body;
		}
	}

	public static class Recipient {
		private String recipient;

		public Recipient(String recipient) {
			this.recipient = recipient;
		}

		public String getRecipient() {
			return recipient;
		}

		public void setRecipient(String recipient) {
			this.recipient = recipient;
		}
	}
}",True,"['XStream', 'DomDriver', 'ArrayList', 'List']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.util.ArrayList', 'java.util.List']","public class xstream_class_29 {
	private static void createXmlEmail() {
		XStream xstream = new XStream(new DomDriver());
		xstream.setMode(XStream.NO_REFERENCES);
		xstream.alias(""email"", EmailPojo.class);
		xstream.alias(""recipient"", Recipient.class);

		EmailPojo ep = new EmailPojo()

		List<Recipient> toRecipient = new ArrayList<Recipient>();
		toRecipient.add(new Recipient(""user1@somecompany.com""));
		toRecipient.add(new Recipient(""user2@somecompany.com""));

		List<Recipient> ccRecipient = new ArrayList<Recipient>();
		ccRecipient.add(new Recipient(""user3@somecompany.com""));
		ccRecipient.add(new Recipient(""user4@somecompany.com""));

		List<Recipient> bccRecipient = new ArrayList<Recipient>();
		bccRecipient.add(new Recipient(""user5@somecompany.com""));
		bccRecipient.add(new Recipient(""user6@somecompany.com""));

		ep.setTo(toRecipient);
		ep.setCc(ccRecipient);
		ep.setBcc(bccRecipient);
		ep.setSubject(""subject test"");
		ep.setBody(""body test"");

		String xml = xstream.toXML(ep);
		System.out.println(xml);
	}

	public static class EmailPojo {
		private List<Recipient> to;
		private List<Recipient> cc;
		private List<Recipient> bcc;
		private String subject;
		private String body;

		public List<Recipient> getTo() {
			return to;
		}

		public void setTo(List<Recipient> to) {
			this.to = to;
		}

		public List<Recipient> getCc() {
			return cc;
		}

		public void setCc(List<Recipient> cc) {
			this.cc = cc;
		}

		public List<Recipient> getBcc() {
			return bcc;
		}

		public void setBcc(List<Recipient> bcc) {
			this.bcc = bcc;
		}

		public String getSubject() {
			return subject;
		}

		public void setSubject(String subject) {
			this.subject = subject;
		}

		public String getBody() {
			return body;
		}

		public void setBody(String body) {
			this.body = body;
		}
	}

	public static class Recipient {
		private String recipient;

		public Recipient(String recipient) {
			this.recipient = recipient;
		}

		public String getRecipient() {
			return recipient;
		}

		public void setRecipient(String recipient) {
			this.recipient = recipient;
		}
	}
}",xstream_class_29.java
"package xstream;
//ID = 34206426

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public class xstream_class_30 implements Converter {

	@Override
	public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter,
			MarshallingContext marshallingContext) {
		// implement logic for marshalling to xml
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader,
			UnmarshallingContext unmarshallingContext) {
		Items items = new Items();
		while (hierarchicalStreamReader.hasMoreChildren()) {
			hierarchicalStreamReader.moveDown();
			final String currentAttribute = hierarchicalStreamReader.getAttribute(""name"");
			if (""id"".equals(currentAttribute)) {
				items.setId(hierarchicalStreamReader.getValue());
			} else if (""first-name"".equals(currentAttribute)) {
				items.setFirstName(hierarchicalStreamReader.getValue());
			} else if (""last-name"".equals(currentAttribute)) {
				items.setLastName(hierarchicalStreamReader.getValue());
			} else if (""address"".equals(currentAttribute)) {
				items.setAddress(hierarchicalStreamReader.getValue());
			} else if (""zip"".equals(currentAttribute)) {
				items.setZip(hierarchicalStreamReader.getValue());
			}
			hierarchicalStreamReader.moveUp();
		}
		return items;
	}

	@Override
	public boolean canConvert(Class aClass) {
		return aClass == Items.class;
	}

	public class Items {
		private String id;
		private String firstName;
		private String lastName;
		private String address;
		private String zip;

		public void setId(String id) {
			this.id = id;
		}

		public void setFirstName(String firstName) {
			this.firstName = firstName;
		}

		public void setLastName(String lastName) {
			this.lastName = lastName;
		}

		public void setAddress(String address) {
			this.address = address;
		}

		public void setZip(String zip) {
			this.zip = zip;
		}
	}
}",True,"['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public class xstream_class_30 implements Converter {

	@Override
	public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter,
			MarshallingContext marshallingContext)
		// implement logic for marshalling to xml
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader,
			UnmarshallingContext unmarshallingContext) {
		Items items = new Items();
		while (hierarchicalStreamReader.hasMoreChildren()) {
			hierarchicalStreamReader.moveDown();
			final String currentAttribute = hierarchicalStreamReader.getAttribute(""name"");
			if (""id"".equals(currentAttribute)) {
				items.setId(hierarchicalStreamReader.getValue());
			} else if (""first-name"".equals(currentAttribute)) {
				items.setFirstName(hierarchicalStreamReader.getValue());
			} else if (""last-name"".equals(currentAttribute)) {
				items.setLastName(hierarchicalStreamReader.getValue());
			} else if (""address"".equals(currentAttribute)) {
				items.setAddress(hierarchicalStreamReader.getValue());
			} else if (""zip"".equals(currentAttribute)) {
				items.setZip(hierarchicalStreamReader.getValue());
			}
			hierarchicalStreamReader.moveUp();
		}
		return items;
	}

	@Override
	public boolean canConvert(Class aClass) {
		return aClass == Items.class;
	}

	public class Items {
		private String id;
		private String firstName;
		private String lastName;
		private String address;
		private String zip;

		public void setId(String id) {
			this.id = id;
		}

		public void setFirstName(String firstName) {
			this.firstName = firstName;
		}

		public void setLastName(String lastName) {
			this.lastName = lastName;
		}

		public void setAddress(String address) {
			this.address = address;
		}

		public void setZip(String zip) {
			this.zip = zip;
		}
	}
}",xstream_class_30.java
"package xstream;
//http://www.studytrails.com/java/xml/xstream/xstream-xml-to-java/

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;

public class xstream_class_31 {
	static String xml1 = ""<Music><type>rock</type></Music>"";

	public static void main(String[] args) {
		XStream xStream = new XStream();
		xStream.processAnnotations(Music.class);
		Music musicObject = (Music) xStream.fromXML(xml1);
		System.out.println(musicObject);
		// prints Music [type=ROCK]
	}

}

@XStreamAlias(""Music"")
class Music {
	public enum genre {
						ROCK,
						JAZZ
	};

	genre type;

	@Override
	public String toString() {
		return ""Music [type="" + type + ""]"";
	}

}",True,"['XStream', 'XStreamAlias']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.annotations.XStreamAlias']","public class xstream_class_31 {
	static String xml1 = ""<Music><type>rock</type></Music>"";

	public static void main(String[] args) {
		XStream xStream = new XStream()
		xStream.processAnnotations(Music.class);
		Music musicObject = (Music) xStream.fromXML(xml1);
		System.out.println(musicObject);
		// prints Music [type=ROCK]
	}

}

@XStreamAlias(""Music"")
class Music {
	public enum genre {
						ROCK,
						JAZZ
	};

	genre type;

	@Override
	public String toString() {
		return ""Music [type="" + type + ""]"";
	}

}",xstream_class_31.java
"package xstream;
//http://www.programcreek.com/java-api-examples/index.php?api=com.thoughtworks.xstream.XStream

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.mapper.MapperWrapper;
import com.thoughtworks.xstream.hibernate.mapper.HibernateMapper;
import com.thoughtworks.xstream.hibernate.converter.HibernatePersistentMapConverter;
import com.thoughtworks.xstream.hibernate.converter.HibernatePersistentCollectionConverter;
import com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedSetConverter;
import com.thoughtworks.xstream.hibernate.converter.HibernateProxyConverter;
import com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedMapConverter;

public class xstream_class_32 {
	public static XStream instanciateXstreamForHibernate() {
		XStream xstream1 = new XStream() {
			protected MapperWrapper wrapMapper(final MapperWrapper next) {
				return new HibernateMapper(next);
			}
		};
		xstream1.registerConverter(new HibernateProxyConverter());
		xstream1.registerConverter(new HibernatePersistentCollectionConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedSetConverter(xstream1.getMapper()));
		return xstream1;
	}

}",True,"['XStream', 'MapperWrapper', 'HibernateMapper', 'HibernatePersistentMapConverter', 'HibernatePersistentCollectionConverter', 'HibernatePersistentSortedSetConverter', 'HibernateProxyConverter', 'HibernatePersistentSortedMapConverter']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'com.thoughtworks.xstream.hibernate.mapper.HibernateMapper', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentMapConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentCollectionConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedSetConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernateProxyConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedMapConverter']","public class xstream_class_32 {
	public static XStream instanciateXstreamForHibernate() {
		XStream xstream1 = new XStream() {
			protected MapperWrapper wrapMapper(final MapperWrapper next) {
				return new HibernateMapper(next);

		};
		xstream1.registerConverter(new HibernateProxyConverter());
		xstream1.registerConverter(new HibernatePersistentCollectionConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedSetConverter(xstream1.getMapper()));
		return xstream1;
	}

}",xstream_class_32.java
"package xstream;
//http://www.programcreek.com/java-api-examples/index.php?api=com.thoughtworks.xstream.XStream

import flex.messaging.messages.RemotingMessage;
import flex.messaging.io.amf.ActionMessage;
import com.thoughtworks.xstream.XStream;
import flex.messaging.messages.CommandMessageExt;
import flex.messaging.messages.AcknowledgeMessage;
import flex.messaging.io.amf.ASObject;
import com.thoughtworks.xstream.mapper.Mapper;
import flex.messaging.messages.AsyncMessage;
import flex.messaging.io.amf.MessageHeader;
import flex.messaging.messages.CommandMessage;
import flex.messaging.messages.ErrorMessage;
import com.thoughtworks.xstream.io.xml.DomDriver;
import flex.messaging.io.amf.MessageBody;
import flex.messaging.messages.AcknowledgeMessageExt;

public class xstream_class_33 {
	private static XStream xstream;

	public static XStream getXStream() {
		if (xstream == null) {
			xstream = new XStream(new DomDriver());

			xstream.alias(""ActionMessage"", ActionMessage.class);
			xstream.alias(""MessageHeader"", MessageHeader.class);
			xstream.alias(""MessageBody"", MessageBody.class);
			xstream.alias(""RemotingMessage"", RemotingMessage.class);
			xstream.alias(""CommandMessage"", CommandMessage.class);
			xstream.alias(""AcknowledgeMessage"", AcknowledgeMessage.class);
			xstream.alias(""ErrorMessage"", ErrorMessage.class);
			xstream.alias(""ASObject"", ASObject.class);
			xstream.alias(""AsyncMessage"", AsyncMessage.class);
			xstream.alias(""DSC"", CommandMessageExt.class);
			xstream.alias(""DSK"", AcknowledgeMessageExt.class);

			// Better ASObject Converter
			Mapper mapper = xstream.getMapper();
		}

		return xstream;
	}
}",True,"['RemotingMessage', 'ActionMessage', 'XStream', 'CommandMessageExt', 'AcknowledgeMessage', 'ASObject', 'Mapper', 'AsyncMessage', 'MessageHeader', 'CommandMessage', 'ErrorMessage', 'DomDriver', 'MessageBody', 'AcknowledgeMessageExt']","['flex.messaging.messages.RemotingMessage', 'flex.messaging.io.amf.ActionMessage', 'com.thoughtworks.xstream.XStream', 'flex.messaging.messages.CommandMessageExt', 'flex.messaging.messages.AcknowledgeMessage', 'flex.messaging.io.amf.ASObject', 'com.thoughtworks.xstream.mapper.Mapper', 'flex.messaging.messages.AsyncMessage', 'flex.messaging.io.amf.MessageHeader', 'flex.messaging.messages.CommandMessage', 'flex.messaging.messages.ErrorMessage', 'com.thoughtworks.xstream.io.xml.DomDriver', 'flex.messaging.io.amf.MessageBody', 'flex.messaging.messages.AcknowledgeMessageExt']","public class xstream_class_33 {
	private static XStream xstream;

	public static XStream getXStream() {
		if (xstream == null)
			xstream = new XStream(new DomDriver());

			xstream.alias(""ActionMessage"", ActionMessage.class);
			xstream.alias(""MessageHeader"", MessageHeader.class);
			xstream.alias(""MessageBody"", MessageBody.class);
			xstream.alias(""RemotingMessage"", RemotingMessage.class);
			xstream.alias(""CommandMessage"", CommandMessage.class);
			xstream.alias(""AcknowledgeMessage"", AcknowledgeMessage.class);
			xstream.alias(""ErrorMessage"", ErrorMessage.class);
			xstream.alias(""ASObject"", ASObject.class);
			xstream.alias(""AsyncMessage"", AsyncMessage.class);
			xstream.alias(""DSC"", CommandMessageExt.class);
			xstream.alias(""DSK"", AcknowledgeMessageExt.class);

			// Better ASObject Converter
			Mapper mapper = xstream.getMapper();
		}

		return xstream;
	}
}",xstream_class_33.java
"package xstream;
//http://www.programcreek.com/java-api-examples/index.php?source_dir=cloudbees-api-client-master/cloudbees-api-client/src/main/java/com/cloudbees/api/config/ConfigParameters.java

import com.cloudbees.api.config.ParameterHolder;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.mapper.MapperWrapper;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import java.util.Iterator;
import com.cloudbees.api.config.ResourceSettings;
import com.cloudbees.api.config.Environment;
import java.util.ArrayList;

public class xstream_class_34 {
	@XStreamAlias(""config"")
	public class ConfigParameters extends ParameterHolder {
		@XStreamImplicit(itemFieldName = ""resource"")
		private List<ResourceSettings> resources;

		@XStreamImplicit(itemFieldName = ""env"")
		private List<Environment> environments;

		public ConfigParameters() {
		}

		public List<Environment> getEnvironments() {
			if (environments == null)
				environments = new ArrayList<Environment>();
			return environments;
		}

		public void setEnvironments(List<Environment> environments) {
			this.environments = environments;
		}

		public void setEnvironment(Environment environment) {
			deleteEnvironment(environment.getName());
			getEnvironments().add(environment);
		}

		public Environment getEnvironment(String env) {
			for (Environment environment : getEnvironments()) {
				if (env.equals(environment.getName()))
					return environment;
			}
			return null;
		}

		public void deleteEnvironment(String name) {
			Iterator<Environment> it = getEnvironments().iterator();
			while (it.hasNext()) {
				if (it.next().getName().equals(name)) {
					it.remove();
				}
			}
		}

		public List<ResourceSettings> getResources() {
			if (resources == null)
				resources = new ArrayList<ResourceSettings>();
			return resources;
		}

		public void setResources(List<ResourceSettings> resources) {
			this.resources = resources;
		}

		public void setResource(ResourceSettings resource) {
			deleteResource(resource.getName());
			getResources().add(resource);
		}

		public ResourceSettings getResource(String name) {
			for (ResourceSettings resource : getResources()) {
				if (resource.getName().equals(name))
					return resource;
			}
			return null;
		}

		public void deleteResource(String name) {
			Iterator<ResourceSettings> it = getResources().iterator();
			while (it.hasNext()) {
				if (it.next().getName().equals(name)) {
					it.remove();
				}
			}
		}

		private XStream createXStream() {
			XStream xstream = new XStream() {
				protected MapperWrapper wrapMapper(MapperWrapper next) {
					return new MapperWrapper(next) {
						public boolean shouldSerializeMember(Class definedIn, String fieldName) {
							return definedIn != Object.class && super.shouldSerializeMember(definedIn, fieldName);
						}

					};
				}
			};

			xstream.setClassLoader(ConfigParameters.class.getClassLoader());
			xstream.processAnnotations(ResourceSettings.class);
			xstream.processAnnotations(Environment.class);
			xstream.processAnnotations(ConfigParameters.class);
			xstream.processAnnotations(ParameterHolder.class);
			return xstream;
		}

		/**
		 * Returns a string representation of XML. 
		 */
		public String toXML() {
			return createXStream().toXML(this);
		}

		public ConfigParameters parse(String xml) {
			if (xml == null)
				return new ConfigParameters();
			return (ConfigParameters) createXStream().fromXML(xml);
		}
	}
}",True,"['ParameterHolder', 'XStreamImplicit', 'List', 'XStream', 'MapperWrapper', 'XStreamAlias', 'Iterator', 'ResourceSettings', 'Environment', 'ArrayList']","['com.cloudbees.api.config.ParameterHolder', 'com.thoughtworks.xstream.annotations.XStreamImplicit', 'java.util.List', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'java.util.Iterator', 'com.cloudbees.api.config.ResourceSettings', 'com.cloudbees.api.config.Environment', 'java.util.ArrayList']","public class xstream_class_34 {
	@XStreamAlias(""config"")
	public class ConfigParameters extends ParameterHolder {
		@XStreamImplicit(itemFieldName = ""resource"")
		private List<ResourceSettings> resources;

		@XStreamImplicit(itemFieldName = ""env"")
		private List<Environment> environments

		public ConfigParameters() {
		}

		public List<Environment> getEnvironments() {
			if (environments == null)
				environments = new ArrayList<Environment>();
			return environments;
		}

		public void setEnvironments(List<Environment> environments) {
			this.environments = environments;
		}

		public void setEnvironment(Environment environment) {
			deleteEnvironment(environment.getName());
			getEnvironments().add(environment);
		}

		public Environment getEnvironment(String env) {
			for (Environment environment : getEnvironments()) {
				if (env.equals(environment.getName()))
					return environment;
			}
			return null;
		}

		public void deleteEnvironment(String name) {
			Iterator<Environment> it = getEnvironments().iterator();
			while (it.hasNext()) {
				if (it.next().getName().equals(name)) {
					it.remove();
				}
			}
		}

		public List<ResourceSettings> getResources() {
			if (resources == null)
				resources = new ArrayList<ResourceSettings>();
			return resources;
		}

		public void setResources(List<ResourceSettings> resources) {
			this.resources = resources;
		}

		public void setResource(ResourceSettings resource) {
			deleteResource(resource.getName());
			getResources().add(resource);
		}

		public ResourceSettings getResource(String name) {
			for (ResourceSettings resource : getResources()) {
				if (resource.getName().equals(name))
					return resource;
			}
			return null;
		}

		public void deleteResource(String name) {
			Iterator<ResourceSettings> it = getResources().iterator();
			while (it.hasNext()) {
				if (it.next().getName().equals(name)) {
					it.remove();
				}
			}
		}

		private XStream createXStream() {
			XStream xstream = new XStream() {
				protected MapperWrapper wrapMapper(MapperWrapper next) {
					return new MapperWrapper(next) {
						public boolean shouldSerializeMember(Class definedIn, String fieldName) {
							return definedIn != Object.class && super.shouldSerializeMember(definedIn, fieldName);
						}

					};
				}
			};

			xstream.setClassLoader(ConfigParameters.class.getClassLoader());
			xstream.processAnnotations(ResourceSettings.class);
			xstream.processAnnotations(Environment.class);
			xstream.processAnnotations(ConfigParameters.class);
			xstream.processAnnotations(ParameterHolder.class);
			return xstream;
		}

		/**
		 * Returns a string representation of XML. 
		 */
		public String toXML() {
			return createXStream().toXML(this);
		}

		public ConfigParameters parse(String xml) {
			if (xml == null)
				return new ConfigParameters();
			return (ConfigParameters) createXStream().fromXML(xml);
		}
	}
}",xstream_class_34.java
"package xstream;
//http://www.programcreek.com/java-api-examples/index.php?source_dir=sandboxes-master/sandbox-xstream/src/test/java/tryanderror/xstream/EntsoeStyleConverter_Test.java

import com.thoughtworks.xstream.converters.SingleValueConverter;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.mapper.MapperWrapper;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.ConverterLookup;
import com.thoughtworks.xstream.mapper.Mapper;
import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
import org.junit.Test;

public class xstream_class_35 {

	public static class AClass {
		public String value = ""This should be in an attribute"";
		public CompositeClass anotherValue = new CompositeClass();
	}

	public static class CompositeClass {
		public Integer value = 42;
	}

	public static class ToSingleValue implements SingleValueConverter {

		@Override
		public boolean canConvert(Class type) {
			return CompositeClass.class == type;
		}

		@Override
		public String toString(Object obj) {
			CompositeClass cCompositeClass = (CompositeClass) obj;
			return cCompositeClass.value.toString();
		}

		@Override
		public Object fromString(String str) {
			return new CompositeClass();
		}

	}

	@Test
	public void testName() throws Exception {
		XStream xStream = new XStream();
		xStream.registerConverter(new ToSingleValue());

		Mapper mapper = xStream.getMapper();
		ReflectionProvider reflectionProvider = xStream.getReflectionProvider();
		ConverterLookup converterLookup = xStream.getConverterLookup();
		String valueField = null;
		Converter converter = null;
		xStream.registerConverter(converter);
		System.out.println(xStream.toXML(new AClass()));
	}

	protected MapperWrapper wrapMapper(MapperWrapper next) {
		return next;
	}
}",True,"['SingleValueConverter', 'XStream', 'MapperWrapper', 'Converter', 'ConverterLookup', 'Mapper', 'ReflectionProvider', 'Test']","['com.thoughtworks.xstream.converters.SingleValueConverter', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.converters.ConverterLookup', 'com.thoughtworks.xstream.mapper.Mapper', 'com.thoughtworks.xstream.converters.reflection.ReflectionProvider', 'org.junit.Test']","public class xstream_class_35 {

	public static class AClass {
		public String value = ""This should be in an attribute"";
		public CompositeClass anotherValue = new CompositeClass();
	}

	public static class CompositeClass {
		public Integer value = 42
	}

	public static class ToSingleValue implements SingleValueConverter {

		@Override
		public boolean canConvert(Class type) {
			return CompositeClass.class == type;
		}

		@Override
		public String toString(Object obj) {
			CompositeClass cCompositeClass = (CompositeClass) obj;
			return cCompositeClass.value.toString();
		}

		@Override
		public Object fromString(String str) {
			return new CompositeClass();
		}

	}

	@Test
	public void testName() throws Exception {
		XStream xStream = new XStream();
		xStream.registerConverter(new ToSingleValue());

		Mapper mapper = xStream.getMapper();
		ReflectionProvider reflectionProvider = xStream.getReflectionProvider();
		ConverterLookup converterLookup = xStream.getConverterLookup();
		String valueField = null;
		Converter converter = null;
		xStream.registerConverter(converter);
		System.out.println(xStream.toXML(new AClass()));
	}

	protected MapperWrapper wrapMapper(MapperWrapper next) {
		return next;
	}
}",xstream_class_35.java
"package xstream;
//29466312

import java.util.Map;
import com.thoughtworks.xstream.XStream;
import java.util.HashMap;
import com.thoughtworks.xstream.io.xml.StaxDriver;

public class xstream_class_36 {
	public class MapTest {
		private Map<String, String> mapList;

		public MapTest() {

			mapList = new HashMap<String, String>();
		}

		public void setServicesHealth(String id, String name) {
			mapList.put(id, name);
		}
	}

	public static void main(String arg[]) {
		MapTest services = null;
		services.setServicesHealth(""ID01"", ""Jack"");
		services.setServicesHealth(""ID02"", ""Neil"");

		XStream stream = new XStream(new StaxDriver());
		stream.alias(""MapTest"", MapTest.class);
		stream.addImplicitMap(MapTest.class, ""map"", ""id"", String.class, ""name"");
		String xmlStr = stream.toXML(services);
		System.out.println(xmlStr);
	}
}",True,"['Map', 'XStream', 'HashMap', 'StaxDriver']","['java.util.Map', 'com.thoughtworks.xstream.XStream', 'java.util.HashMap', 'com.thoughtworks.xstream.io.xml.StaxDriver']","public class xstream_class_36 {
	public class MapTest {
		private Map<String, String> mapList;

		public MapTest()

			mapList = new HashMap<String, String>();
		}

		public void setServicesHealth(String id, String name) {
			mapList.put(id, name);
		}
	}

	public static void main(String arg[]) {
		MapTest services = null;
		services.setServicesHealth(""ID01"", ""Jack"");
		services.setServicesHealth(""ID02"", ""Neil"");

		XStream stream = new XStream(new StaxDriver());
		stream.alias(""MapTest"", MapTest.class);
		stream.addImplicitMap(MapTest.class, ""map"", ""id"", String.class, ""name"");
		String xmlStr = stream.toXML(services);
		System.out.println(xmlStr);
	}
}",xstream_class_36.java
"package xstream;
//http://www.dreamincode.net/forums/topic/240464-xstream-attribute-and-values-not-clear/

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import java.util.ArrayList;

public class xstream_class_37 {
	public class FieldDtoConvertor implements Converter {

		public boolean canConvert(Class clazz) {
			return clazz.equals(FieldDto.class);
		}

		public void marshal(final Object value, final HierarchicalStreamWriter writer,
				final MarshallingContext context) {
			final FieldDto fieldDto = (FieldDto) value;
			for (int i = 0; i < fieldDto.getSize(); i++) {
				writer.addAttribute(fieldDto.getAttributeName(i), fieldDto.getAttributeValue(i));
			}
			writer.setValue(fieldDto.getText());
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			FieldDto fieldDto = new FieldDto();
			for (int i = 0; i < reader.getAttributeCount(); i++) {
				fieldDto.addAttribute(reader.getAttributeName(i), reader.getAttribute(i));
			}
			fieldDto.setText(reader.getValue());
			return fieldDto;
		}
	}

	public class FieldDto {
		private ArrayList<String> attributeName = null;
		private ArrayList<String> attributeValue = null;
		private String text;

		public FieldDto() {
			attributeName = new ArrayList<String>();
			attributeValue = new ArrayList<String>();
		}

		public String getAttributeName(int index) {
			return attributeName.get(index);
		}

		public void addAttribute(String attributeName, String attributeValue) {
			this.attributeName.add(attributeName);
			this.attributeValue.add(attributeValue);
		}

		public String getAttributeValue(int index) {
			return attributeValue.get(index);
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

		public int getSize() {
			return attributeName.size();
		}
	}

}",True,"['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'ArrayList']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'java.util.ArrayList']","public class xstream_class_37
	public class FieldDtoConvertor implements Converter {

		public boolean canConvert(Class clazz)
			return clazz.equals(FieldDto.class);
		}

		public void marshal(final Object value, final HierarchicalStreamWriter writer,
				final MarshallingContext context) {
			final FieldDto fieldDto = (FieldDto) value;
			for (int i = 0; i < fieldDto.getSize(); i++) {
				writer.addAttribute(fieldDto.getAttributeName(i), fieldDto.getAttributeValue(i));
			}
			writer.setValue(fieldDto.getText());
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			FieldDto fieldDto = new FieldDto();
			for (int i = 0; i < reader.getAttributeCount(); i++) {
				fieldDto.addAttribute(reader.getAttributeName(i), reader.getAttribute(i));
			}
			fieldDto.setText(reader.getValue());
			return fieldDto;
		}
	}

	public class FieldDto {
		private ArrayList<String> attributeName = null;
		private ArrayList<String> attributeValue = null;
		private String text;

		public FieldDto() {
			attributeName = new ArrayList<String>();
			attributeValue = new ArrayList<String>();
		}

		public String getAttributeName(int index) {
			return attributeName.get(index);
		}

		public void addAttribute(String attributeName, String attributeValue) {
			this.attributeName.add(attributeName);
			this.attributeValue.add(attributeValue);
		}

		public String getAttributeValue(int index) {
			return attributeValue.get(index);
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

		public int getSize() {
			return attributeName.size();
		}
	}

}",xstream_class_37.java
"package xstream;
//ID=33088013

import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import java.util.ArrayList;

public class xstream_class_38 {
	XStream xstream = new XStream();

	@XStreamAlias(""bookdetails"")
	public class BookDetails {
		private int bookId;
		private String bookName;
		private int amount;
	}

	@XStreamAlias(""Books"")
	public class Books {
		private List<BookDetails> bookDetails = new ArrayList<BookDetails>();
	}

	public BookDetails convertXml(String xml) {
		xstream.processAnnotations(Books.class);
		xstream.processAnnotations(BookDetails.class);
		xstream.addImplicitCollection(Books.class, ""bookDetails"");
		Books b = (Books) xstream.fromXML(xml);
		// and now you can return your BookDetails element (in case you want only first one)
		return b.bookDetails.get(0);
	}
}",True,"['List', 'XStream', 'XStreamAlias', 'ArrayList']","['java.util.List', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'java.util.ArrayList']","public class xstream_class_38 {
	XStream xstream = new XStream();

	@XStreamAlias(""bookdetails"")
	public class BookDetails {
		private int bookId;
		private String bookName;
		private int amount
	}

	@XStreamAlias(""Books"")
	public class Books {
		private List<BookDetails> bookDetails = new ArrayList<BookDetails>();
	}

	public BookDetails convertXml(String xml) {
		xstream.processAnnotations(Books.class);
		xstream.processAnnotations(BookDetails.class);
		xstream.addImplicitCollection(Books.class, ""bookDetails"");
		Books b = (Books) xstream.fromXML(xml);
		// and now you can return your BookDetails element (in case you want only first one)
		return b.bookDetails.get(0);
	}
}",xstream_class_38.java
"package xstream;
//ID = 26862650

import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.XppDriver;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import java.io.Writer;
import com.thoughtworks.xstream.core.util.QuickWriter;

public class xstream_class_39 {

	private static XStream xstream = new XStream(new XppDriver() {
		@Override
		public HierarchicalStreamWriter createWriter(Writer out) {
			return new PrettyPrintWriter(out) {
				// Add CDATA block  
				boolean cdata;//I need to add cdata for some fields only  
				boolean isNeedUpper;//only some will need this

				protected void writeText(QuickWriter writer, String text) {
					if (cdata) {
						writer.write(""<![CDATA["");
						writer.write(text);
						writer.write(""]]>"");
					} else if (isNeedUpper) {
						writer.write(text.toUpperCase());
					} else
						writer.write(text);
				}
			};
		}
	});
}",True,"['PrettyPrintWriter', 'XStream', 'XppDriver', 'HierarchicalStreamWriter', 'Writer', 'QuickWriter']","['com.thoughtworks.xstream.io.xml.PrettyPrintWriter', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.XppDriver', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'java.io.Writer', 'com.thoughtworks.xstream.core.util.QuickWriter']","public class xstream_class_39 {

	private static XStream xstream = new XStream(new XppDriver() {
		@Override
		public HierarchicalStreamWriter createWriter(Writer out) {
			return new PrettyPrintWriter(out) {
				// Add CDATA block  
				boolean cdata;//I need to add cdata for some fields only  
				boolean isNeedUpper;//only some will need this

				protected void writeText(QuickWriter writer, String text) {
					if (cdata) {
						writer.write(""<![CDATA["");
						writer.write(text);
						writer.write(""]]>"");
					} else if (isNeedUpper) {
						writer.write(text.toUpperCase());
					} else
						writer.write(text);
				}
			}
		}
	});
}",xstream_class_39.java
"package xstream;
//ID = 39005622

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;

public class xstream_class_40 implements Converter {

	@SuppressWarnings(""rawtypes"")
	@Override
	public boolean canConvert(Class clazz) {
		return clazz.equals(Integer.class);
	}

	@Override
	public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
		String text = (String) reader.getValue();
		Integer number = Integer.parseInt(text.trim());
		return number;
	}
}",True,"['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']","public class xstream_class_40 implements Converter {

	@SuppressWarnings(""rawtypes"")
	@Override
	public boolean canConvert(Class clazz) {
		return clazz.equals(Integer.class);
	}

	@Override
	public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
		String text = (String) reader.getValue();
		Integer number = Integer.parseInt(text.trim());
		return number
	}
}",xstream_class_40.java
"package xstream;
//ID=40922380

import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.StaxDriver;

public class xstream_class_41 {
	public static void main(String arg[]) {
		XStream xstream = new XStream(new StaxDriver());
		xstream.alias(""data"", DetList.class);
		xstream.alias(""i"", Details.class);
		String s = new String(""<data>\n"" + ""\t<i Name='asia' type='continent' id='11'></i>\n""
				+ ""\t<i Name='africa' type='continent' id='12'></i>\n""
				+ ""\t<i Name='japan' type='country' id='13'></i>\n"" + ""</data>"");
		System.out.println(s);
		DetList data = (DetList) xstream.fromXML(s);
	}

	public class DetList {
		private List<Details> detlist;

		public List<Details> getDetlist() {
			return detlist;
		}

		public void setDetlist(List<Details> detlist) {
			this.detlist = detlist;
		}
	}

	public class Details {

		private String Name;
		private String type;
		private String id;

		//Getters and Setters are here.
	}

}",True,"['List', 'XStream', 'StaxDriver']","['java.util.List', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.StaxDriver']","public class xstream_class_41 {
	public static void main(String arg[]) {
		XStream xstream = new XStream(new StaxDriver());
		xstream.alias(""data"", DetList.class);
		xstream.alias(""i"", Details.class)
		String s = new String(""<data>\n"" + ""\t<i Name='asia' type='continent' id='11'></i>\n""
				+ ""\t<i Name='africa' type='continent' id='12'></i>\n""
				+ ""\t<i Name='japan' type='country' id='13'></i>\n"" + ""</data>"");
		System.out.println(s);
		DetList data = (DetList) xstream.fromXML(s);
	}

	public class DetList {
		private List<Details> detlist;

		public List<Details> getDetlist() {
			return detlist;
		}

		public void setDetlist(List<Details> detlist) {
			this.detlist = detlist;
		}
	}

	public class Details {

		private String Name;
		private String type;
		private String id;

		//Getters and Setters are here.
	}

}",xstream_class_41.java
"package xstream;
//ID=30288175

import com.thoughtworks.xstream.annotations.XStreamImplicit;
import java.util.List;
import com.thoughtworks.xstream.annotations.XStreamAlias;

public class xstream_class_42 {
	@XStreamAlias(""addressServiceConfig"")
	public class AddressServiceConfig {
		private String pathToCodeposFiles;
		@XStreamImplicit(itemFieldName = ""region"")
		private List<Region> regions;
	}

	@XStreamAlias(""region"")
	public class Region {
		private String regionName;
		@XStreamImplicit(itemFieldName = ""province"")
		private List<Province> provinces;
	}

	@XStreamAlias(""province"")
	public class Province {
		private int code;

		private String name;
	}
}",True,"['XStreamImplicit', 'List', 'XStreamAlias']","['com.thoughtworks.xstream.annotations.XStreamImplicit', 'java.util.List', 'com.thoughtworks.xstream.annotations.XStreamAlias']","public class xstream_class_42 {
	@XStreamAlias(""addressServiceConfig"")
	public class AddressServiceConfig {
		private String pathToCodeposFiles;
		@XStreamImplicit(itemFieldName = ""region"")
		private List<Region> regions;
	}

	@XStreamAlias(""region"")
	public class Region
		private String regionName;
		@XStreamImplicit(itemFieldName = ""province"")
		private List<Province> provinces;
	}

	@XStreamAlias(""province"")
	public class Province {
		private int code;

		private String name;
	}
}",xstream_class_42.java
"package xstream;
//https://developmentality.wordpress.com/2010/07/13/xstream-introduction-and-java-collections-serialization-problem-workaround/

import java.util.List;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.util.ArrayList;

public class xstream_class_43 {
	public List<Book> books;

	public xstream_class_43(List<Book> books) {
		this.books = books;
	}

	@Override
	public String toString() {
		StringBuilder b = new StringBuilder();
		b.append(""Library with "" + books.size() + "" books:\n"");
		for (Book book : books) {
			b.append(book.toString());
			// Skip a line
			b.append(""\n"");
		}
		return b.toString();
	}

	public static class Book {
		private String title;
		private String author;

		public Book(String title, String author) {
			this.title = title;
			this.author = author;
		}

		@Override
		public String toString() {
			return ""\"""" + title + ""\"" by "" + author;
		}
	}

	public static void main(String[] args) {
		List<Book> books = new ArrayList<Book>();
		books.add(new Book(""The Talent Code: Greatness Isn't Born. It's Grown. Here's How"", ""Daniel Coyle""));

		xstream_class_43 lib = new xstream_class_43(books);
		// Handles conversion of our objects into XML
		XStream stream = new XStream(new DomDriver());

		String xml = stream.toXML(lib);
		// fromXML returns a general Object; need to cast it into a Library
		xstream_class_43 lib2 = (xstream_class_43) stream.fromXML(xml);

		System.out.println(xml);
		System.out.println(lib);
		System.out.println(lib2);
		System.out.println(""Libraries equal: "" + lib.toString().equals(lib2.toString()));
	}
}",True,"['List', 'XStream', 'DomDriver', 'ArrayList']","['java.util.List', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.util.ArrayList']","public class xstream_class_43 {
	public List<Book> books;

	public xstream_class_43(List<Book> books) {
		this.books = books;
	}

	@Override
	public String toString()
		StringBuilder b = new StringBuilder();
		b.append(""Library with "" + books.size() + "" books:\n"");
		for (Book book : books) {
			b.append(book.toString());
			// Skip a line
			b.append(""\n"");
		}
		return b.toString();
	}

	public static class Book {
		private String title;
		private String author;

		public Book(String title, String author) {
			this.title = title;
			this.author = author;
		}

		@Override
		public String toString() {
			return ""\"""" + title + ""\"" by "" + author;
		}
	}

	public static void main(String[] args) {
		List<Book> books = new ArrayList<Book>();
		books.add(new Book(""The Talent Code: Greatness Isn't Born. It's Grown. Here's How"", ""Daniel Coyle""));

		xstream_class_43 lib = new xstream_class_43(books);
		// Handles conversion of our objects into XML
		XStream stream = new XStream(new DomDriver());

		String xml = stream.toXML(lib);
		// fromXML returns a general Object; need to cast it into a Library
		xstream_class_43 lib2 = (xstream_class_43) stream.fromXML(xml);

		System.out.println(xml);
		System.out.println(lib);
		System.out.println(lib2);
		System.out.println(""Libraries equal: "" + lib.toString().equals(lib2.toString()));
	}
}",xstream_class_43.java
"package xstream;
//http://xstream.10960.n7.nabble.com/java-lang-StackOverflowError-while-converting-an-object-to-XML-td5107.html

import java.io.File;
import com.thoughtworks.xstream.XStream;
import java.io.FileOutputStream;

public class xstream_class_44 {
	public static int COUNT = 0;
	public static int MAX_DEPTH = 800;

	/** 
	 * @param args 
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) {
		try {
			TestObject object = getNewTestObject();
			File persistFile = new File(""C:\\ABC.xml"");
			FileOutputStream outStream = new FileOutputStream(persistFile);
			XStream x = new XStream();
			x.alias(""testObject"", TestObject.class);
			x.toXML(object, outStream);
			outStream.close();
		} catch (Throwable e) {
			e.printStackTrace();
		}

	}

	public static TestObject getNewTestObject() {
		TestObject orderRecord = null;
		orderRecord.setName(""OBJECT_"" + COUNT);
		while (COUNT++ < MAX_DEPTH) {
			orderRecord.setParentObject(getNewTestObject());
		}
		return orderRecord;
	}

	public class TestObject {
		private TestObject parentObject;
		private String name;

		/** 
		 * @return the parentObject 
		 */
		public TestObject getParentObject() {
			return parentObject;
		}

		/** 
		 * @param parentObject the parentObject to set 
		 */
		public void setParentObject(TestObject parentObject) {
			this.parentObject = parentObject;
		}

		/** 
		 * @return the name 
		 */
		public String getName() {
			return name;
		}

		/** 
		 * @param name the name to set 
		 */
		public void setName(String name) {
			this.name = name;
		}
	}
}",True,"['File', 'XStream', 'FileOutputStream']","['java.io.File', 'com.thoughtworks.xstream.XStream', 'java.io.FileOutputStream']","public class xstream_class_44 {
	public static int COUNT = 0;
	public static int MAX_DEPTH = 800;

	/** 
	 * @param args 
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args)
		try {
			TestObject object = getNewTestObject();
			File persistFile = new File(""C:\\ABC.xml"");
			FileOutputStream outStream = new FileOutputStream(persistFile);
			XStream x = new XStream();
			x.alias(""testObject"", TestObject.class);
			x.toXML(object, outStream);
			outStream.close();
		} catch (Throwable e) {
			e.printStackTrace();
		}

	}

	public static TestObject getNewTestObject() {
		TestObject orderRecord = null;
		orderRecord.setName(""OBJECT_"" + COUNT);
		while (COUNT++ < MAX_DEPTH) {
			orderRecord.setParentObject(getNewTestObject());
		}
		return orderRecord;
	}

	public class TestObject {
		private TestObject parentObject;
		private String name;

		/** 
		 * @return the parentObject 
		 */
		public TestObject getParentObject() {
			return parentObject;
		}

		/** 
		 * @param parentObject the parentObject to set 
		 */
		public void setParentObject(TestObject parentObject) {
			this.parentObject = parentObject;
		}

		/** 
		 * @return the name 
		 */
		public String getName() {
			return name;
		}

		/** 
		 * @param name the name to set 
		 */
		public void setName(String name) {
			this.name = name;
		}
	}
}",xstream_class_44.java
"package xstream;
//ID = 3143234

import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import java.io.PrintWriter;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class xstream_class_5 {
	public class Test {
		public void main(String[] args) throws FileNotFoundException {
			XStream xs = new XStream(new DomDriver());
			Foo f = new Foo(1, ""booo"", new Bar(42));
			PrintWriter pw = new PrintWriter(""a.xml"");
			xs.toXML(f, pw);
		}
	}

	public class Bar {
		public int id;

		public Bar(int id) {
			this.id = id;
		}

	}

	public class Foo {
		public int a;
		public String b;
		public Bar boo;

		public Foo(int a, String b, Bar c) {
			this.a = a;
			this.b = b;
			this.boo = c;
		}
	}

}",True,"['FileNotFoundException', 'XStream', 'PrintWriter', 'DomDriver']","['java.io.FileNotFoundException', 'com.thoughtworks.xstream.XStream', 'java.io.PrintWriter', 'com.thoughtworks.xstream.io.xml.DomDriver']","public class xstream_class_5 {
	public class Test {
		public void main(String[] args) throws FileNotFoundException {
			XStream xs = new XStream(new DomDriver());
			Foo f = new Foo(1, ""booo"", new Bar(42));
			PrintWriter pw = new PrintWriter(""a.xml"");
			xs.toXML(f, pw)
		}
	}

	public class Bar {
		public int id;

		public Bar(int id) {
			this.id = id;
		}

	}

	public class Foo {
		public int a;
		public String b;
		public Bar boo;

		public Foo(int a, String b, Bar c) {
			this.a = a;
			this.b = b;
			this.boo = c;
		}
	}

}",xstream_class_5.java
"package xstream;
//ID = 3642820

import java.io.File;
import java.io.OutputStream;
import com.thoughtworks.xstream.XStream;
import java.io.FileOutputStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class xstream_class_6 {
	public static boolean toXML(Object object, File file) {
		XStream xStream = new XStream(new DomDriver(""UTF-8""));
		OutputStream outputStream = null;

		try {
			outputStream = new FileOutputStream(file);
			xStream.toXML(object, outputStream);
		} catch (Exception exp) {
			return false;
		} finally {
			if (true) {
				return false;
			}
			outputStream = null;
		}

		return true;
	}

}",True,"['File', 'OutputStream', 'XStream', 'FileOutputStream', 'DomDriver']","['java.io.File', 'java.io.OutputStream', 'com.thoughtworks.xstream.XStream', 'java.io.FileOutputStream', 'com.thoughtworks.xstream.io.xml.DomDriver']","public class xstream_class_6 {
	public static boolean toXML(Object object, File file) {
		XStream xStream = new XStream(new DomDriver(""UTF-8""));
		OutputStream outputStream = null;

		try
			outputStream = new FileOutputStream(file);
			xStream.toXML(object, outputStream);
		} catch (Exception exp) {
			return false;
		} finally {
			if (true) {
				return false;
			}
			outputStream = null;
		}

		return true;
	}

}",xstream_class_6.java
"package xstream;

import com.thoughtworks.xstream.annotations.XStreamAsAttribute;

//ID = 6810856
public class xstream_class_7 {
	@XStreamAsAttribute
	private String type;
	private String value;

	public xstream_class_7(String type, String value) {
		this.type = type;
		this.value = value;
	}
	// getters omitted 
}",True,['XStreamAsAttribute'],['com.thoughtworks.xstream.annotations.XStreamAsAttribute'],"public class xstream_class_7 {
	@XStreamAsAttribute
	private String type;
	private String value;

	public xstream_class_7(String type, String value) {
		this.type = type;
		this.value = value
	}
	// getters omitted 
}",xstream_class_7.java
"package xstream;
//ID = 8604244

import android.widget.TextView;
import android.os.Bundle;
import com.thoughtworks.xstream.XStream;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import com.thoughtworks.xstream.io.xml.DomDriver;
import android.app.Activity;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.transport.HttpTransportSE;

public class xstream_class_8 extends Activity {

	private String METHOD_NAME = ""getName""; // our webservice method name
	private String NAMESPACE = ""http://webservice.app""; // Here package
														// name in
														// webservice
														// with reverse
														// order.
	private String SOAP_ACTION = ""http://webservice.app/getName""; // NAMESPACE
																	// +
																	// method
	public TextView t; // name

	private static String URL = ""http://ip/WS/services/Service?wsdl"";

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Initialize soap request + add parameters
		SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);
		request.addProperty(""user"", ""user"");
		request.addProperty(""passwort"", ""passwort"");

		SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		envelope.setOutputSoapObject(request);

		// Make the soap call.
		HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);
		// this is the actual part that will call the webservice
		try {
			androidHttpTransport.call(SOAP_ACTION, envelope);
			SoapObject result = (SoapObject) envelope.bodyIn;

			//SoapObject result = (SoapObject) envelope.response();

			if (result != null) {

				XStream xstreams = new XStream(new DomDriver());
				String text = result.getProperty(0).toString();
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			t.setText(""FEHLER"");

		}

	}

}",True,"['TextView', 'Bundle', 'XStream', 'SoapEnvelope', 'SoapSerializationEnvelope', 'DomDriver', 'Activity', 'SoapObject', 'HttpTransportSE']","['android.widget.TextView', 'android.os.Bundle', 'com.thoughtworks.xstream.XStream', 'org.ksoap2.SoapEnvelope', 'org.ksoap2.serialization.SoapSerializationEnvelope', 'com.thoughtworks.xstream.io.xml.DomDriver', 'android.app.Activity', 'org.ksoap2.serialization.SoapObject', 'org.ksoap2.transport.HttpTransportSE']","public class xstream_class_8 extends Activity {

	private String METHOD_NAME = ""getName"" // our webservice method name
	private String NAMESPACE = ""http://webservice.app""; // Here package
														// name in
														// webservice
														// with reverse
														// order.
	private String SOAP_ACTION = ""http://webservice.app/getName""; // NAMESPACE
																	// +
																	// method
	public TextView t; // name

	private static String URL = ""http://ip/WS/services/Service?wsdl"";

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Initialize soap request + add parameters
		SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);
		request.addProperty(""user"", ""user"");
		request.addProperty(""passwort"", ""passwort"");

		SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		envelope.setOutputSoapObject(request);

		// Make the soap call.
		HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);
		// this is the actual part that will call the webservice
		try {
			androidHttpTransport.call(SOAP_ACTION, envelope);
			SoapObject result = (SoapObject) envelope.bodyIn;

			//SoapObject result = (SoapObject) envelope.response();

			if (result != null) {

				XStream xstreams = new XStream(new DomDriver());
				String text = result.getProperty(0).toString();
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			t.setText(""FEHLER"");

		}

	}

}",xstream_class_8.java
"package xstream;
//ID = 10740221

import java.io.FileNotFoundException;
import com.thoughtworks.xstream.XStream;
import java.io.FileInputStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class xstream_class_9 {
	public class ServerIP {
		private String ip;

		public String getIp() {
			return ip;
		}

		public void setIp(String ip) {
			this.ip = ip;
		}
	}

	public class ServerHandler {

		private String fileName = ""servers.xml"";
		private String path = ""J:\\workspace\\LOG730\\src\\Q3\\"";
		private XStream xstream = new XStream(new DomDriver());

		public void readFromXML() {
			try {
				FileInputStream fis = new FileInputStream(path + fileName);
				ServerIP server = (ServerIP) xstream.fromXML(fis, new ServerIP());
				System.out.println(""Host: "" + server.getIp());
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}
}",True,"['FileNotFoundException', 'XStream', 'FileInputStream', 'DomDriver']","['java.io.FileNotFoundException', 'com.thoughtworks.xstream.XStream', 'java.io.FileInputStream', 'com.thoughtworks.xstream.io.xml.DomDriver']","public class xstream_class_9 {
	public class ServerIP {
		private String ip;

		public String getIp() {
			return ip;
		}

		public void setIp(String ip) {
			this.ip = ip
		}
	}

	public class ServerHandler {

		private String fileName = ""servers.xml"";
		private String path = ""J:\\workspace\\LOG730\\src\\Q3\\"";
		private XStream xstream = new XStream(new DomDriver());

		public void readFromXML() {
			try {
				FileInputStream fis = new FileInputStream(path + fileName);
				ServerIP server = (ServerIP) xstream.fromXML(fis, new ServerIP());
				System.out.println(""Host: "" + server.getIp());
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}
}",xstream_class_9.java
"package java.android;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.view.View;

public class ad10 {
    public Bitmap screenShot(View view) {
        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.draw(canvas);
        return bitmap;
    }
}
",True,"['Bitmap', 'Canvas', 'View']","['android.graphics.Bitmap', 'android.graphics.Canvas', 'android.view.View']","public class ad10 {
    public Bitmap screenShot(View view) {
        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.draw(canvas)
        return bitmap;
    }
}
",ad10.java
"package java.android;

import android.app.Activity;
import android.content.res.Configuration;
import android.content.res.Resources;

public class ad12 {
public static void hideKeyboardFrom() {
    Activity activity = null;
    Resources resources = activity.getResources();
    Configuration config = resources.getConfiguration();
}
}
",True,"['Activity', 'Configuration', 'Resources']","['android.app.Activity', 'android.content.res.Configuration', 'android.content.res.Resources']","public class ad12 {
public static void hideKeyboardFrom() {
    Activity activity = null
    Resources resources = activity.getResources();
    Configuration config = resources.getConfiguration();
}
}
",ad12.java
"package java.android;

import android.app.Activity;
import android.view.View;
import android.view.inputmethod.InputMethodManager;

public class ad13 {
    public void onClick(View view) {
        ((InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE))
                .toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }

    private Object getSystemService(String inputMethodService) {
        return null;
    }
}",True,"['Activity', 'View', 'InputMethodManager']","['android.app.Activity', 'android.view.View', 'android.view.inputmethod.InputMethodManager']","public class ad13 {
    public void onClick(View view) {
        ((InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE))
                .toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }

    private Object getSystemService(String inputMethodService) {
        return null
    }
}",ad13.java
"package java.android;

import android.app.Activity;
import android.view.inputmethod.InputMethodManager;

public class ad14 {
    public static void h1(){
        InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }
    private static Object getSystemService(String inputMethodService) {
        return null;
    }
}
",True,"['Activity', 'InputMethodManager']","['android.app.Activity', 'android.view.inputmethod.InputMethodManager']","public class ad14 {
    public static void h1(){
        InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }
    private static Object getSystemService(String inputMethodService) {
        return null
    }
}
",ad14.java
"package java.android;


import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class ad15 extends Activity {

    private TextView mTextView = null;

    public void h1(Bundle savedInstanceState) {
        mTextView = new TextView(this);
    }
}
",True,"['Activity', 'Bundle', 'TextView']","['android.app.Activity', 'android.os.Bundle', 'android.widget.TextView']","public class ad15 extends Activity {

    private TextView mTextView = null

    public void h1(Bundle savedInstanceState) {
        mTextView = new TextView(this);
    }
}
",ad15.java
"package java.android;

import android.content.Context;
import android.widget.TextView;

public class ad17 {
    TextView tv = new TextView(getContext());
    private Context getContext() {
        return null;
    }


}
",True,"['Context', 'TextView']","['android.content.Context', 'android.widget.TextView']","public class ad17 {
    TextView tv = new TextView(getContext());
    private Context getContext()
        return null;
    }


}
",ad17.java
"package java.android;

import android.content.Intent;
import android.net.Uri;

public class ad18 {
    public static void h1(){
        String url = """";
        Intent i = new Intent(Intent.ACTION_VIEW);
    }
}
",True,"['Intent', 'Uri']","['android.content.Intent', 'android.net.Uri']","public class ad18 {
    public static void h1(){
        String url = """"
        Intent i = new Intent(Intent.ACTION_VIEW);
    }
}
",ad18.java
"package java.android;

import android.content.Intent;
import android.os.Bundle;

public class ad19 {
    public static void h1(){
        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            String value = extras.getString(""key"");
        }
    }
    private static Intent getIntent() {
        return null;
    }
}
",True,"['Intent', 'Bundle']","['android.content.Intent', 'android.os.Bundle']","public class ad19 {
    public static void h1()
        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            String value = extras.getString(""key"");
        }
    }
    private static Intent getIntent() {
        return null;
    }
}
",ad19.java
"package java.android;
import android.app.Activity;
import android.view.View;
import android.view.inputmethod.InputMethodManager;

public class ad2 {
    public static void hideKeyboard(Activity activity) {
        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
        View view = activity.getCurrentFocus();
    }
}
",True,"['Activity', 'View', 'InputMethodManager']","['android.app.Activity', 'android.view.View', 'android.view.inputmethod.InputMethodManager']","public class ad2 {
    public static void hideKeyboard(Activity activity) {
        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
        View view = activity.getCurrentFocus();

}
",ad2.java
"package java.android;

import org.joda.time.Instant;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class ad20 {
    public static void h1(){
        String currentDate = new SimpleDateFormat(""dd-MM-yyyy"", Locale.getDefault()).format(new Date());
        Instant instant = Instant.now();
    }

}
",True,"['Instant', 'SimpleDateFormat', 'Date', 'Locale']","['org.joda.time.Instant', 'java.text.SimpleDateFormat', 'java.util.Date', 'java.util.Locale']","public class ad20 {
    public static void h1(){
        String currentDate = new SimpleDateFormat(""dd-MM-yyyy"", Locale.getDefault()).format(new Date());
        Instant instant = Instant.now();


}
",ad20.java
"package java.android;

import android.content.Intent;
import android.net.Uri;

public class ad3 {
    public void h1() {
        String url = """";
        Intent i = new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(url));
    }

}
",True,"['Intent', 'Uri']","['android.content.Intent', 'android.net.Uri']","public class ad3 {
    public void h1() {
        String url = """";
        Intent i = new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(url));
    }

",ad3.java
"package java.android;



import android.app.Activity;
import android.content.Context;
import android.view.View;
import android.view.inputmethod.InputMethodManager;

public class ad4 {
    public static void hideKeyboardFrom(Context context, View view) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

}
",True,"['Activity', 'Context', 'View', 'InputMethodManager']","['android.app.Activity', 'android.content.Context', 'android.view.View', 'android.view.inputmethod.InputMethodManager']","public class ad4 {
    public static void hideKeyboardFrom(Context context, View view) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }


",ad4.java
"package java.android;

import android.os.Build;
import android.os.Bundle;

public class ad5 {
    public static void h1(){
        Bundle args = new Bundle();
        args.putInt(""someInt"", 328);
        args.putString(""someString"", ""jackson"");
    }
}
",True,"['Build', 'Bundle']","['android.os.Build', 'android.os.Bundle']","public class ad5 {
    public static void h1(){
        Bundle args = new Bundle();
        args.putInt(""someInt"", 328);
        args.putString(""someString"", ""jackson"");

}
",ad5.java
"package java.android;


import android.util.DisplayMetrics;



public class ad6 {
  public void h1(){
      DisplayMetrics displayMetrics = new DisplayMetrics();
      int height = displayMetrics.heightPixels;
      int width = displayMetrics.widthPixels;
  }
}
",True,['DisplayMetrics'],['android.util.DisplayMetrics'],"public class ad6 {
  public void h1(){
      DisplayMetrics displayMetrics = new DisplayMetrics();
      int height = displayMetrics.heightPixels;
      int width = displayMetrics.widthPixels;
  }

",ad6.java
"package java.android;

import android.os.Build;

public class ad7 {
    public static String h1(){
        String release = Build.VERSION.RELEASE;
        int sdkVersion = Build.VERSION.SDK_INT;
        return ""Android SDK: "" + sdkVersion + "" ("" + release +"")"";
    }
}
",True,['Build'],['android.os.Build'],"public class ad7 {
    public static String h1(){
        String release = Build.VERSION.RELEASE;
        int sdkVersion = Build.VERSION.SDK_INT;
        return ""Android SDK: "" + sdkVersion + "" ("" + release +"")"";

}
",ad7.java
"package java.gwt;
import java.lang.reflect.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class gt11 {

        public static void h1()
        {
            Logger logger = Logger.getLogger(""NameOfYourLogger"");
            logger.log(Level.SEVERE, ""this message should get logged"");
        }




}
",True,"['*', 'Level', 'Logger']","['java.lang.reflect.*', 'java.util.logging.Level', 'java.util.logging.Logger']","public class gt11 {

        public static void h1()
        {
            Logger logger = Logger.getLogger(""NameOfYourLogger"");
            logger.log(Level.SEVERE, ""this message should get logged"");
        }





",gt11.java
"package java.gwt;

import com.google.gwt.user.datepicker.client.CalendarUtil;
import java.util.Date;

public class gt15 {
    public static void h1(){
        final Date dueDate = new Date();
        CalendarUtil.addDaysToDate(dueDate, 21);
    }
}
",True,"['CalendarUtil', 'Date']","['com.google.gwt.user.datepicker.client.CalendarUtil', 'java.util.Date']","public class gt15 {
    public static void h1()
        final Date dueDate = new Date();
        CalendarUtil.addDaysToDate(dueDate, 21);
    }
}
",gt15.java
"package java.gwt;

import java.util.Date;

public class gt16 {
@SuppressWarnings(""deprecation"")
public static void addDaysToDate(Date date, int days) {
            date.setDate(date.getDate() + days);
        }
}
",True,['Date'],['java.util.Date'],"public class gt16 {
@SuppressWarnings(""deprecation"")
public static void addDaysToDate(Date date, int days) {
            date.setDate(date.getDate() + days);

}
",gt16.java
"package java.gwt;

import com.google.gwt.event.shared.EventHandler;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.junit.client.Category;

import java.util.List;

public abstract class gt17<CategoryChangeHandler extends EventHandler> extends GwtEvent<CategoryChangeHandler> {
    private List<Category> category;
    public void h1(){
        final Type<CategoryChangeHandler> TYPE = new Type<CategoryChangeHandler>();
    }

}


",True,"['EventHandler', 'GwtEvent', 'Category', 'List']","['com.google.gwt.event.shared.EventHandler', 'com.google.gwt.event.shared.GwtEvent', 'com.google.gwt.junit.client.Category', 'java.util.List']","public abstract class gt17<CategoryChangeHandler extends EventHandler> extends GwtEvent<CategoryChangeHandler> {
    private List<Category> category;
    public void h1(){
        final Type<CategoryChangeHandler> TYPE = new Type<CategoryChangeHandler>();
    }




",gt17.java
"package java.gwt;

import java.util.Formatter;

public class gt18 {
    public static String h1(){
        Formatter format = new Formatter();
        int matches = 0;
        Formatter formattedString = format.format(""%d numbers(s, args) in correct position"", matches);
        return null;
    }
}
",True,['Formatter'],['java.util.Formatter'],"public class gt18 {
    public static String h1(){
        Formatter format = new Formatter();
        int matches = 0;
        Formatter formattedString = format.format(""%d numbers(s, args) in correct position"", matches);
        return null;

}
",gt18.java
"package java.gwt;

import com.google.gwt.user.datepicker.client.CalendarUtil;

import java.util.Date;

public class gt4 {
    public static void h1(){
        final Date dueDate = new Date();
        CalendarUtil.addDaysToDate(dueDate, 21);
    }
}
",True,"['CalendarUtil', 'Date']","['com.google.gwt.user.datepicker.client.CalendarUtil', 'java.util.Date']","public class gt4 {
    public static void h1(){
        final Date dueDate = new Date();
        CalendarUtil.addDaysToDate(dueDate, 21);

}
",gt4.java
"package java.gwt;

import java.util.Date;

public class gt5 {
    private Date addDays(Date dateIn, int numDays)
    {
        long milisPerDay = 86400000;
        long dateInMilis = dateIn.getTime();
        return new Date(dateInMilis);
    }
}
",True,['Date'],['java.util.Date'],"public class gt5 {
    private Date addDays(Date dateIn, int numDays)

        long milisPerDay = 86400000;
        long dateInMilis = dateIn.getTime();
        return new Date(dateInMilis);
    }
}
",gt5.java
"package java.gwt;

import java.math.BigInteger;

public class gt6 {
    public static void h1(){
        long time = System.currentTimeMillis();
        long milisPerYear = new BigInteger(""31536000000"").longValue();
        String currentYear = String.valueOf((int) Math.floor(time / milisPerYear) + 1970);
    }
}
",True,['BigInteger'],['java.math.BigInteger'],"public class gt6 {
    public static void h1(){
        long time = System.currentTimeMillis();
        long milisPerYear = new BigInteger(""31536000000"").longValue();
        String currentYear = String.valueOf((int) Math.floor(time / milisPerYear) + 1970);

}
",gt6.java
"package java.gwt;

import com.google.gwt.core.client.Scheduler;
import com.google.gwt.user.client.Command;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class gt7 {
    Pattern pattern = Pattern.compile("""");
    Matcher matcher = pattern.matcher("""");
    boolean matchFound = matcher.find();
}
",True,"['Scheduler', 'Command', 'Matcher', 'Pattern']","['com.google.gwt.core.client.Scheduler', 'com.google.gwt.user.client.Command', 'java.util.regex.Matcher', 'java.util.regex.Pattern']","public class gt7
    Pattern pattern = Pattern.compile("""");
    Matcher matcher = pattern.matcher("""");
    boolean matchFound = matcher.find();
}
",gt7.java
"package java.gwt;

import java.text.SimpleDateFormat;
import java.util.Date;
public class gt8 {
        public Date parse(String dateString){
            try{
                return (new SimpleDateFormat(""yyyyMMdd"")).parse(dateString);
            }catch(Exception ex){
                throw new IllegalArgumentException(""Cannot convert to date: ""+ dateString);
            }
        }
 }
",True,"['SimpleDateFormat', 'Date']","['java.text.SimpleDateFormat', 'java.util.Date']","public class gt8 {
        public Date parse(String dateString){
            try
                return (new SimpleDateFormat(""yyyyMMdd"")).parse(dateString);
            }catch(Exception ex){
                throw new IllegalArgumentException(""Cannot convert to date: ""+ dateString);
            }
        }
 }
",gt8.java
"package java.gwt;

import com.google.gwt.i18n.client.DateTimeFormat;

import java.util.Date;

public class gt9 {
    public String format(Date date)
    {
        return DateTimeFormat.getFormat(""yyyyMMdd"").format(date);
    }
}
",True,"['DateTimeFormat', 'Date']","['com.google.gwt.i18n.client.DateTimeFormat', 'java.util.Date']","public class gt9
    public String format(Date date)
    {
        return DateTimeFormat.getFormat(""yyyyMMdd"").format(date);
    }
}
",gt9.java
"package java.hibernate;

import org.hibernate.cfg.Configuration;

public class hb1 {
    public static void h1(){
        Configuration configuration = new Configuration().configure();
    }

}
",True,['Configuration'],['org.hibernate.cfg.Configuration'],"public class hb1 {
    public static void h1(){
        Configuration configuration = new Configuration().configure();


}
",hb1.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class hb11 {
    private Configuration configuration;
    private SessionFactory sessionFactory;
    private Session session;
    private Transaction transaction;
}
",True,"['Session', 'SessionFactory', 'Transaction', 'Configuration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction', 'org.hibernate.cfg.Configuration']","public class hb11
    private Configuration configuration;
    private SessionFactory sessionFactory;
    private Session session;
    private Transaction transaction;
}
",hb11.java
"package java.hibernate;

import org.hibernate.Hibernate;
import org.hibernate.QueryException;
import org.hibernate.annotations.Type;
import org.hibernate.engine.Mapping;

import java.sql.Types;

public class hb12 {
    public Type getReturnType(Type columnType, Mapping mapping) throws QueryException {
        int[] sqlTypes = new int[0];
        if (sqlTypes.length!=1) throw new QueryException(""multi-column type in avg()"");
        return columnType;
    }
}
",True,"['Hibernate', 'QueryException', 'Type', 'Mapping', 'Types']","['org.hibernate.Hibernate', 'org.hibernate.QueryException', 'org.hibernate.annotations.Type', 'org.hibernate.engine.Mapping', 'java.sql.Types']","public class hb12 {
    public Type getReturnType(Type columnType, Mapping mapping) throws QueryException {
        int[] sqlTypes = new int[0];
        if (sqlTypes.length!=1) throw new QueryException(""multi-column type in avg()"");
        return columnType;

}
",hb12.java
"package java.hibernate;

import org.hibernate.mapping.List;
import org.hibernate.mapping.SimpleValue;


public class hb14 {
    public static void h1( List model) {
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv);
    }


}
",True,"['List', 'SimpleValue']","['org.hibernate.mapping.List', 'org.hibernate.mapping.SimpleValue']","public class hb14 {
    public static void h1( List model) {
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv);



}
",hb14.java
"package java.hibernate;


import javax.persistence.CascadeType;
import javax.persistence.OneToMany;
import java.util.Set;

public class hb15<GlobalConfigScope> {
    private static Object Type;

    @OneToMany(cascade = CascadeType.ALL, mappedBy=""globalConfig"", orphanRemoval = true)
    private Set<GlobalConfigScope> gcScopeSet;
}
",True,"['CascadeType', 'OneToMany', 'Set']","['javax.persistence.CascadeType', 'javax.persistence.OneToMany', 'java.util.Set']","public class hb15<GlobalConfigScope> {
    private static Object Type;

    @OneToMany(cascade = CascadeType.ALL, mappedBy=""globalConfig"", orphanRemoval = true
    private Set<GlobalConfigScope> gcScopeSet;
}
",hb15.java
"package java.hibernate;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.OneToMany;
import java.util.ArrayList;
import java.util.List;

public class hb16<Car_OneToMany> {
    @OneToMany(cascade = {CascadeType.ALL})
    @Column(name = ""ListOfCarsDrivenByDriver"")
    private List<Car_OneToMany> listOfCarsBeingDriven = new ArrayList<Car_OneToMany>();
}
",True,"['CascadeType', 'Column', 'OneToMany', 'ArrayList', 'List']","['javax.persistence.CascadeType', 'javax.persistence.Column', 'javax.persistence.OneToMany', 'java.util.ArrayList', 'java.util.List']","public class hb16<Car_OneToMany> {
    @OneToMany(cascade = {CascadeType.ALL
    @Column(name = ""ListOfCarsDrivenByDriver"")
    private List<Car_OneToMany> listOfCarsBeingDriven = new ArrayList<Car_OneToMany>();
}
",hb16.java
"package java.hibernate;

import org.hibernate.mapping.List;
import org.hibernate.mapping.SimpleValue;


public class hb18 {
    public static void h1(){
        List model = null;
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv);
    }

}
",True,"['List', 'SimpleValue']","['org.hibernate.mapping.List', 'org.hibernate.mapping.SimpleValue']","public class hb18 {
    public static void h1(){
        List model = null;
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv)
    }

}
",hb18.java
"package java.hibernate;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import java.util.List;


public class hb2 {

        @Entity
        public static class University<Student> {
            private String address;
            @OneToMany(fetch = FetchType.LAZY)
            private List<Student> students;

        }
}
",True,"['Entity', 'FetchType', 'Id', 'OneToMany', 'List']","['javax.persistence.Entity', 'javax.persistence.FetchType', 'javax.persistence.Id', 'javax.persistence.OneToMany', 'java.util.List']","public class hb2 {

        @Entity
        public static class University<Student> {
            private String address;
            @OneToMany(fetch = FetchType.LAZY)
            private List<Student> students;


}
",hb2.java
"package java.hibernate;

import android.app.FragmentManager;
import net.sf.gilead.core.hibernate.HibernateUtil;
import org.hibernate.Transaction;

public class hb20 {
    private static HibernateUtil HibernateUtils;

    public static void h1(){
        Transaction tx = null;
        FragmentManager session = null;
        tx = (Transaction) session.beginTransaction();

    }
}
",True,"['FragmentManager', 'HibernateUtil', 'Transaction']","['android.app.FragmentManager', 'net.sf.gilead.core.hibernate.HibernateUtil', 'org.hibernate.Transaction']","public class hb20 {
    private static HibernateUtil HibernateUtils;

    public static void h1(){
        Transaction tx = null;
        FragmentManager session = null
        tx = (Transaction) session.beginTransaction();

    }
}
",hb20.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.junit.Before;

import javax.imageio.spi.ServiceRegistry;
import java.io.Serializable;



public class hb3  implements Serializable {
    @Before
    public void h1 (){
           Configuration cfg = new Configuration().configure() ;
            Object sr = null;
    }
}


",True,"['Session', 'SessionFactory', 'Transaction', 'Configuration', 'Before', 'ServiceRegistry', 'Serializable']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction', 'org.hibernate.cfg.Configuration', 'org.junit.Before', 'javax.imageio.spi.ServiceRegistry', 'java.io.Serializable']","public class hb3  implements Serializable {
    @Before
    public void h1 (){
           Configuration cfg = new Configuration().configure() ;
            Object sr = null
    }
}


",hb3.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class hb4 {
    public static Session getSessionobject(){
        SessionFactory sessionFactory = null;
        assert false;
        return sessionFactory.getCurrentSession();

    }
}
",True,"['Session', 'SessionFactory']","['org.hibernate.Session', 'org.hibernate.SessionFactory']","public class hb4 {
    public static Session getSessionobject(){
        SessionFactory sessionFactory = null;
        assert false;
        return sessionFactory.getCurrentSession()

    }
}
",hb4.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.junit.Test;

public class hb5 {
    @Test
    public void textTx() {
        SessionFactory sessionFactory = null;
        Session session = null;
        Transaction tx;

    }
}

",True,"['Session', 'SessionFactory', 'Transaction', 'Test']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction', 'org.junit.Test']","public class hb5 {
    @Test
    public void textTx() {
        SessionFactory sessionFactory = null;
        Session session = null;
        Transaction tx

    }
}

",hb5.java
"package java.hibernate;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class hb6 {
    public static  void h1(){
        Configuration config = new Configuration().configure();
        SessionFactory sessionFactory = config.buildSessionFactory();
    }
}
",True,"['SessionFactory', 'Configuration']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration']","public class hb6 {
    public static  void h1()
        Configuration config = new Configuration().configure();
        SessionFactory sessionFactory = config.buildSessionFactory();
    }
}
",hb6.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class hb7 {
    public static void h1(){
        Configuration config = new Configuration().configure();
        SessionFactory sessionFactory = config.buildSessionFactory();
        Session session = sessionFactory.openSession();
    }
}
",True,"['Session', 'SessionFactory', 'Transaction', 'Configuration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.Transaction', 'org.hibernate.cfg.Configuration']","public class hb7 {
    public static void h1(){
        Configuration config = new Configuration().configure();
        SessionFactory sessionFactory = config.buildSessionFactory();
        Session session = sessionFactory.openSession();

}
",hb7.java
"package java.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class hb8 {
    public static void h1(){
        SessionFactory sessionFactory = null;
        Session session = sessionFactory.openSession();
        Object s = null;
    }

}
",True,"['Session', 'SessionFactory']","['org.hibernate.Session', 'org.hibernate.SessionFactory']","public class hb8 {
    public static void h1(){
        SessionFactory sessionFactory = null;
        Session session = sessionFactory.openSession();
        Object s = null;


}
",hb8.java
"package java.hibernate;

import org.hibernate.HibernateException;
import org.hibernate.TransactionException;

public class hb9 {
    public static void h1() throws HibernateException {
        boolean begun = false;
        if (!begun) {
            throw new TransactionException(""Transaction not successfully started"");
        }
    }
}
",True,"['HibernateException', 'TransactionException']","['org.hibernate.HibernateException', 'org.hibernate.TransactionException']","public class hb9 {
    public static void h1() throws HibernateException {
        boolean begun = false;
        if (!begun) {
            throw new TransactionException(""Transaction not successfully started"");
        }
    }

",hb9.java
"package java.jdk;

import java.util.function.IntBinaryOperator;

public class jdk{

    static void h1() {
        IntBinaryOperator plusOperation = (a, b) -> a + b;
        System.out.println(""Sum of 10,34 : "" + plusOperation.applyAsInt(10, 34));
    }
}",True,['IntBinaryOperator'],['java.util.function.IntBinaryOperator'],"public class jdk{

    static void h1() {
        IntBinaryOperator plusOperation = (a, b) -> a + b;
        System.out.println(""Sum of 10,34 : "" + plusOperation.applyAsInt(10, 34));

}",jdk.java
"package java.jdk;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class jdk10 {
    public void h1() {
        File is = null;
        try {
            FileInputStream input = new FileInputStream(is);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }
}

",True,"['File', 'FileInputStream', 'FileNotFoundException']","['java.io.File', 'java.io.FileInputStream', 'java.io.FileNotFoundException']","public class jdk10 {
    public void h1() {
        File is = null;
        try {
            FileInputStream input = new FileInputStream(is);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();

    }
}

",jdk10.java
"package java.jdk;


import java.awt.*;
import java.io.File;
import java.io.IOException;

public class jdk14 {
    public static void h1(String aFile) throws IOException {
        Desktop desktop = Desktop.getDesktop();
        desktop.open(new File(aFile));
    }

}
",True,"['*', 'File', 'IOException']","['java.awt.*', 'java.io.File', 'java.io.IOException']","public class jdk14 {
    public static void h1(String aFile) throws IOException {
        Desktop desktop = Desktop.getDesktop();
        desktop.open(new File(aFile))
    }

}
",jdk14.java
"package java.jdk;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public class jdk15 {

    public static void h1(String[] args) {
        byte[] b = { -5, -122, -28};
        System.out.println(""Input Array :"" + Arrays.toString(b));
        System.out.println(""Array Length : "" + b.length);

    }
}",True,"['UnsupportedEncodingException', 'StandardCharsets', 'Arrays']","['java.io.UnsupportedEncodingException', 'java.nio.charset.StandardCharsets', 'java.util.Arrays']","public class jdk15 {

    public static void h1(String[] args) {
        byte[] b = { -5, -122, -28};
        System.out.println(""Input Array :"" + Arrays.toString(b));
        System.out.println(""Array Length : "" + b.length);


}",jdk15.java
"package java.jdk;


import java.text.SimpleDateFormat;

public class jdk16 {
    public static void h1(String[] args) {
        SimpleDateFormat sf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        String str3 = ""1927-12-31 23:54:07"";
    }
}

",True,['SimpleDateFormat'],['java.text.SimpleDateFormat'],"public class jdk16 {
    public static void h1(String[] args) {
        SimpleDateFormat sf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        String str3 = ""1927-12-31 23:54:07"";

}

",jdk16.java
"package java.jdk;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;

public class jdk17 {
    private static InputStream stream;
    public static void h1() throws IOException {
        int bufferSize = 1024;
        char[] buffer = new char[bufferSize];
        Reader in = new InputStreamReader(stream, StandardCharsets.UTF_8);
    }
}
",True,"['IOException', 'InputStream', 'InputStreamReader', 'Reader', 'StandardCharsets']","['java.io.IOException', 'java.io.InputStream', 'java.io.InputStreamReader', 'java.io.Reader', 'java.nio.charset.StandardCharsets']","public class jdk17 {
    private static InputStream stream;
    public static void h1() throws IOException {
        int bufferSize = 1024
        char[] buffer = new char[bufferSize];
        Reader in = new InputStreamReader(stream, StandardCharsets.UTF_8);
    }
}
",jdk17.java
"package java.jdk;

import org.apache.commons.io.IOUtils;

import java.io.*;

public class jdk18 {
    private static InputStream inputStream;
    public static String h1() throws IOException {
        StringWriter writer = new StringWriter();
        IOUtils.copy(inputStream, writer, ""UTF-8"");
        return writer.toString();

    }
}
",True,"['IOUtils', '*']","['org.apache.commons.io.IOUtils', 'java.io.*']","public class jdk18 {
    private static InputStream inputStream;
    public static String h1() throws IOException {
        StringWriter writer = new StringWriter()
        IOUtils.copy(inputStream, writer, ""UTF-8"");
        return writer.toString();

    }
}
",jdk18.java
"package java.jdk;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;

public class jdk19 {
    public static void h1() {
        int bufferSize = 1024;
        char[] buffer = new char[bufferSize];
        StringBuilder out = new StringBuilder();
    }
}
",True,"['IOException', 'InputStream', 'InputStreamReader', 'Reader', 'StandardCharsets']","['java.io.IOException', 'java.io.InputStream', 'java.io.InputStreamReader', 'java.io.Reader', 'java.nio.charset.StandardCharsets']","public class jdk19 {
    public static void h1() {
        int bufferSize = 1024;
        char[] buffer = new char[bufferSize];
        StringBuilder out = new StringBuilder()
    }
}
",jdk19.java
"package java.jdk;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class jdk2 {
    public static void main(String args[]){
        String userDirPropertyName = ""user.dir"";
        File initialUserDir = new File(System.getProperty(userDirPropertyName));
        System.out.println(""files in "" + initialUserDir.getAbsolutePath() + "":"");
    }
    }


",True,"['File', 'HashMap', 'Map', 'Collectors', 'Stream']","['java.io.File', 'java.util.HashMap', 'java.util.Map', 'java.util.stream.Collectors', 'java.util.stream.Stream']","public class jdk2 {
    public static void main(String args[]){
        String userDirPropertyName = ""user.dir"";
        File initialUserDir = new File(System.getProperty(userDirPropertyName));
        System.out.println(""files in "" + initialUserDir.getAbsolutePath() + "":"");

    }


",jdk2.java
"package java.jdk;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class jdk20 {
    private static InputStream inputStream;

    public static void h1() throws IOException {
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
    }
}
",True,"['BufferedInputStream', 'ByteArrayOutputStream', 'IOException', 'InputStream']","['java.io.BufferedInputStream', 'java.io.ByteArrayOutputStream', 'java.io.IOException', 'java.io.InputStream']","public class jdk20 {
    private static InputStream inputStream;

    public static void h1() throws IOException {
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        ByteArrayOutputStream buf = new ByteArrayOutputStream();

}
",jdk20.java
"package java.jdk;

import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class jdk3 {
    public static void h1(String oldDate, String format) throws ParseException {
        DateTimeFormatter dtf  = DateTimeFormatter.ofPattern(format);
        LocalDateTime dt = LocalDateTime.parse(oldDate, dtf);
        ZonedDateTime zdtzone = dt.atZone(ZoneId.of(""America/Los_Angeles""));
    }
}
",True,"['ParseException', 'LocalDateTime', 'ZoneId', 'ZonedDateTime', 'DateTimeFormatter']","['java.text.ParseException', 'java.time.LocalDateTime', 'java.time.ZoneId', 'java.time.ZonedDateTime', 'java.time.format.DateTimeFormatter']","public class jdk3 {
    public static void h1(String oldDate, String format) throws ParseException {
        DateTimeFormatter dtf  = DateTimeFormatter.ofPattern(format);
        LocalDateTime dt = LocalDateTime.parse(oldDate, dtf);
        ZonedDateTime zdtzone = dt.atZone(ZoneId.of(""America/Los_Angeles""));

}
",jdk3.java
"package java.jdk;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class jdk4 {
    public static void h1(String oldDate, String format) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Date dt = sdf.parse(oldDate);
        long epoch = dt. getTime();
    }
}
",True,"['ParseException', 'SimpleDateFormat', 'Date']","['java.text.ParseException', 'java.text.SimpleDateFormat', 'java.util.Date']","public class jdk4 {
    public static void h1(String oldDate, String format) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Date dt = sdf.parse(oldDate)
        long epoch = dt. getTime();
    }
}
",jdk4.java
"package java.jdk;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

public class jdk5 {
    public static void f1() throws MalformedURLException {
        File jar = new File("""");
        URLClassLoader loader = new
                URLClassLoader(new URL[]{jar.toURI().toURL()});
    }
}

",True,"['File', 'MalformedURLException', 'URL', 'URLClassLoader']","['java.io.File', 'java.net.MalformedURLException', 'java.net.URL', 'java.net.URLClassLoader']","public class jdk5 {
    public static void f1() throws MalformedURLException {
        File jar = new File("""");
        URLClassLoader loader = new
                URLClassLoader(new URL[]{jar.toURI().toURL()});

}

",jdk5.java
"package java.jdk;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

public class jdk8 {
    public static void h1(){
        DecimalFormat df = new DecimalFormat(""0.00"", new DecimalFormatSymbols(Locale.FRANCE));
        System.out.println(df.format(""""));
    }
}
",True,"['DecimalFormat', 'DecimalFormatSymbols', 'Locale']","['java.text.DecimalFormat', 'java.text.DecimalFormatSymbols', 'java.util.Locale']","public class jdk8 {
    public static void h1(){
        DecimalFormat df = new DecimalFormat(""0.00"", new DecimalFormatSymbols(Locale.FRANCE));
        System.out.println(df.format(""""))
    }
}
",jdk8.java
"package java.jdk;

import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.ChronoField;

public class jdk9 {
    public static void h1(){
       DateTimeFormatter DATE_FORMAT =
                new DateTimeFormatterBuilder().appendPattern(""dd/MM/yyyy[ [HH][:mm][:ss][.SSS]]"")
                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
                        .toFormatter();
    }

}
",True,"['DateTimeFormatter', 'DateTimeFormatterBuilder', 'ChronoField']","['java.time.format.DateTimeFormatter', 'java.time.format.DateTimeFormatterBuilder', 'java.time.temporal.ChronoField']","public class jdk9 {
    public static void h1()
       DateTimeFormatter DATE_FORMAT =
                new DateTimeFormatterBuilder().appendPattern(""dd/MM/yyyy[ [HH][:mm][:ss][.SSS]]"")
                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
                        .toFormatter();
    }

}
",jdk9.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

public class jt1 {
    public static void f1(){
        DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");
        DateTime jodatime = dtf.parseDateTime("""");
    }

}
",True,"['DateTime', 'DateTimeFormat', 'DateTimeFormatter']","['org.joda.time.DateTime', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter']","public class jt1 {
    public static void f1(){
        DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");
        DateTime jodatime = dtf.parseDateTime("""");


}
",jt1.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.Seconds;

public class jt10 {
    public static void h1(){
        DateTime now = DateTime.now();
        DateTime dateTime = now.plusMinutes(10);
        Seconds seconds = Seconds.secondsBetween(now, dateTime);
    }
}
",True,"['DateTime', 'Seconds']","['org.joda.time.DateTime', 'org.joda.time.Seconds']","public class jt10 {
    public static void h1(){
        DateTime now = DateTime.now();
        DateTime dateTime = now.plusMinutes(10)
        Seconds seconds = Seconds.secondsBetween(now, dateTime);
    }
}
",jt10.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.LocalDate;

public class jt11 {
    public static void h1(){
        DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
        DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
        DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);
    }
}
",True,"['DateTime', 'DateTimeZone', 'Days', 'LocalDate']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone', 'org.joda.time.Days', 'org.joda.time.LocalDate']","public class jt11 {
    public static void h1(){
        DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
        DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
        DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);

}
",jt11.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.LocalDate;

public class jt12 {
    public static void h1(DateTime end,DateTime start){
        Days.daysBetween(new LocalDate(start), new LocalDate(end)).getDays();
    }
}
",True,"['DateTime', 'Days', 'LocalDate']","['org.joda.time.DateTime', 'org.joda.time.Days', 'org.joda.time.LocalDate']","public class jt12 {
    public static void h1(DateTime end,DateTime start){
        Days.daysBetween(new LocalDate(start), new LocalDate(end)).getDays();

}
",jt12.java
"package java.joda_time;

import java.time.ZoneId;
import java.time.ZonedDateTime;

public class jt13 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""Pacific/Auckland"" ) ;
        ZonedDateTime now = ZonedDateTime.now( z ) ;
    }
}
",True,"['ZoneId', 'ZonedDateTime']","['java.time.ZoneId', 'java.time.ZonedDateTime']","public class jt13 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""Pacific/Auckland"" ) ;
        ZonedDateTime now = ZonedDateTime.now( z ) ;

}
",jt13.java
"package java.joda_time;

import org.joda.time.DateTime;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;

public class jt14 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""America/Montreal"" );
        ZonedDateTime start = ZonedDateTime.of( 2017 , 1 , 17 , 14 , 45 , 0 , 0 , z );
        ZonedDateTime stop = ZonedDateTime.of( 2017 , 1 , 17 , 15 , 12 , 0 , 0 , z );
    }
}
",True,"['DateTime', 'ZoneId', 'ZonedDateTime', 'ChronoUnit']","['org.joda.time.DateTime', 'java.time.ZoneId', 'java.time.ZonedDateTime', 'java.time.temporal.ChronoUnit']","public class jt14 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""America/Montreal"" );
        ZonedDateTime start = ZonedDateTime.of( 2017 , 1 , 17 , 14 , 45 , 0 , 0 , z );
        ZonedDateTime stop = ZonedDateTime.of( 2017 , 1 , 17 , 15 , 12 , 0 , 0 , z );

}
",jt14.java
"package java.joda_time;

import java.util.Calendar;
import java.util.TimeZone;

public class jt15 {
    public static void h1(long timestamp1, long timestamp2){
        Calendar startDate = Calendar.getInstance(TimeZone.getDefault());
        Calendar endDate = Calendar.getInstance(TimeZone.getDefault());
    }
}
",True,"['Calendar', 'TimeZone']","['java.util.Calendar', 'java.util.TimeZone']","public class jt15 {
    public static void h1(long timestamp1, long timestamp2){
        Calendar startDate = Calendar.getInstance(TimeZone.getDefault());
        Calendar endDate = Calendar.getInstance(TimeZone.getDefault());

}
",jt15.java
"package java.joda_time;

import org.joda.time.DateTime;

import java.util.concurrent.TimeUnit;

public class jt16 {
    public static int getDaysBetween(DateTime earlier, DateTime later)
    {
        return (int) TimeUnit.MILLISECONDS.toDays(later.getMillis()- earlier.getMillis());
    }

}
",True,"['DateTime', 'TimeUnit']","['org.joda.time.DateTime', 'java.util.concurrent.TimeUnit']","public class jt16 {
    public static int getDaysBetween(DateTime earlier, DateTime later)
    {
        return (int) TimeUnit.MILLISECONDS.toDays(later.getMillis()- earlier.getMillis());
    }


",jt16.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import java.util.Locale;

public class jt17 {
    public static void h1(){
        String dateTime = ""2015-07-18T13:32:56.971-0400"";

        DateTimeFormatter formatter = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSZZ"")
                .withLocale(Locale.ROOT)
                .withChronology(ISOChronology.getInstanceUTC());
        DateTime dt = formatter.parseDateTime(dateTime);
    }
}
",True,"['DateTime', 'ISOChronology', 'DateTimeFormat', 'DateTimeFormatter', 'Locale']","['org.joda.time.DateTime', 'org.joda.time.chrono.ISOChronology', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'java.util.Locale']","public class jt17 {
    public static void h1(){
        String dateTime = ""2015-07-18T13:32:56.971-0400"";

        DateTimeFormatter formatter = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSZZ"")
                .withLocale(Locale.ROOT)
                .withChronology(ISOChronology.getInstanceUTC());
        DateTime dt = formatter.parseDateTime(dateTime);

}
",jt17.java
"package java.joda_time;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class jt18 {
    public static void h1() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy HH:mm:ss""); //  04/02/2011 20:27:05

        Date date = sdf.parse(""dateValue"");
        System.out.println(date);
    }
}
",True,"['ParseException', 'SimpleDateFormat', 'Date']","['java.text.ParseException', 'java.text.SimpleDateFormat', 'java.util.Date']","public class jt18 {
    public static void h1() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy HH:mm:ss""); //  04/02/2011 20:27:05

        Date date = sdf.parse(""dateValue"");
        System.out.println(date);
    }

",jt18.java
"package java.joda_time;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class jt19 {
   public static void h1(){
      String input = ""04/02/2011 20:27:05"" ;
      DateTimeFormatter f = DateTimeFormatter.ofPattern( ""dd/MM/uuuu HH:mm:ss"" ) ;
      LocalDateTime ldt = LocalDateTime.parse( input , f ) ;
   }
}
",True,"['LocalDateTime', 'DateTimeFormatter']","['java.time.LocalDateTime', 'java.time.format.DateTimeFormatter']","public class jt19 {
   public static void h1(){
      String input = ""04/02/2011 20:27:05"" ;
      DateTimeFormatter f = DateTimeFormatter.ofPattern( ""dd/MM/uuuu HH:mm:ss"" ) ;
      LocalDateTime ldt = LocalDateTime.parse( input , f ) ;

}
",jt19.java
"package java.joda_time;

import org.joda.time.LocalDate;
import org.joda.time.MutableDateTime;

import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;

public class jt20 {
    public static void h1(){
        long date = 0;
        MutableDateTime dateTime = new MutableDateTime(date);
        dateTime.addDays(1);
    }
}
",True,"['LocalDate', 'MutableDateTime', 'DateTimeFormatter', 'DateTimeFormatterBuilder']","['org.joda.time.LocalDate', 'org.joda.time.MutableDateTime', 'java.time.format.DateTimeFormatter', 'java.time.format.DateTimeFormatterBuilder']","public class jt20 {
    public static void h1(){
        long date = 0;
        MutableDateTime dateTime = new MutableDateTime(date);
        dateTime.addDays(1);

}
",jt20.java
"package java.joda_time;

import org.joda.time.DateTime;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class jt3 {
    public static void f1(){
        LocalDateTime java8LocalDateTime = LocalDateTime.now();
        ZonedDateTime java8ZonedDateTime = java8LocalDateTime.atZone(ZoneId.systemDefault());
        Instant java8Instant = java8ZonedDateTime.toInstant();
    }



}
",True,"['DateTime', 'Instant', 'LocalDateTime', 'ZoneId', 'ZonedDateTime']","['org.joda.time.DateTime', 'java.time.Instant', 'java.time.LocalDateTime', 'java.time.ZoneId', 'java.time.ZonedDateTime']","public class jt3 {
    public static void f1(){
        LocalDateTime java8LocalDateTime = LocalDateTime.now();
        ZonedDateTime java8ZonedDateTime = java8LocalDateTime.atZone(ZoneId.systemDefault());
        Instant java8Instant = java8ZonedDateTime.toInstant();




}
",jt3.java
"package java.joda_time;

import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Period;

public class jt4 {
    public static boolean isLonger(Period p1, Period p2) {
        Instant now = Instant.now();
        Duration d1 = p1.toDurationTo(now);
        Duration d2 = p2.toDurationTo(now);
        return d1.isLongerThan(d2);
    }
}
",True,"['Duration', 'Instant', 'Period']","['org.joda.time.Duration', 'org.joda.time.Instant', 'org.joda.time.Period']","public class jt4 {
    public static boolean isLonger(Period p1, Period p2) {
        Instant now = Instant.now();
        Duration d1 = p1.toDurationTo(now);
        Duration d2 = p2.toDurationTo(now);
        return d1.isLongerThan(d2);

}
",jt4.java
"package java.joda_time;

import java.time.ZoneId;
import java.time.ZonedDateTime;

public class jt5 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""America/Montreal"" );
        ZonedDateTime start = ZonedDateTime.of( 2017 , 1 , 17 , 14 , 45 , 0 , 0 , z );
    }
}
",True,"['ZoneId', 'ZonedDateTime']","['java.time.ZoneId', 'java.time.ZonedDateTime']","public class jt5 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""America/Montreal"" );
        ZonedDateTime start = ZonedDateTime.of( 2017 , 1 , 17 , 14 , 45 , 0 , 0 , z );
    }

",jt5.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

public class jt6 {
    public static void h1(){
        DateTimeFormatter format = DateTimeFormat.forPattern(""dd/MM/yyyy HH:mm:ss"");
        DateTime time = format.parseDateTime(""04/02/2011 20:27:05"");
    }
}
",True,"['DateTime', 'Period', 'DateTimeFormat', 'DateTimeFormatter']","['org.joda.time.DateTime', 'org.joda.time.Period', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter']","public class jt6 {
    public static void h1(){
        DateTimeFormatter format = DateTimeFormat.forPattern(""dd/MM/yyyy HH:mm:ss"");
        DateTime time = format.parseDateTime(""04/02/2011 20:27:05"");

}
",jt6.java
"package java.joda_time;

import org.joda.time.DateTime;
import org.joda.time.Days;

import java.util.Calendar;
import java.util.Date;

public class jt7 {
    public static void h1(){
        Calendar calendar1 = Calendar.getInstance();
        long milliseconds1 = calendar1.getTimeInMillis();
    }

}
",True,"['DateTime', 'Days', 'Calendar', 'Date']","['org.joda.time.DateTime', 'org.joda.time.Days', 'java.util.Calendar', 'java.util.Date']","public class jt7 {
    public static void h1()
        Calendar calendar1 = Calendar.getInstance();
        long milliseconds1 = calendar1.getTimeInMillis();
    }

}
",jt7.java
"package java.joda_time;

import org.joda.time.DateTime;

import java.util.Calendar;

public class jt8 {
    public static  int getFirstDayOfWeek() {
        return ((Calendar.getInstance().getFirstDayOfWeek() + 5) % 7) + 1;
    }

}
",True,"['DateTime', 'Calendar']","['org.joda.time.DateTime', 'java.util.Calendar']","public class jt8 {
    public static  int getFirstDayOfWeek() {
        return ((Calendar.getInstance().getFirstDayOfWeek() + 5) % 7) + 1;


}
",jt8.java
"package java.joda_time;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;

public class jt9 {
    public static void h1() {
        LocalDate today = LocalDate.now();
        ZonedDateTime zdt = today.atStartOfDay().atZone(ZoneId.systemDefault());
        OffsetDateTime odt = zdt.toOffsetDateTime();
    }
}
",True,"['LocalDate', 'OffsetDateTime', 'ZoneId', 'ZonedDateTime']","['java.time.LocalDate', 'java.time.OffsetDateTime', 'java.time.ZoneId', 'java.time.ZonedDateTime']","public class jt9 {
    public static void h1()
        LocalDate today = LocalDate.now();
        ZonedDateTime zdt = today.atStartOfDay().atZone(ZoneId.systemDefault());
        OffsetDateTime odt = zdt.toOffsetDateTime();
    }
}
",jt9.java
"package java.xstream;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.Dom4JDriver;
import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder;


public class xt1 {
    public static void h1(){
        XmlFriendlyNameCoder nameCoder = new XmlFriendlyNameCoder(""ddd"", ""_"");
        XStream xmlStream = new XStream(new Dom4JDriver(nameCoder));
    }
}
",True,"['XStream', 'Dom4JDriver', 'XmlFriendlyNameCoder']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.Dom4JDriver', 'com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder']","public class xt1 {
    public static void h1()
        XmlFriendlyNameCoder nameCoder = new XmlFriendlyNameCoder(""ddd"", ""_"");
        XStream xmlStream = new XStream(new Dom4JDriver(nameCoder));
    }
}
",xt1.java
"package java.xstream;

import org.w3c.dom.Node;

import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

public class xt11 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        Node doc = null;
        Source xmlSource = new DOMSource(doc);
    }
}
",True,"['Node', 'Result', 'Source', 'TransformerException', 'TransformerFactory', 'DOMSource', 'StreamResult', 'ByteArrayInputStream', 'ByteArrayOutputStream', 'InputStream']","['org.w3c.dom.Node', 'javax.xml.transform.Result', 'javax.xml.transform.Source', 'javax.xml.transform.TransformerException', 'javax.xml.transform.TransformerFactory', 'javax.xml.transform.dom.DOMSource', 'javax.xml.transform.stream.StreamResult', 'java.io.ByteArrayInputStream', 'java.io.ByteArrayOutputStream', 'java.io.InputStream']","public class xt11 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        Node doc = null;
        Source xmlSource = new DOMSource(doc);
    }

",xt11.java
"package java.xstream;

import javax.xml.transform.Result;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayOutputStream;

public class xt12 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            Transformer t = TransformerFactory.newInstance().newTransformer();
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
        }
    }
}
",True,"['Result', 'Transformer', 'TransformerConfigurationException', 'TransformerFactory', 'StreamResult', 'ByteArrayOutputStream']","['javax.xml.transform.Result', 'javax.xml.transform.Transformer', 'javax.xml.transform.TransformerConfigurationException', 'javax.xml.transform.TransformerFactory', 'javax.xml.transform.stream.StreamResult', 'java.io.ByteArrayOutputStream']","public class xt12 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try
            Transformer t = TransformerFactory.newInstance().newTransformer();
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
        }
    }
}
",xt12.java
"package java.xstream;

import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

public class xt13 {
    public static void h1() throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        XMLWriter xmlWriter = new XMLWriter(outputStream, OutputFormat.createPrettyPrint());
        Object doc = null;
    }
}
",True,"['OutputFormat', 'XMLWriter', 'ByteArrayOutputStream', 'IOException', 'UnsupportedEncodingException']","['org.dom4j.io.OutputFormat', 'org.dom4j.io.XMLWriter', 'java.io.ByteArrayOutputStream', 'java.io.IOException', 'java.io.UnsupportedEncodingException']","public class xt13 {
    public static void h1() throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        XMLWriter xmlWriter = new XMLWriter(outputStream, OutputFormat.createPrettyPrint());
        Object doc = null;
    }

",xt13.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public abstract class xt14 {
    public static void h1(){
    final XStream stream = new XStream(new DomDriver());
    }
}
",True,"['XStream', 'DomDriver']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver']","public abstract class xt14 {
    public static void h1(){
    final XStream stream = new XStream(new DomDriver())
    }
}
",xt14.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class xt15 {
    private void generateResponse(final XStream xStream) {
        XStream xstream = new XStream(new DomDriver());
        StringBuffer contents = new StringBuffer();
    }
}
",True,"['XStream', 'DomDriver']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver']","public class xt15 {
    private void generateResponse(final XStream xStream) {
        XStream xstream = new XStream(new DomDriver());
        StringBuffer contents = new StringBuffer();

}
",xt15.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import com.thoughtworks.xstream.mapper.CannotResolveClassException;
import com.thoughtworks.xstream.mapper.MapperWrapper;
import org.dom4j.persistence.DocumentMarshalling;

import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.StringWriter;

public class xt16 {
    public static Object Load(String xmlPath) {
        File FileIn = new File(xmlPath);
        if(FileIn.exists()) {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            return null;
        }
        return null;
    }
}",True,"['XStream', 'DomDriver', 'CannotResolveClassException', 'MapperWrapper', 'DocumentMarshalling', 'DocumentBuilderFactory', 'File', 'StringWriter']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'com.thoughtworks.xstream.mapper.CannotResolveClassException', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'org.dom4j.persistence.DocumentMarshalling', 'javax.xml.parsers.DocumentBuilderFactory', 'java.io.File', 'java.io.StringWriter']","public class xt16 {
    public static Object Load(String xmlPath) {
        File FileIn = new File(xmlPath);
        if(FileIn.exists()) {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            return null;

        return null;
    }
}",xt16.java
"package java.xstream;

import com.google.android.gms.plus.model.people.Person;
import com.thoughtworks.xstream.XStream;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;

public class xt17 {
    public static void h1(String xmlPath) throws ParserConfigurationException, IOException, SAXException {
        File FileIn = new File(xmlPath);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
    }
}
",True,"['Person', 'XStream', 'Document', 'SAXException', 'DocumentBuilder', 'DocumentBuilderFactory', 'ParserConfigurationException', 'File', 'IOException']","['com.google.android.gms.plus.model.people.Person', 'com.thoughtworks.xstream.XStream', 'org.w3c.dom.Document', 'org.xml.sax.SAXException', 'javax.xml.parsers.DocumentBuilder', 'javax.xml.parsers.DocumentBuilderFactory', 'javax.xml.parsers.ParserConfigurationException', 'java.io.File', 'java.io.IOException']","public class xt17 {
    public static void h1(String xmlPath) throws ParserConfigurationException, IOException, SAXException {
        File FileIn = new File(xmlPath);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();

}
",xt17.java
"package java.xstream;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

public class xt18 {
    public static void h1(){}
    XPathFactory xPathFactory = XPathFactory.newInstance();
    XPath xpath = xPathFactory.newXPath();

}
",True,"['XPath', 'XPathFactory']","['javax.xml.xpath.XPath', 'javax.xml.xpath.XPathFactory']","public class xt18 {
    public static void h1(){
    XPathFactory xPathFactory = XPathFactory.newInstance();
    XPath xpath = xPathFactory.newXPath();

}
",xt18.java
"package java.xstream;

import java.util.ArrayList;
import java.util.List;

public class xt19 {
    public List<String> tags = new ArrayList<String>();
    public List<String> notags = new ArrayList<String>();

}
",True,"['ArrayList', 'List']","['java.util.ArrayList', 'java.util.List']","public class xt19 {
    public List<String> tags = new ArrayList<String>();
    public List<String> notags = new ArrayList<String>();


",xt19.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.naming.NoNameCoder;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class xt2 {
    public  static void h1(){
        XStream xstream = new XStream(new DomDriver(""UTF_8"", new NoNameCoder()));
    }
}
",True,"['XStream', 'NoNameCoder', 'DomDriver']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.naming.NoNameCoder', 'com.thoughtworks.xstream.io.xml.DomDriver']","public class xt2 {
    public  static void h1()
        XStream xstream = new XStream(new DomDriver(""UTF_8"", new NoNameCoder()));
    }
}
",xt2.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.collections.CollectionConverter;
import com.thoughtworks.xstream.mapper.ClassAliasingMapper;
import junit.framework.Test;

public class xt20 {
    public static void h1(){
        XStream xstream = new XStream();
        ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
        xstream.registerLocalConverter(Test.class, ""tags"", new CollectionConverter(mapper));
    }
}
",True,"['XStream', 'CollectionConverter', 'ClassAliasingMapper', 'Test']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.converters.collections.CollectionConverter', 'com.thoughtworks.xstream.mapper.ClassAliasingMapper', 'junit.framework.Test']","public class xt20 {
    public static void h1()
        XStream xstream = new XStream();
        ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
        xstream.registerLocalConverter(Test.class, ""tags"", new CollectionConverter(mapper));
    }
}
",xt20.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;

import java.io.StringWriter;

public class xt3 {
    public static void h1(){
        String strXML = """";
        XStream xs = new XStream();
        StringWriter sw = new StringWriter();
    }
}
",True,"['XStream', 'StringWriter']","['com.thoughtworks.xstream.XStream', 'java.io.StringWriter']","public class xt3 {
    public static void h1(){
        String strXML = """"
        XStream xs = new XStream();
        StringWriter sw = new StringWriter();
    }
}
",xt3.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;

import javax.swing.text.html.parser.Entity;
import java.util.Arrays;

public class xt4 {
    public static void h1(){
        XStream xstream = new XStream(new JettisonMappedXmlDriver());
        xstream.alias(""entity"", Entity[].class);
    }
}
",True,"['XStream', 'JettisonMappedXmlDriver', 'Entity', 'Arrays']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver', 'javax.swing.text.html.parser.Entity', 'java.util.Arrays']","public class xt4 {
    public static void h1(){
        XStream xstream = new XStream(new JettisonMappedXmlDriver());
        xstream.alias(""entity"", Entity[].class);

}
",xt4.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import org.hibernate.envers.tools.query.Parameters;

import java.io.FileReader;
import java.util.Properties;

public class xt5 {
    public static void h1(){
        XStream xstream = new XStream();
        xstream.processAnnotations(Properties.class);
    }
}
",True,"['XStream', 'Parameters', 'FileReader', 'Properties']","['com.thoughtworks.xstream.XStream', 'org.hibernate.envers.tools.query.Parameters', 'java.io.FileReader', 'java.util.Properties']","public class xt5 {
    public static void h1()
        XStream xstream = new XStream();
        xstream.processAnnotations(Properties.class);
    }
}
",xt5.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;

public class xt6 {
    public static void h1(){
        JettisonMappedXmlDriver xmlDriver = new JettisonMappedXmlDriver();
        XStream xstream = new XStream(xmlDriver);
    }
}
",True,"['XStream', 'JettisonMappedXmlDriver']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver']","public class xt6 {
    public static void h1(){
        JettisonMappedXmlDriver xmlDriver = new JettisonMappedXmlDriver();
        XStream xstream = new XStream(xmlDriver);

}
",xt6.java
"package java.xstream;

import com.thoughtworks.xstream.XStream;

import javax.swing.text.Position;

public class xt7 {
    public static void h1(){
        XStream xstream = new XStream();
        xstream.autodetectAnnotations(true);

    }
}
",True,"['XStream', 'Position']","['com.thoughtworks.xstream.XStream', 'javax.swing.text.Position']","public class xt7 {
    public static void h1()
        XStream xstream = new XStream();
        xstream.autodetectAnnotations(true);

    }
}
",xt7.java
"package java.xstream;
import javax.xml.stream.events.Comment;
import java.util.ArrayList;
import java.util.List;

public class xt8 {
    public  void h1(){
        List<Comment> comments = new ArrayList<Comment>();

    }
}
",True,"['Comment', 'ArrayList', 'List']","['javax.xml.stream.events.Comment', 'java.util.ArrayList', 'java.util.List']","public class xt8 {
    public  void h1(){
        List<Comment> comments = new ArrayList<Comment>();


}
",xt8.java
"package java.xstream;

import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayOutputStream;

public class xt9 {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    Result outputTarget = new StreamResult(outputStream);
    Transformer t = TransformerFactory.newInstance().newTransformer();
    public xt9() throws TransformerConfigurationException {
    }
}
",True,"['*', 'StreamResult', 'ByteArrayOutputStream']","['javax.xml.transform.*', 'javax.xml.transform.stream.StreamResult', 'java.io.ByteArrayOutputStream']","public class xt9 {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    Result outputTarget = new StreamResult(outputStream);
    Transformer t = TransformerFactory.newInstance().newTransformer();
    public xt9() throws TransformerConfigurationException {

}
",xt9.java
