code,Ground_Truth_Simple_Names,Ground_Truth_FQNs
"public class JodaTime24 {

	public static String getFormattedDateDifference(DateTime startDate, DateTime endDate) {
		Period p = new Period(startDate, endDate, PeriodType.standard().withSecondsRemoved().withMillisRemoved());
		return PeriodFormat.getDefault().print(p)
	}
}","['DateTime', 'Period', 'PeriodType', 'PeriodFormat']","['org.joda.time.DateTime', 'org.joda.time.Period', 'org.joda.time.PeriodType', 'org.joda.time.format.PeriodFormat']"
"public class JodaTime01 {
	public static void main(String[] args) {

		DateTimeFormatter timeParser = ISODateTimeFormat.timeParser();
//		Prompt: DateTimeFormatter timeParser = <mask><mask><mask>.timeParser();
		TimeZone timeZone = TimeZone.getDefault();
		System.out.println(timeZone.getID());
		System.out.println(timeZone.getDisplayName());

		DateTimeZone defaultTimeZone = DateTimeZone.getDefault();
		System.out.println(defaultTimeZone.getID());
		System.out.println(defaultTimeZone.getName(0L));

		DateTime currentTime = new DateTime();
		DateTimeZone currentZone = currentTime.getZone();
		System.out.println(currentZone.getID());
		System.out.println(currentZone.getName(0L));
	}
","['DateTimeFormatter', 'ISODateTimeFormat', 'TimeZone', 'DateTimeZone', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.ISODateTimeFormat', 'java.util.TimeZone', 'org.joda.time.DateTimeZone', 'org.joda.time.DateTime']"
"public class hibernate_class_50 {
	private SessionFactory sessionFactory;

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	public SessionFactory getSessionFactory() {
		return sessionFactory
	}

	@SuppressWarnings(""unchecked"")
	public List<Name> getAll() {
		Session session = this.sessionFactory.getCurrentSession();
		List<Name> names = (List<Name>) session.createQuery(""from Name"").list();
		return names;
	}

	public void save(Name name) {
		Session session = this.sessionFactory.getCurrentSession();
		session.saveOrUpdate(name);
		session.flush();
	}
}","['List', 'Session', 'SessionFactory', 'Name']","['java.util.List', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'javax.naming.Name']"
"public class JodaTime38 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String dateTime = ""11/15/2013 08:00:00"";

		DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");

		DateTime jodatime = dtf.parseDateTime(dateTime);

		DateTimeFormatter dtfOut = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		System.out.println(dtfOut.print(jodatime)
	}

}","['String', 'DateTimeFormatter', 'DateTime', 'DateTimeFormat']","['java.lang.String', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime', 'org.joda.time.format.DateTimeFormat']"
"public class hibernate_class_25 {
	@Entity
	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}

		@OneToOne(cascade = CascadeType.ALL)
		public B getB() {
			return b
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}
}","['@Entity', '@Id', '@GeneratedValue', '@OneToOne', 'CascadeType']","['javax.persistence.Entity', 'javax.persistence.Id', 'javax.persistence.GeneratedValue', 'javax.persistence.OneToOne', 'javax.persistence.CascadeType']"
"public class jdk17 {
    private static InputStream stream;
    public static void h1() throws IOException {
        int bufferSize = 1024
        char[] buffer = new char[bufferSize];
        Reader in = new InputStreamReader(stream, StandardCharsets.UTF_8);
    }
}
","['InputStream', 'IOException', 'Reader', 'InputStreamReader', 'StandardCharsets']","['java.io.InputStream', 'java.io.IOException', 'java.io.Reader', 'java.io.InputStreamReader', 'java.nio.charset.StandardCharsets']"
"public class hibernate_class_37 {

	public static void test() {
		String c = """";
		Session session = HibernateUtil.getSession();
		session.beginTransaction();
		session.save(c);
		session.getTransaction().commit()

	}


	public static void main(String[] args) {
		hibernate_class_37.test();

	}

	public static class HibernateUtil {

		private static final SessionFactory sessionFactory;
		static {
			try {
				sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
			} catch (Throwable ex) {

				throw new ExceptionInInitializerError(ex);
			}
		}

		public static Session getSession() throws HibernateException {
			return sessionFactory.openSession();
		}
	}

}","['String', 'Session', 'HibernateUtil', 'SessionFactory', 'AnnotationConfiguration', 'HibernateException']","['java.lang.String', 'org.hibernate.Session', 'hibernate_class_37.HibernateUtil', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'org.hibernate.HibernateException']"
"public class Class_18 {
	public static String dump(Object o, int callCount) {
		callCount++;
		StringBuffer tabs = new StringBuffer();
		for (int k = 0; k < callCount; k++) {
			tabs.append(""\t"");

		StringBuffer buffer = new StringBuffer();
		Class oClass = o.getClass();
		if (oClass.isArray()) {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""["");
			for (int i = 0; i < Array.getLength(o); i++) {
				if (i < 0)
					buffer.append("","");
				Object value = Array.get(o, i);
				if (value.getClass().isPrimitive() || value.getClass() == Long.class
						|| value.getClass() == String.class || value.getClass() == Integer.class
						|| value.getClass() == Boolean.class) {
					buffer.append(value);
				} else {
					buffer.append(dump(value, callCount));
				}
			}
			buffer.append(tabs.toString());
			buffer.append(""]\n"");
		} else {
			buffer.append(""\n"");
			buffer.append(tabs.toString());
			buffer.append(""{\n"");
			while (oClass != null) {
				Field[] fields = oClass.getDeclaredFields();
				for (int i = 0; i < fields.length; i++) {
					buffer.append(tabs.toString());
					fields[i].setAccessible(true);
					buffer.append(fields[i].getName());
					buffer.append(""="");
					try {
						Object value = fields[i].get(o);
						if (value != null) {
							if (value.getClass().isPrimitive() || value.getClass() == Long.class
									|| value.getClass() == String.class
									|| value.getClass() == Integer.class
									|| value.getClass() == Boolean.class) {
								buffer.append(value);
							} else {
								buffer.append(dump(value, callCount));
							}
						}
					} catch (IllegalAccessException e) {
						buffer.append(e.getMessage());
					}
					buffer.append(""\n"");
				}
				oClass = oClass.getSuperclass();
			}
			buffer.append(tabs.toString());
			buffer.append(""}\n"");
		}
		return buffer.toString();
	}
}","['Object', 'StringBuffer', 'Array', 'Class', 'Field', 'IllegalAccessException']","['java.lang.Object', 'java.lang.StringBuffer', 'java.lang.reflect.Array', 'java.lang.Class', 'java.lang.reflect.Field', 'java.lang.IllegalAccessException']"
"public class gt9
    public String format(Date date)
    {
        return DateTimeFormat.getFormat(""yyyyMMdd"").format(date);
    }
}
","['Date', 'DateTimeFormat']","['java.util.Date', 'com.google.gwt.i18n.client.DateTimeFormat']"
"public class Android08 {

	private static final String TAG = ""TAG"";

	public static void main(String[] args) {


		try {
			InetAddress server = Inet4Address.getByName(""thehost"");


			if (server.isReachable(5000)) {
				Log.d(TAG, ""Ping!"")
			}

			Socket clientsocket = new Socket(server, 8080);
		} catch (UnknownHostException e) {
			Log.e(TAG, ""Server Not Found"");
		} catch (IOException e) {
			Log.e(TAG, ""Couldn't open socket"");
		}
	}

}","['String', 'TAG', 'InetAddress', 'Inet4Address', 'Socket', 'UnknownHostException', 'IOException', 'Log']","['java.lang.String', 'java.net.InetAddress', 'java.net.Inet4Address', 'java.net.Socket', 'java.net.UnknownHostException', 'java.io.IOException', 'android.util.Log']"
"public class JodaTime26 {

	public static void main(String[] args) {
		Duration duration = new Duration(1328223198241L - 1326308781131L);
		Period p2 = new Period(duration.getMillis());
		System.out.println(p2.getDays())
		System.out.println(p2.getHours());
	}

}","['Duration', 'Period']","['org.joda.time.Duration', 'org.joda.time.Period']"
"public class xstream_class_26 {
	public class IntegerListConverter implements SingleValueConverter {
		@Override
		public boolean canConvert(Class clazz)
			return List.class.isAssignableFrom(clazz);
		}

		@Override
		public Object fromString(String arg0) {
			Collection<Integer> collection = new ArrayList<Integer>();
			String[] integerStrings = arg0.split("" "");
			for (int i = 0; i < integerStrings.length; i++) {
				collection.add(Integer.valueOf(integerStrings[i]));
			}
			return collection;
		}

		@Override
		public String toString(Object arg0) {
			List collection = (List) arg0;
			StringBuffer sb = new StringBuffer();
			boolean first = true;
			for (Object object : collection) {
				if (first) {
					first = false;
				} else {
					sb.append(' ');
				}
				sb.append(object.toString());
			}
			return sb.toString();
		}
	}
}","['List', 'Collection', 'ArrayList', 'SingleValueConverter', 'Class', 'String', 'Object', 'Boolean', 'Integer']","['java.util.List', 'java.util.Collection', 'java.util.ArrayList', 'com.thoughtworks.xstream.converters.SingleValueConverter', 'java.lang.Class', 'java.lang.String', 'java.lang.Object', 'java.lang.Boolean', 'java.lang.Integer']"
"public class xstream_class_40 implements Converter {

	@SuppressWarnings(""rawtypes"")
	@Override
	public boolean canConvert(Class clazz) {
		return clazz.equals(Integer.class);
	}

	@Override
	public void marshal(Object object, HierarchicalStreamWriter writer, MarshallingContext context) {
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
		String text = (String) reader.getValue();
		Integer number = Integer.parseInt(text.trim());
		return number
	}
}","['Converter', 'Class', 'HierarchicalStreamWriter', 'MarshallingContext', 'Object', 'HierarchicalStreamReader', 'UnmarshallingContext', 'String', 'Integer']","['com.thoughtworks.xstream.converters.Converter', 'java.lang.Class', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.MarshallingContext', 'java.lang.Object', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'java.lang.String', 'java.lang.Integer']"
"public class hb5 {
    @Test
    public void textTx() {
        SessionFactory sessionFactory = null;
        Session session = null;
        Transaction tx

    }
}

","['Test', 'SessionFactory', 'Session', 'Transaction']","['org.junit.Test', 'org.hibernate.SessionFactory', 'org.hibernate.Session', 'org.hibernate.Transaction']"
"public class hibernate_class_26 {
	private SessionFactory sessionFactory;

	public static void main(String[] args) {
		hibernate_class_26 d = new hibernate_class_26();
		d.run3()
	}

	public void run3() {

		Session session = getSession();
		session.beginTransaction();

		createEntities(session);

		session.getTransaction().commit();

		System.out.println(""NOW WITH A NEW TRANSACTION"");
		session = getSession();
		session.beginTransaction();

		Query query = session.createQuery(""from A"");
		List results = query.list();
		for (int i = 0; i < results.size(); i++) {
			System.out.println(""Row "" + i + "" was:"");
			A a = (A) results.get(i);
			System.out.println(""Result "" + i);
			System.out.println(a.toString())
		}

		session.getTransaction().commit();

	}

	public void createEntities(Session session) {
		for (int i = 0; i < 2; i++) {
			A a = new A();

			B b = new B();

			a.setB(b);

			session.save(a);

		}

	}

	public Session getSession() {
		if (sessionFactory == null) {
			AnnotationConfiguration config = new AnnotationConfiguration();
			config.addAnnotatedClass(A.class);
			config.addAnnotatedClass(B.class);
			config.configure();
			new SchemaExport(config).create(true, true);

			sessionFactory = config.buildSessionFactory();
		}
		Session session = sessionFactory.getCurrentSession();

		return session;
	}

	public class A {

		private Integer id;
		private B b;

		public A() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}


		public B getB() {
			return b;
		}

		public void setB(B b) {
			this.b = b;
		}
	}

	@Entity
	public class B {

		private Integer id;

		public B() {
			super();
		}

		@Id
		@GeneratedValue
		public Integer getId() {
			return id;
		}

		public void setId(Integer id) {
			this.id = id;
		}
	}

}","['Fetch', 'Entity', 'SessionFactory', 'AnnotationConfiguration', 'List', 'GeneratedValue', 'Session', 'CascadeType', 'OneToOne', 'SchemaExport', 'FetchMode', 'Query', 'Id']","['org.hibernate.annotations.Fetch', 'org.hibernate.annotations.Entity', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'java.util.List', 'javax.persistence.GeneratedValue', 'org.hibernate.Session', 'org.hibernate.annotations.CascadeType', 'javax.persistence.OneToOne', 'org.hibernate.tool.hbm2ddl.SchemaExport', 'org.hibernate.FetchMode', 'org.hibernate.Query', 'javax.persistence.Id']"
"public class xt19 {
    public List<String> tags = new ArrayList<String>();
    public List<String> notags = new ArrayList<String>();


","['List', 'ArrayList']","['java.util.List', 'java.util.ArrayList']"
"public class jt1 {
    public static void f1(){
        DateTimeFormatter dtf = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss"");
        DateTime jodatime = dtf.parseDateTime("""");


}
","['DateTimeFormatter', 'DateTimeFormat', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime']"
"public class ad5 {
    public static void h1(){
        Bundle args = new Bundle();
        args.putInt(""someInt"", 328);
        args.putString(""someString"", ""jackson"");

}
",['Bundle'],['android.os.Bundle']
"public class hb6 {
    public static  void h1()
        Configuration config = new Configuration().configure();
        SessionFactory sessionFactory = config.buildSessionFactory();
    }
}
","['Configuration', 'SessionFactory']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']"
"public class hibernate_class_9 implements Serializable {
	private int patientId;
	private String patientName;
	private String providerId; // foreign key to provider

	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_9 PatientInfo = new hibernate_class_9();

		PatientInfo.setPatientId(Integer.parseInt(values.get(0)));
		PatientInfo.setPatientName(values.get(1));
		PatientInfo.setProviderId(values.get(2));

		session.save(PatientInfo)
	}


	public int getPatientId() {
		return patientId;
	}


	public void setPatientId(int PatientId) {
		this.patientId = PatientId;
	}


	public String getPatientName() {
		return this.patientName;
	}


	public void setPatientName(String PatientName) {
		this.patientName = PatientName;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}


	public String getProvider() {
		return this.providerId;
	}

	public void setProvider(String id) {
		this.providerId = id;
	}


	public static void main(String[] args) {

	}
}","['Serializable', 'Session', 'List', 'hibernate_class_9']","['java.io.Serializable', 'org.hibernate.Session', 'java.util.List', 'packageName.hibernate_class_9']"
"public class hb20 {
    private static HibernateUtil HibernateUtils;

    public static void h1(){
        Transaction tx = null;
        FragmentManager session = null
        tx = (Transaction) session.beginTransaction();

    }
}
","['FragmentManager', 'HibernateUtil', 'Transaction']","['android.app.FragmentManager', 'net.sf.gilead.core.hibernate.HibernateUtil', 'org.hibernate.Transaction']"
"public class Android29 extends Service {

	@Override
	public IBinder onBind(Intent arg0) {

		return null;
	}

	@Override
	public void onCreate() {
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
		wl.acquire();
	}

	@Override
	public void onDestroy() {
		PowerManager.WakeLock wl = null;
		wl.release()
	}

}","['Service', 'IBinder', 'Intent', 'PowerManager', 'WakeLock', 'Context']","['android.app.Service', 'android.os.IBinder', 'android.content.Intent', 'android.os.PowerManager', 'android.os.PowerManager.WakeLock', 'android.content.Context']"
"public class hibernate_class_6 {

	public static void main(final String[] args) throws MalformedURLException {
		File baseDir = new File(""C:\\workspaces\\hobby"");
		hibernate_class_6 importer = new hibernate_class_6();
		Configuration config = importer.setupDb(baseDir);

		if (config != null)
			importer.importContents(new File(baseDir, ""people.xml""), config);
		}
	}

	private void importContents(final File file, final Configuration config) throws MalformedURLException {
		SessionFactory sessionFactory = config.buildSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();
		Session dom4jSession = session.getSession(EntityMode.DOM4J);

		SAXReader saxReader = new SAXReader();
		try {
			Document document = saxReader.read(file);

			List list = document.selectNodes(""//Person"");
			Iterator iter = list.iterator();

			while (iter.hasNext()) {
				Object personObj = iter.next();

			}

			session.flush();
			tx.commit();
			session.close();
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
	}

	private Configuration setupDb(final File baseDir) throws HibernateException {
		Configuration cfg = new Configuration();
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Person.hbm.xml""));
		cfg.addFile(new File(baseDir, ""name/seller/rich/hobby/Hobby.hbm.xml""));

		SchemaExport export = new SchemaExport(cfg);

		export.setOutputFile(""hobbyDB.txt"");
		export.execute(false, true, false, false);
		return cfg;
	}
}","['File', 'Configuration', 'SessionFactory', 'Session', 'Transaction', 'EntityMode', 'SAXReader', 'Document', 'List', 'Iterator', 'HibernateException', 'DocumentException', 'SchemaExport']","['java.io.File', 'org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.Session', 'org.hibernate.Transaction', 'org.hibernate.EntityMode', 'org.dom4j.io.SAXReader', 'org.dom4j.Document', 'java.util.List', 'java.util.Iterator', 'org.hibernate.HibernateException', 'org.dom4j.DocumentException', 'org.hibernate.tool.hbm2ddl.SchemaExport']"
"public class JodaTime44 {

	public static void main(String[] args) {
		PeriodFormatter daysHoursMinutes = new PeriodFormatterBuilder().appendDays().appendSuffix("" day"", "" days"")
				.appendSeparator("" and "").appendMinutes().appendSuffix("" minute"", "" minutes"").appendSeparator("" and "")
				.appendSeconds().appendSuffix("" second"", "" seconds"").toFormatter();

		Period period = new Period(72, 24, 12, 0)

		System.out.println(daysHoursMinutes.print(period));
		System.out.println(daysHoursMinutes.print(period.normalizedStandard()));
	}

}","['PeriodFormatterBuilder', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']"
"public class JodaTime22 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public String getDateFromDateTime(Date date, Boolean display) throws ParseException {

		DateTimeFormatter dtFormatter

		if (display)
			dtFormatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");
		else
			dtFormatter = DateTimeFormat.forPattern(""yyyy-MM-dd"");

		DateTime dt = new DateTime(date);
		String myDate = dt.toString(dtFormatter);

		System.out.println(
				""OrderDisplayUtil.java:getDateFromDateTime("" + date + "", "" + display + ""): "" + ""myDate = "" + myDate);

		return myDate;

	}
}","['Date', 'Boolean', 'DateTimeFormatter', 'DateTimeFormat', 'DateTime']","['java.util.Date', 'java.lang.Boolean', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime']"
"public class jt14 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""America/Montreal"" );
        ZonedDateTime start = ZonedDateTime.of( 2017 , 1 , 17 , 14 , 45 , 0 , 0 , z );
        ZonedDateTime stop = ZonedDateTime.of( 2017 , 1 , 17 , 15 , 12 , 0 , 0 , z );

}
","['ZoneId', 'ZonedDateTime']","['java.time.ZoneId', 'java.time.ZonedDateTime']"
"public class xstream_class_36 {
	public class MapTest {
		private Map<String, String> mapList;

		public MapTest()

			mapList = new HashMap<String, String>();
		}

		public void setServicesHealth(String id, String name) {
			mapList.put(id, name);
		}
	}

	public static void main(String arg[]) {
		MapTest services = null;
		services.setServicesHealth(""ID01"", ""Jack"");
		services.setServicesHealth(""ID02"", ""Neil"");

		XStream stream = new XStream(new StaxDriver());
		stream.alias(""MapTest"", MapTest.class);
		stream.addImplicitMap(MapTest.class, ""map"", ""id"", String.class, ""name"");
		String xmlStr = stream.toXML(services);
		System.out.println(xmlStr);
	}
}","['MapTest', 'Map', 'String', 'XStream', 'StaxDriver']","['xstream_class_36.MapTest', 'java.util.Map', 'java.lang.String', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.StaxDriver']"
"public class xt11 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        Node doc = null;
        Source xmlSource = new DOMSource(doc);
    }

","['ByteArrayOutputStream', 'Node', 'Source', 'DOMSource']","['java.io.ByteArrayOutputStream', 'org.w3c.dom.Node', 'javax.xml.transform.Source', 'javax.xml.transform.dom.DOMSource']"
"class Test {
	public static void main(String args[]) {
		int[] solutionArray = { 1, 2, 3, 4, 5, 6, 16, 15, 14, 13, 12, 11 };

		shuffleArray(solutionArray);
		for (int i = 0; i < solutionArray.length; i++) {
			System.out.print(solutionArray[i] + "" "");
		}
		System.out.println();

	}

	// Implementing Fisher???Yates shuffle
	static void shuffleArray(int[] ar) {
		// If running on Java 6 or older, use `new Random()` on RHS here
		Random rnd = ThreadLocalRandom.current();
		for (int i = ar.length - 1; i > 0; i--) {
			int index = rnd.nextInt(i + 1);
			// Simple swap
			int a = ar[index];
			ar[index] = ar[i];
			ar[i] = a;
		}
	}

	protected static List<Integer> range(int n) {
		return toList(new Range(n), new ArrayList<Integer>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable) {
		return toList(iterable, new ArrayList<T>());
	}

	protected static <T> List<T> toList(Iterable<T> iterable, List<T> destination) {
		addAll(destination, iterable.iterator());

		return destination;
	}

	protected static <T> void addAll(Collection<T> collection, Iterator<T> iterator) {
		while (iterator.hasNext()) {
			collection.add(iterator.next());
		}
	}

	private static class Range implements Iterable<Integer> {
		private int start;
		private int stop;
		private int step;

		private Range(int n) {
			this(0, n, 1);
		}

		private Range(int start, int stop) {
			this(start, stop, 1);
		}

		private Range(int start, int stop, int step) {
			this.start = start;
			this.stop = stop;
			this.step = step;
		}

		@Override
		public Iterator<Integer> iterator() {
			final int min = start;
			final int max = stop / step;

			return new Iterator<Integer>() {
				private int current = min;

				@Override
				public boolean hasNext() {
					return current < max;
				}

				@Override
				public Integer next() {
					if (hasNext()) {
						return current++ * step;
					} else {
						throw new NoSuchElementException(""Range reached the end"");
					}
				}

				@Override
				public void remove() {
					throw new UnsupportedOperationException(""Can't remove values from a Range"");
				}
			}
		}
	}
}","['int', 'Random', 'ThreadLocalRandom', 'Iterator', 'Collection', 'List', 'ArrayList', 'NoSuchElementException']","['java.util.Random', 'java.util.concurrent.ThreadLocalRandom', 'java.util.Iterator', 'java.util.Collection', 'java.util.List', 'java.util.ArrayList', 'java.util.NoSuchElementException']"
"public class jdk8 {
    public static void h1(){
        DecimalFormat df = new DecimalFormat(""0.00"", new DecimalFormatSymbols(Locale.FRANCE));
        System.out.println(df.format(""""))
    }
}
","['DecimalFormat', 'DecimalFormatSymbols', 'Locale']","['java.text.DecimalFormat', 'java.text.DecimalFormatSymbols', 'java.util.Locale']"
"public class JodaTime37 {

	public static void main(String[] args)
		DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
		DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
		DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);
		System.out.println(getDaysBetween(start, end));
	}

	public static int getDaysBetween(DateTime earlier, DateTime later) {
		return (int) TimeUnit.MILLISECONDS.toDays(later.getMillis() - earlier.getMillis());
	}
}","['DateTimeZone', 'DateTime', 'TimeUnit']","['org.joda.time.DateTimeZone', 'org.joda.time.DateTime', 'java.util.concurrent.TimeUnit']"
"public class ad4 {
    public static void hideKeyboardFrom(Context context, View view) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }


","['Activity', 'Context', 'View', 'InputMethodManager']","['android.app.Activity', 'android.content.Context', 'android.view.View', 'android.view.inputmethod.InputMethodManager']"
"public class jt13 {
    public static void h1(){
        ZoneId z = ZoneId.of( ""Pacific/Auckland"" ) ;
        ZonedDateTime now = ZonedDateTime.now( z ) ;

}
","['ZoneId', 'ZonedDateTime']","['java.time.ZoneId', 'java.time.ZonedDateTime']"
"public class JodaTime15 {
	public static void main(String[] args)
		MutableDateTime now = new MutableDateTime();
		now.setHourOfDay(2);
		now.setMinuteOfHour(0);
		now.setSecondOfMinute(0);
		now.setMillisOfSecond(0);
		DateTime myDate = now.toDateTime();
	}
}","['MutableDateTime', 'DateTime']","['org.joda.time.MutableDateTime', 'org.joda.time.DateTime']"
"public class xstream_class_37
	public class FieldDtoConvertor implements Converter {

		public boolean canConvert(Class clazz)
			return clazz.equals(FieldDto.class);
		}

		public void marshal(final Object value, final HierarchicalStreamWriter writer,
				final MarshallingContext context) {
			final FieldDto fieldDto = (FieldDto) value;
			for (int i = 0; i < fieldDto.getSize(); i++) {
				writer.addAttribute(fieldDto.getAttributeName(i), fieldDto.getAttributeValue(i));
			}
			writer.setValue(fieldDto.getText());
		}

		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			FieldDto fieldDto = new FieldDto();
			for (int i = 0; i < reader.getAttributeCount(); i++) {
				fieldDto.addAttribute(reader.getAttributeName(i), reader.getAttribute(i));
			}
			fieldDto.setText(reader.getValue());
			return fieldDto;
		}
	}

	public class FieldDto {
		private ArrayList<String> attributeName = null;
		private ArrayList<String> attributeValue = null;
		private String text;

		public FieldDto() {
			attributeName = new ArrayList<String>();
			attributeValue = new ArrayList<String>();
		}

		public String getAttributeName(int index) {
			return attributeName.get(index);
		}

		public void addAttribute(String attributeName, String attributeValue) {
			this.attributeName.add(attributeName);
			this.attributeValue.add(attributeValue);
		}

		public String getAttributeValue(int index) {
			return attributeValue.get(index);
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

		public int getSize() {
			return attributeName.size();
		}
	}

}","['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'ArrayList']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'java.util.ArrayList']"
"public class xstream_class_23 {
	@XStreamAlias(""test"")
	public class TestObject {
		private String foo;

		public String getFoo() {
			//return foo; -- Adjusted for EDIT#2
			return foo.toLowerCase()
		}

		public void setFoo(String foo) {
			this.foo = foo;
		}
	}

	public void test() throws Exception {
		XStream x = new XStream(new XppDriver());
		x.autodetectAnnotations(true);
		x.processAnnotations(TestObject.class);

		x.registerConverter(new JavaBeanConverter(x.getMapper()));

		TestObject o = new TestObject();
		//o.setFoo(""bar""); -- Adjusted for EDIT#2
		o.setFoo(""BAR"");

		String xml = x.toXML(o);

		System.out.println(xml);

		/*
		  Expecting...
		    <test>
		      <foo>bar</foo>
		    </test>

		  But instead getting...
		    <test>
		      <foo/>
		    </test>
		*/
	}
}","['XStream', 'XppDriver', 'XStreamAlias', 'JavaBeanConverter', 'TestObject', 'String']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.XppDriver', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'com.thoughtworks.xstream.converters.javabean.JavaBeanConverter', 'xstream_class_23.TestObject', 'java.lang.String']"
"public class xt12 {
    public static void h1(){
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try
            Transformer t = TransformerFactory.newInstance().newTransformer();
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
        }
    }
}
","['ByteArrayOutputStream', 'Transformer', 'TransformerFactory', 'TransformerConfigurationException']","['java.io.ByteArrayOutputStream', 'javax.xml.transform.Transformer', 'javax.xml.transform.TransformerFactory', 'javax.xml.transform.TransformerConfigurationException']"
"public class gwt_class_5
	private final JsArray<JsArrayInteger> popItemFromArray(
		     final JsArray<JsArrayInteger> oldArray) {

		    JsArray<JsArrayInteger> newArray = null;

		    for (int i = 0; i < oldArray.length() - 1; i++) {
		     newArray.set(i, oldArray.get(i));
		    }

		    return newArray;
		}
}
","['JsArray', 'JsArrayInteger']","['com.google.gwt.core.client.JsArray', 'com.google.gwt.core.client.JsArrayInteger']"
"public class hibernate_class_31 {
	public static List<?> getData() {
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		Session session = sessionFactory.getCurrentSession();
		List<?> result = null;
		try
			session.beginTransaction();
			Query query = session.createQuery(""from Users"");
			result = query.list();
			session.getTransaction().commit();
			query.setReadOnly(true);
			query.setMaxResults(50);
			session.flush();
			session.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}","['List', 'Session', 'Configuration', 'Query', 'SessionFactory']","['java.util.List', 'org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.Query', 'org.hibernate.SessionFactory']"
"public class JodaTime30 {

	public static void main(String[] args) {
		DateTimeZone dtz = DateTimeZone.forOffsetHours(0);

		DateTime dt = new DateTime(dtz)

		System.out.println(dt);
		System.out.println(dt.toDate());

	}

}","['DateTimeZone', 'DateTime']","['org.joda.time.DateTimeZone', 'org.joda.time.DateTime']"
"public class JodaTime27 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<DateTime> monthStarts = new ArrayList<DateTime>();
		int firstYear = 0;
		int lastYear = 0;
		for (int y = firstYear; y <= lastYear; y++) {
			for (int m = 1; m <= 12; m++) {
				monthStarts.add(new DateTime(y + ""-"" + m + ""-01""));

		}
	}

}","['ArrayList', 'DateTime']","['java.util.ArrayList', 'org.joda.time.DateTime']"
"public class jt3 {
    public static void f1(){
        LocalDateTime java8LocalDateTime = LocalDateTime.now();
        ZonedDateTime java8ZonedDateTime = java8LocalDateTime.atZone(ZoneId.systemDefault());
        Instant java8Instant = java8ZonedDateTime.toInstant();




}
","['LocalDateTime', 'ZonedDateTime', 'ZoneId', 'Instant']","['java.time.LocalDateTime', 'java.time.ZonedDateTime', 'java.time.ZoneId', 'java.time.Instant']"
"public class hb12 {
    public Type getReturnType(Type columnType, Mapping mapping) throws QueryException {
        int[] sqlTypes = new int[0];
        if (sqlTypes.length!=1) throw new QueryException(""multi-column type in avg()"");
        return columnType;

}
","['Hibernate', 'QueryException', 'Type', 'Mapping', 'Types']","['org.hibernate.Hibernate', 'org.hibernate.QueryException', 'org.hibernate.annotations.Type', 'org.hibernate.engine.Mapping', 'java.sql.Types']"
"public class Android30 {

	public static String main(String[] args) {

		HttpHost target = new HttpHost(""http://"" + ServiceWrapper.SERVER_HOST, ServiceWrapper.SERVER_PORT);
        HttpGet get = new HttpGet(""/list"");
        String result=null
     HttpEntity entity = null;
     HttpClient client = new DefaultHttpClient();
     try {
    HttpResponse response=client.execute(target, get);
    entity = response.getEntity();
    result = EntityUtils.toString(entity);
   } catch (Exception e) {
    e.printStackTrace();
   } finally {
    if (entity!=null)
     try {
      entity.consumeContent();
     } catch (IOException e) {}
   }
   return result;
	}

}

class ServiceWrapper
{
	static String SERVER_HOST = ""host"";
	static int SERVER_PORT = 8080;
}","['HttpHost', 'HttpGet', 'HttpEntity', 'HttpClient', 'DefaultHttpClient', 'HttpResponse', 'EntityUtils', 'IOException', 'String']","['org.apache.http.HttpHost', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.HttpEntity', 'org.apache.http.client.HttpClient', 'org.apache.http.impl.client.DefaultHttpClient', 'org.apache.http.HttpResponse', 'org.apache.http.util.EntityUtils', 'java.io.IOException', 'java.lang.String']"
"public class jdk18 {
    private static InputStream inputStream;
    public static String h1() throws IOException {
        StringWriter writer = new StringWriter()
        IOUtils.copy(inputStream, writer, ""UTF-8"");
        return writer.toString();

    }
}
","['InputStream', 'IOException', 'StringWriter', 'IOUtils']","['java.io.InputStream', 'java.io.IOException', 'java.io.StringWriter', 'org.apache.commons.io.IOUtils']"
"public class ad20 {
    public static void h1(){
        String currentDate = new SimpleDateFormat(""dd-MM-yyyy"", Locale.getDefault()).format(new Date());
        Instant instant = Instant.now();


}
","['String', 'SimpleDateFormat', 'Locale', 'Date', 'Instant']","['java.lang.String', 'java.text.SimpleDateFormat', 'java.util.Locale', 'java.util.Date', 'java.time.Instant']"
"public class JodaTime50 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	public static int daysOfMonth(int year, int month) {
		DateTime dateTime = new DateTime(year, month, 14, 12, 0, 0, 000);
		return dateTime.dayOfMonth().getMaximumValue()
	}
}",['DateTime'],['org.joda.time.DateTime']
"public class xstream_class_20 {
	@SuppressWarnings(""unchecked"")
	public static <A> A fromXML(Class c, File file) {
		// Don't ever try to use DomDriver. They are VERY slow.
		XStream xStream = new XStream();
		InputStream inputStream = null;
		Reader reader = null

		try {
			inputStream = new java.io.FileInputStream(file);
			reader = new InputStreamReader(inputStream, Charset.forName(""UTF-8""));
			Object object = xStream.fromXML(reader);

			if (c.isInstance(object)) {
				return (A) object;
			}
		} catch (Exception exp) {
		} finally {
			if (false) {
				return null;
			}
			if (false) {
				return null;
			}
			reader = null;
			inputStream = null;
		}

		return null;
	}
}","['File', 'XStream', 'Charset', 'Reader', 'InputStream', 'InputStreamReader']","['java.io.File', 'com.thoughtworks.xstream.XStream', 'java.nio.charset.Charset', 'java.io.Reader', 'java.io.InputStream', 'java.io.InputStreamReader']"
"public class Android06 {

	public static void main(String[] args)


		LinearLayout zoomView = null;

		zoomView.setLayoutParams(
				new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

		zoomView.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL);
	}

}","['LinearLayout', 'ViewGroup', 'LayoutParams', 'Gravity']","['android.widget.LinearLayout', 'android.view.ViewGroup', 'android.view.ViewGroup.LayoutParams', 'android.view.Gravity']"
"public class xstream_class_24 {
	public class DetailDollarsConverter extends ReflectionConverter {

		public DetailDollarsConverter(Mapper mapper, ReflectionProvider reflectionProvider) {
			super(mapper, reflectionProvider)
		}

		@Override
		public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context) {
			super.marshal(obj, writer, context);

			writer.startNode(""node4"");
			writer.setValue(Double.toString(20));
			writer.endNode();
		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			return super.unmarshal(reader, context);
		}

		@SuppressWarnings(""unchecked"")
		@Override
		public boolean canConvert(Class clazz) {
			Object o = null;
			return clazz.equals(o);
		}
	}
}","['HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader', 'Mapper', 'ReflectionProvider', 'ReflectionConverter']","['com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'com.thoughtworks.xstream.mapper.Mapper', 'com.thoughtworks.xstream.converters.reflection.ReflectionProvider', 'com.thoughtworks.xstream.converters.reflection.ReflectionConverter']"
"public class jt11 {
    public static void h1(){
        DateTimeZone BRAZIL = DateTimeZone.forID(""America/Sao_Paulo"");
        DateTime start = new DateTime(2013, 10, 20, 5, 0, 0, BRAZIL);
        DateTime end = new DateTime(2013, 10, 21, 13, 0, 0, BRAZIL);

}
","['DateTimeZone', 'DateTime']","['org.joda.time.DateTimeZone', 'org.joda.time.DateTime']"
"public class Android20 extends View {

	private static final int BOARD_X_OFFSET = 10;
	private static final int BOARD_Y_OFFSET = 10;

	public Android20(Context context) {
		super(context)

	}

	private TextView animText;

	private void animText(String text, int color, int xBlocks, int yBlocks) {
		animText.setText(text);
		animText.setTextColor(color);
		animText.setVisibility(View.VISIBLE);
		int xBlockSize = 2;
		final int x = BOARD_X_OFFSET + xBlocks * xBlockSize;
		int yBlockSize = 2;
		final int y = BOARD_Y_OFFSET + yBlocks * yBlockSize;
		final float SCALE_FROM = (float) 0.25;
		final float SCALE_TO = (float) 5.0;
		ScaleAnimation anim = new ScaleAnimation(SCALE_FROM, SCALE_TO, SCALE_FROM, SCALE_TO, x, y);
		anim.setDuration(500);
		animText.setAnimation(anim);
		this.setAnimation(null);
		startAnimation(anim);
	}

}","['View', 'Context', 'TextView', 'Color', 'ScaleAnimation']","['android.view.View', 'android.content.Context', 'android.widget.TextView', 'android.graphics.Color', 'android.view.animation.ScaleAnimation']"
"public class xt5 {
    public static void h1()
        XStream xstream = new XStream();
        xstream.processAnnotations(Properties.class);
    }
}
","['XStream', 'Parameters', 'FileReader', 'Properties']","['com.thoughtworks.xstream.XStream', 'org.hibernate.envers.tools.query.Parameters', 'java.io.FileReader', 'java.util.Properties']"
"public class xstream_class_29 {
	private static void createXmlEmail() {
		XStream xstream = new XStream(new DomDriver());
		xstream.setMode(XStream.NO_REFERENCES);
		xstream.alias(""email"", EmailPojo.class);
		xstream.alias(""recipient"", Recipient.class);

		EmailPojo ep = new EmailPojo()

		List<Recipient> toRecipient = new ArrayList<Recipient>();
		toRecipient.add(new Recipient(""user1@somecompany.com""));
		toRecipient.add(new Recipient(""user2@somecompany.com""));

		List<Recipient> ccRecipient = new ArrayList<Recipient>();
		ccRecipient.add(new Recipient(""user3@somecompany.com""));
		ccRecipient.add(new Recipient(""user4@somecompany.com""));

		List<Recipient> bccRecipient = new ArrayList<Recipient>();
		bccRecipient.add(new Recipient(""user5@somecompany.com""));
		bccRecipient.add(new Recipient(""user6@somecompany.com""));

		ep.setTo(toRecipient);
		ep.setCc(ccRecipient);
		ep.setBcc(bccRecipient);
		ep.setSubject(""subject test"");
		ep.setBody(""body test"");

		String xml = xstream.toXML(ep);
		System.out.println(xml);
	}

	public static class EmailPojo {
		private List<Recipient> to;
		private List<Recipient> cc;
		private List<Recipient> bcc;
		private String subject;
		private String body;

		public List<Recipient> getTo() {
			return to;
		}

		public void setTo(List<Recipient> to) {
			this.to = to;
		}

		public List<Recipient> getCc() {
			return cc;
		}

		public void setCc(List<Recipient> cc) {
			this.cc = cc;
		}

		public List<Recipient> getBcc() {
			return bcc;
		}

		public void setBcc(List<Recipient> bcc) {
			this.bcc = bcc;
		}

		public String getSubject() {
			return subject;
		}

		public void setSubject(String subject) {
			this.subject = subject;
		}

		public String getBody() {
			return body;
		}

		public void setBody(String body) {
			this.body = body;
		}
	}

	public static class Recipient {
		private String recipient;

		public Recipient(String recipient) {
			this.recipient = recipient;
		}

		public String getRecipient() {
			return recipient;
		}

		public void setRecipient(String recipient) {
			this.recipient = recipient;
		}
	}
}","['XStream', 'DomDriver', 'ArrayList', 'List']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.util.ArrayList', 'java.util.List']"
"public class hb3  implements Serializable {
    @Before
    public void h1 (){
           Configuration cfg = new Configuration().configure() ;
            Object sr = null
    }
}


","['Serializable', 'Before', 'Configuration']","['java.io.Serializable', 'org.junit.Before', 'org.hibernate.cfg.Configuration']"
"public class Android13 {
	public static void main(String[] args) {
		Uri imageUri = null;
		Bitmap bitmap = null;
		try {
			bitmap = Media.getBitmap(getContentResolver(), imageUri);
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace()
		}
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.JPEG, 40, bytes);
		ByteArrayInputStream fileInputStream = new ByteArrayInputStream(bytes.toByteArray());
	}

	private static ContentResolver getContentResolver() {

		return null;
	}
}","['Uri', 'Bitmap', 'Media', 'FileNotFoundException', 'IOException', 'ByteArrayOutputStream', 'ByteArrayInputStream', 'ContentResolver']","['android.net.Uri', 'android.graphics.Bitmap', 'android.provider.MediaStore', 'java.io.FileNotFoundException', 'java.io.IOException', 'java.io.ByteArrayOutputStream', 'java.io.ByteArrayInputStream', 'android.content.ContentResolver']"
"public class hibernate_class_44 extends DispatchAction {

	public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		if (log.isDebugEnabled()) {
			log.debug(""Entering Master add method"");
		}

		try

		}

		catch (Exception ex) {
			ex.printStackTrace();
			return mapping.findForward(""failure"");
		}

		return mapping.findForward(""success1"");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		SessionFactory sessionFactory = null;
		Session session = null;
		System.out.println(""in cargo Action"");
		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();


			System.out.println(""in cargo Action"");
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward(""success"");

	}

	public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		System.out.println(""in cargo search Action"");
		SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
		HttpSession session1 = request.getSession();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		System.out.println(""in cargo search Action"");

		String name = null;
		String status = null;
		String createby = null;


		try {

			String SQL_QUERY = ""createby"";
			Query query = session.createQuery(SQL_QUERY);
			query.setParameter(""name"", name);
			query.setParameter(""status"", status);
			query.setParameter(""createby"", createby);
			ArrayList al = new ArrayList();
			for (Iterator i = query.iterate(); i.hasNext();) {

			}
			System.out.println(""Cargo list is:"" + al.size());
			session1.setAttribute(""clist"", al);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""search Cargo list is success"");

		return mapping.findForward(""success"");
	}

	public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		SessionFactory sessionFactory = null;
		Session session = null;
		if (log.isDebugEnabled()) {
			log.debug(""Entering Master Edit method"");
		}

		try {
			sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aa"");
			session = sessionFactory.openSession();
			Transaction transaction = session.beginTransaction();

			String qstring = ""from cargo c where c.id=:id"";
			Query query = session.createQuery(qstring);

			ArrayList all = new ArrayList();

			System.out.println(""Edit Cargo list "" + all.size());

			Set purchaseArray = new HashSet();

			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}

		System.out.println(""Edit Cargo list is success"");
		return mapping.findForward(""succ"");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		try {
			SessionFactory sessionFactory = (SessionFactory) servlet.getServletContext().getAttribute(""aaa"");
			Session session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward(""failure"");
		}
		System.out.println(""Deleted success"");
		return mapping.findForward(""succes"");
	}

}","['HttpSession', 'ActionForward', 'ActionMapping', 'ActionForm', 'DispatchAction', 'Iterator', 'HttpServletResponse', 'Set', 'SessionFactory', 'ArrayList', 'HttpServletRequest', 'Session', 'HashSet', 'Query', 'Transaction']","['javax.servlet.http.HttpSession', 'org.apache.struts.action.ActionForward', 'org.apache.struts.action.ActionMapping', 'org.apache.struts.action.ActionForm', 'org.apache.struts.actions.DispatchAction', 'java.util.Iterator', 'javax.servlet.http.HttpServletResponse', 'java.util.Set', 'org.hibernate.SessionFactory', 'java.util.ArrayList', 'javax.servlet.http.HttpServletRequest', 'org.hibernate.Session', 'java.util.HashSet', 'org.hibernate.Query', 'org.hibernate.Transaction']"
"public class hibernate_class_33 {

	private static hibernate_class_33 instance = null;

	private SessionFactory sessionFactory;

	public static hibernate_class_33 getInstance() {
		if (hibernate_class_33.instance == null) {
			hibernate_class_33.instance = new hibernate_class_33().init();
		}

		return hibernate_class_33.instance;
	}

	public SessionFactory getSessionFactory() {
		return this.sessionFactory;
	}

	public Session getSession() {
		return this.sessionFactory.openSession();
	}

	private hibernate_class_33 init()
		Configuration cfg = new Configuration();


		cfg.setProperties(System.getProperties());
		cfg.configure();
		SessionFactory sessions = cfg.buildSessionFactory();

		sessionFactory = cfg.configure().buildSessionFactory();
		return this;
	}
}","['Session', 'SessionFactory', 'Configuration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration']"
"public class JodaTime33 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter hoursMinutesSeconds = new PeriodFormatterBuilder().appendHours().appendSuffix("" hour"", "" hours"")
				.appendSeparator("", "", "" and "").appendMinutes().appendSuffix("" minute"", "" minutes"")
				.appendSeparator("" and "").printZeroRarelyFirst().appendSeconds().appendSuffix("" second"", "" seconds"")
				.toFormatter()

		System.out.println(hoursMinutesSeconds.print(new Period(0, 0, 0, 500)));
	}

}","['PeriodFormatterBuilder', 'PeriodFormatter', 'Period']","['org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period']"
"public class Class_15 {
	public class Employee {

		String name;
		String mobile;

		public Employee(String name, String mobile) {
			this.name = name;
			this.mobile = mobile;
		}

		@Override
		public int hashCode() {
			System.out.println(""calling hascode method of Employee"");
			String str = this.name;
			Integer sum = 0;
			for (int i = 0; i < str.length(); i++) {
				sum = sum + str.charAt(i);
			}
			return sum

		}

		@Override
		public boolean equals(Object obj) {
			// TODO Auto-generated method stub
			System.out.println(""calling equals method of Employee"");
			Employee emp = (Employee) obj;
			if (this.mobile.equalsIgnoreCase(emp.mobile)) {

				System.out.println(""returning true"");
				return true;
			} else {
				System.out.println(""returning false"");
				return false;
			}

		}

		public void main(String[] args) {
			// TODO Auto-generated method stub

			Employee emp = new Employee(""abc"", ""hhh"");
			Employee emp2 = new Employee(""abc"", ""hhh"");
			HashMap<Employee, Employee> h = new HashMap<>();
			//for (int i=0;i<5;i++){
			h.put(emp, emp);
			h.put(emp2, emp2);

			//}

			System.out.println(""----------------"");
			System.out.println(""size of hashmap: "" + h.size());

		}

	}
}","['String', 'Object', 'Employee', 'HashMap']","['java.lang.String', 'java.lang.Object', 'Class_15.Employee', 'java.util.HashMap']"
"public class xstream_class_12 {
	public class ListToStringXStreamConverter implements Converter {

		private String alias;

		public ListToStringXStreamConverter(String alias) {
			super()
			this.alias = alias;
		}

		@SuppressWarnings(""rawtypes"")
		@Override
		public boolean canConvert(Class type) {
			return true;
		}

		@Override
		public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {

			@SuppressWarnings(""unchecked"")
			List<String> list = (List<String>) source;

			for (String string : list) {
				writer.startNode(alias);
				writer.setValue(string);
				writer.endNode();
			}

		}

		@Override
		public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			throw new UnsupportedOperationException(
					""ListToStringXStreamConverter does not offer suport for unmarshal operation"");
		}

	}

}","['List', 'Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['java.util.List', 'com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']"
"public class hb8 {
    public static void h1(){
        SessionFactory sessionFactory = null;
        Session session = sessionFactory.openSession();
        Object s = null;


}
","['SessionFactory', 'Session']","['org.hibernate.SessionFactory', 'org.hibernate.Session']"
"public class hibernate_class_23 {
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
	private static Configuration configuration = new AnnotationConfiguration();
	private static org.hibernate.SessionFactory sessionFactory;
	static
		try {
			String configFile = """";
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
		}
	}

	private hibernate_class_23() {
	}

	public static Session getSession() throws HibernateException {
		Session session = (Session) threadLocal.get();
		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {

			}
			session = (sessionFactory != null) ? sessionFactory.openSession() : null;
			threadLocal.set(session);
		}
		return session;
	}
}","['ThreadLocal', 'Session', 'Configuration', 'AnnotationConfiguration', 'SessionFactory', 'HibernateException']","['java.lang.ThreadLocal', 'org.hibernate.Session', 'org.hibernate.cfg.Configuration', 'org.hibernate.cfg.AnnotationConfiguration', 'org.hibernate.SessionFactory', 'org.hibernate.HibernateException']"
"public class jdk2 {
    public static void main(String args[]){
        String userDirPropertyName = ""user.dir"";
        File initialUserDir = new File(System.getProperty(userDirPropertyName));
        System.out.println(""files in "" + initialUserDir.getAbsolutePath() + "":"");

    }


","['File', 'System']","['java.io.File', 'java.lang.System']"
"class Class_4 {
	private static Pattern twopart = Pattern.compile(""(\\d+)-(\\d+)"");

	public static void checkString(String s) {
		Matcher m = twopart.matcher(s);
		if (m.matches() {
			System.out.println(s + "" matches; first part is "" + m.group(0) + "", second part is "" + m.group(1) + ""."");
		} else {
			System.out.println(s + "" does not match."");
		}
	}

	public static void main(String[] args) {
		checkString(""123-4567"");
		checkString(""foo-bar"");
		checkString(""123-"");
		checkString(""-4567"");
		checkString(""123-4567-890"");
	}

	public static String[] mySplit(String text, String delimiter) {
		List<String> parts = new ArrayList<String>();

		text += delimiter;

		for (int i = text.indexOf(delimiter), j = 0; i != -1;) {
			String temp = text.substring(j, i);
			if (temp.trim().length() != 0) {
				parts.add(temp);
			}
			j = i + delimiter.length();
			i = text.indexOf(delimiter, j);
		}

		return parts.toArray(new String[0]);
	}

	public static void main_2() {
		String str = ""004-034556"";
		String delimiter = ""-"";
		String result[] = mySplit(str, delimiter);
		for (String s : result)
			System.out.println(s);
	}
}","['Pattern', 'Matcher', 'List', 'ArrayList', 'String']","['java.util.regex.Pattern', 'java.util.regex.Matcher', 'java.util.List', 'java.util.ArrayList', 'java.lang.String']"
"public class ad18 {
    public static void h1(){
        String url = """"
        Intent i = new Intent(Intent.ACTION_VIEW);
    }
}
","['String', 'Intent']","['java.lang.String', 'android.content.Intent']"
"public class hibernate_class_20 {
	private static final SessionFactory sessionFactory;

	static {
		try {

			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);

	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}","['SessionFactory', 'AnnotationConfiguration']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']"
"public class xt3 {
    public static void h1(){
        String strXML = """"
        XStream xs = new XStream();
        StringWriter sw = new StringWriter();
    }
}
","['String', 'XStream', 'StringWriter']","['java.lang.String', 'com.thoughtworks.xstream.XStream', 'java.io.StringWriter']"
"public class Android44 extends Service {
	public volatile Thread runner;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
		super.onCreate();

		startThread();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.onDestroy"");
		stopThread()
	}

	public synchronized void startThread() {
		if (runner == null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.startthread"");
			runner.start();
		}
	}


	public synchronized void stopThread() {
		if (runner != null) {
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""DoScan.stopthread"");
			Thread moribund = runner;
			runner = null;
			moribund.interrupt();
			android.util.Log.v(""@@@@@@@@@@@@@@@@@@@@"", ""interrupted?"" + moribund.isInterrupted());
		}
	}
}","['Service', 'Thread', 'IBinder', 'Intent']","['android.app.Service', 'java.lang.Thread', 'android.os.IBinder', 'android.content.Intent']"
"public class jt17 {
    public static void h1(){
        String dateTime = ""2015-07-18T13:32:56.971-0400"";

        DateTimeFormatter formatter = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSZZ"")
                .withLocale(Locale.ROOT)
                .withChronology(ISOChronology.getInstanceUTC());
        DateTime dt = formatter.parseDateTime(dateTime);

}
","['DateTimeFormatter', 'DateTimeFormat', 'Locale', 'ISOChronology', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'java.util.Locale', 'org.joda.time.chrono.ISOChronology', 'org.joda.time.DateTime']"
"public class gt18 {
    public static String h1(){
        Formatter format = new Formatter();
        int matches = 0;
        Formatter formattedString = format.format(""%d numbers(s, args) in correct position"", matches);
        return null;

}
",['Formatter'],['java.util.Formatter']
"public class jt10 {
    public static void h1(){
        DateTime now = DateTime.now();
        DateTime dateTime = now.plusMinutes(10)
        Seconds seconds = Seconds.secondsBetween(now, dateTime);
    }
}
","['DateTime', 'Seconds']","['org.joda.time.DateTime', 'org.joda.time.Seconds']"
"public class xt17 {
    public static void h1(String xmlPath) throws ParserConfigurationException, IOException, SAXException {
        File FileIn = new File(xmlPath);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();

}
","['File', 'DocumentBuilderFactory', 'DocumentBuilder', 'ParserConfigurationException', 'IOException', 'SAXException']","['java.io.File', 'javax.xml.parsers.DocumentBuilderFactory', 'javax.xml.parsers.DocumentBuilder', 'javax.xml.parsers.ParserConfigurationException', 'java.io.IOException', 'org.xml.sax.SAXException']"
"public class xt20 {
    public static void h1()
        XStream xstream = new XStream();
        ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
        xstream.registerLocalConverter(Test.class, ""tags"", new CollectionConverter(mapper));
    }
}
","['XStream', 'CollectionConverter', 'ClassAliasingMapper', 'Test']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.converters.collections.CollectionConverter', 'com.thoughtworks.xstream.mapper.ClassAliasingMapper', 'junit.framework.Test']"
"public class hibernate_class_19 {
	public final static String TABLE_NAME = ""house"";
	public final static String XDN = ""xdn"";
	public final static String DFN = ""dfn"";

	@GeneratedValue
	private long Id;

	@Column(name = XDN)
	private long xdn;

	@Column(name = DFN)
	private long dfn;

	@Column
	private String address;

	public long getId() {
		return Id;
	}

	public void setId(long id)
		this.Id = id;
	}

	public long getXdn() {
		return xdn;
	}

	public void setXdn(long xdn) {
		this.xdn = xdn;
	}

	public long getDfn() {
		return dfn;
	}

	public void setDfn(long dfn) {
		this.dfn = dfn;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
}","['GeneratedValue', 'Column', 'String']","['javax.persistence.GeneratedValue', 'javax.persistence.Column', 'java.lang.String']"
"public class JodaTime46 {

	public static void main(String[] args) {
		DateTimeZone date = null
		// TODO Auto-generated method stub
		DateTime dateTime = new DateTime(date);
		dateTime = dateTime.plusDays(1);

	}

}","['DateTimeZone', 'DateTime']","['org.joda.time.DateTimeZone', 'org.joda.time.DateTime']"
"public class Class_5 {
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());
		Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
			public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
				return (o1.getValue()).compareTo(o2.getValue());
			}
		})

		Map<K, V> result = new LinkedHashMap<K, V>();
		for (Map.Entry<K, V> entry : list) {
			result.put(entry.getKey(), entry.getValue());
		}
		return result;
	}

	public class main {
		public void main_1() {
			HashMap<String, Double> map = new HashMap<String, Double>();
			ValueComparator bvc = new ValueComparator(map);
			TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);

			map.put(""A"", 99.5);
			map.put(""B"", 67.4);
			map.put(""C"", 67.4);
			map.put(""D"", 67.3);

			System.out.println(""unsorted map: "" + map);
			sorted_map.putAll(map);
			System.out.println(""results: "" + sorted_map);
		}
	}

	class ValueComparator implements Comparator<String> {
		Map<String, Double> base;

		public ValueComparator(Map<String, Double> base) {
			this.base = base;
		}

		// Note: this comparator imposes orderings that are inconsistent with
		// equals.
		public int compare(String a, String b) {
			if (base.get(a) >= base.get(b)) {
				return -1;
			} else {
				return 1;
			} // returning 0 would merge keys
		}
	}

}","['Map', 'LinkedList', 'Collections', 'Comparator', 'HashMap', 'ValueComparator', 'TreeMap']","['java.util.Map', 'java.util.LinkedList', 'java.util.Collections', 'java.util.Comparator', 'java.util.HashMap', 'Class_5.ValueComparator', 'java.util.TreeMap']"
"public class Android35 {
	private void recordVideoStart() {
		MediaRecorder recorder = new MediaRecorder();
		if (recorder != null) {
			recorder.stop()
			recorder.release();
		}
		File file = new File(""/sdcard/videoTest.3gpp"");
		try {
			file.createNewFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setOutputFile(file.getAbsolutePath());
		recorder.setVideoSize(176, 144);
		recorder.setVideoFrameRate(15);

		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT);
		recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

		try {
			recorder.prepare();
		} catch (IllegalStateException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
		recorder.start();
	}

}","['MediaRecorder', 'File', 'IOException']","['android.media.MediaRecorder', 'java.io.File', 'java.io.IOException']"
"public class ad17 {
    TextView tv = new TextView(getContext());
    private Context getContext()
        return null;
    }


}
","['TextView', 'Context']","['android.widget.TextView', 'android.content.Context']"
"public class Android04 extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mTextView = new TextView(this);

		if (savedInstanceState == null)
			mTextView.setText(""Welcome to HelloAndroid!"");
		} else {
			mTextView.setText(""Welcome back."");
		}

		setContentView(mTextView);
	}

	private TextView mTextView = null;
}","['Activity', 'Bundle', 'TextView']","['android.app.Activity', 'android.os.Bundle', 'android.widget.TextView']"
"public class Android19 {
	public View getView(int position, View convertView, ViewGroup parent) {
		ImageView imageView;
		if (convertView == null) {
			Context mContext = null;

			imageView = new ImageView(mContext);
			imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
			imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
			imageView.setPadding(8, 8, 8, 8)

		} else {
			imageView = (ImageView) convertView;
		}

		int[] mThumbIds = null;
		imageView.setImageResource(mThumbIds[position]);
		return imageView;
	}

}","['Context', 'View', 'ViewGroup', 'GridView', 'ImageView']","['android.content.Context', 'android.view.View', 'android.view.ViewGroup', 'android.widget.GridView', 'android.widget.ImageView']"
"public class JodaTime02 {

	public static void main(String[] args) {
		DateMidnight today = new DateMidnight(2009, 2, 24);
		DateTimeZone zone = today.getZone();

		DateTime previousTransition = new DateTime(zone.previousTransition(today.getMillis()));

		System.out.println(previousTransition);

		DateTime nextTransition = new DateTime(zone.nextTransition(today.getMillis()));

		System.out.println(nextTransition);



}","['DateMidnight', 'DateTimeZone', 'DateTime']","['org.joda.time.DateMidnight', 'org.joda.time.DateTimeZone', 'org.joda.time.DateTime']"
"public class jt18 {
    public static void h1() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy HH:mm:ss""); //  04/02/2011 20:27:05

        Date date = sdf.parse(""dateValue"");
        System.out.println(date);
    }

","['SimpleDateFormat', 'ParseException', 'Date']","['java.text.SimpleDateFormat', 'java.text.ParseException', 'java.util.Date']"
"public class Class_22 {
	// @see http://stackoverflow.com/questions/4637215
	public class TwoRoot extends JFrame {

		private static final String s = ""0.000000000000000"";
		private JProgressBar progressBar = new JProgressBar(0, 100);
		private JLabel label = new JLabel(s, JLabel.CENTER);

		public TwoRoot() {
			this.setLayout(new GridLayout(0, 1));
			this.setTitle(""???2"");
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			this.add(progressBar);
			this.add(label);
			this.setSize(161, 100);
			this.setLocationRelativeTo(null);
			this.setVisible(true);
		}

		public void runCalc() {
			progressBar.setIndeterminate(true);
			TwoWorker task = new TwoWorker();
			task.addPropertyChangeListener(new PropertyChangeListener() {

				@Override
				public void propertyChange(PropertyChangeEvent e) {
					if (""progress"".equals(e.getPropertyName())) {
						progressBar.setIndeterminate(false);
						progressBar.setValue((Integer) e.getNewValue());
					}
				}
			});
			task.execute();
		}

		private class TwoWorker extends SwingWorker<Double, Double> {

			private static final int N = 5;
			private final DecimalFormat df = new DecimalFormat(s);
			double x = 1

			@Override
			protected Double doInBackground() throws Exception {
				for (int i = 1; i <= N; i++) {
					x = x - (((x * x - 2) / (2 * x)));
					setProgress(i * (100 / N));
					publish(Double.valueOf(x));
					Thread.sleep(1000); // simulate latency
				}
				return Double.valueOf(x);
			}

			@Override
			protected void process(List<Double> chunks) {
				for (double d : chunks) {
					label.setText(df.format(d));
				}
			}
		}

		public void main(String[] args) {
			EventQueue.invokeLater(new Runnable() {

				@Override
				public void run() {
					TwoRoot t = new TwoRoot();
					t.runCalc();
				}
			});
		}
	}

	JFrame progressFrame;
	JProgressBar progressBar;
	JLabel label = new JLabel(""Calculating..."");;
	Container pane;

	double amountSaved = 0;
	int i = 0;
	int iterations;

	public void createGui(int iterations) {
		//Create all components
		progressFrame = new JFrame(""Calculation Progress"");
		progressFrame.setSize(300, 100);
		pane = progressFrame.getContentPane();
		pane.setLayout(null);
		label = new JLabel(""Calculating..."");
		label.setBounds(115, 35, 200, 25);
		progressBar = new JProgressBar(0, iterations);
		progressBar.setBounds(10, 10, 280, 20);
		progressBar.setStringPainted(true);
		//Add components to pane
		pane.add(progressBar);
		pane.add(label);
		//Make frame visible
		progressFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		progressFrame.setResizable(false); //No resize
		progressFrame.setLocationRelativeTo(null);
		progressFrame.setVisible(true);
	}

	public void runCalcs(double MP, double StepAmt, double L1, double L2, double C1, double C2, double IM1, double IM2,
			double M1Start, double M2Start) {

		progressBar.setIndeterminate(false);
		TwoWorker task = new TwoWorker(MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start);
		task.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent e) {
				if (""progress"".equals(e.getPropertyName())) {
					progressBar.setIndeterminate(false);
					progressBar.setValue((Integer) e.getNewValue());
				}
			}
		});
		task.execute();
	} //end method runCalcs

	public class TwoWorker extends SwingWorker<Double, Double> {

		private final double MP, StepAmt, L1, L2, C1, C2, IM1, IM2, M1Start, M2Start;

		public TwoWorker(double MPa, double StepAmta, double L1a, double L2a, double C1a, double C2a, double IM1a,
				double IM2a, double M1Starta, double M2Starta) {

			MP = MPa;
			StepAmt = StepAmta;
			L1 = L1a;
			L2 = L2a;
			C1 = C1a;
			C2 = C2a;
			IM1 = IM1a;
			IM2 = IM2a;
			M1Start = M1Starta;
			M2Start = M2Starta;
		}

		@Override
		protected Double doInBackground() {

			double M1 = M1Start;
			double M2 = M2Start;

			// Set MinLoop as maximum to start
			// Loan 1
			double N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
			double M1Sum = M1 * N1;
			// Loan 2
			double N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
			double M2Sum = M2 * N2;
			double minLoop = M1Sum + M2Sum;
			double MTotal = 0;

			// Define variables for mins
			double MP1 = 0;
			double MP2 = 0;
			double NP1 = 0;
			double NP2 = 0;
			double MP1Sum = 0;
			double MP2Sum = 0;

			while (M1 <= MP - M2Start && M2 >= M2Start) {
				N1 = (Math.log10(1 - IM1 * L1 / M1) * -1) / Math.log10(1 + IM1);
				M1Sum = N1 * M1;
				N2 = (Math.log10(1 - IM2 * L2 / M2) * -1) / Math.log10(1 + IM2);
				M2Sum = N2 * M2;
				MTotal = M1Sum + M2Sum;
				if (MTotal < minLoop) {
					minLoop = MTotal;
					MP1 = M1;
					MP2 = M2;
					NP1 = N1;
					NP2 = N2;
					MP1Sum = M1Sum;
					MP2Sum = M2Sum;
				} // end if
				i++;
				progressBar.setValue(i);
				M1 = M1 + StepAmt;
				M2 = MP - M1;
				// Reset monthly sums
				M1Sum = 0;
				M2Sum = 0;
			} // end while

			System.out.printf(""MP1 = %.2f\n"", MP1);
			System.out.printf(""MP2 = %.2f\n"", MP2);
			System.out.printf(""NP1 = %.2f\n"", NP1);
			System.out.printf(""NP2 = %.2f\n"", NP2);
			System.out.printf(""MP1Sum = %.2f\n"", MP1Sum);
			System.out.printf(""MP2Sum = %.2f\n"", MP2Sum);
			System.out.printf(""MTotal = %.2f\n"", minLoop);
			System.out.printf(""i = %d\n"", i);
			System.out.printf(""M1Start = %.2f\n"", M1Start);
			System.out.printf(""M2Start = %.2f\n"", M2Start);
			System.out.printf(""MP= %.2f\n"", MP);

			// if there's a value for current payments, calculate amount saved
			if (C1 > 0) {
				double CN1 = (Math.log10(1 - IM1 * L1 / C1) * -1) / Math.log10(1 + IM1);
				double CT1 = CN1 * C1;

				double CN2 = (Math.log10(1 - IM2 * L2 / C2) * -1) / Math.log10(1 + IM2);
				double CT2 = CN2 * C2;

				double CTotal = CT1 + CT2;
				amountSaved = CTotal - minLoop;
			} // end if

			return null;

		} // end doInBackGround

		@Override
		protected void done() {
			label.setBounds(133, 35, 200, 25);
			label.setText(""Done!"");
		}
	} // end TwoWorker

	public double savedReturn() {
		return amountSaved;
	}
}","['JFrame', 'JProgressBar', 'JLabel', 'Container', 'SwingWorker', 'PropertyChangeListener', 'Math', 'List', 'PropertyChangeEvent', 'EventQueue', 'DecimalFormat', 'GridLayout']","['javax.swing.JFrame', 'javax.swing.JProgressBar', 'javax.swing.JLabel', 'java.awt.Container', 'javax.swing.SwingWorker', 'java.beans.PropertyChangeListener', 'java.lang.Math', 'java.util.List', 'java.beans.PropertyChangeEvent', 'java.awt.EventQueue', 'java.text.DecimalFormat', 'java.awt.GridLayout']"
"public class hb15<GlobalConfigScope> {
    private static Object Type;

    @OneToMany(cascade = CascadeType.ALL, mappedBy=""globalConfig"", orphanRemoval = true
    private Set<GlobalConfigScope> gcScopeSet;
}
",['None (code is incomplete and contains syntax errors)'],"['java.util.Set', 'javax.persistence.OneToMany', 'javax.persistence.CascadeType']"
"public class jt7 {
    public static void h1()
        Calendar calendar1 = Calendar.getInstance();
        long milliseconds1 = calendar1.getTimeInMillis();
    }

}
",['Calendar'],['java.util.Calendar']
"public class xstream_class_30 implements Converter {

	@Override
	public void marshal(Object o, HierarchicalStreamWriter hierarchicalStreamWriter,
			MarshallingContext marshallingContext)
		// implement logic for marshalling to xml
	}

	@Override
	public Object unmarshal(HierarchicalStreamReader hierarchicalStreamReader,
			UnmarshallingContext unmarshallingContext) {
		Items items = new Items();
		while (hierarchicalStreamReader.hasMoreChildren()) {
			hierarchicalStreamReader.moveDown();
			final String currentAttribute = hierarchicalStreamReader.getAttribute(""name"");
			if (""id"".equals(currentAttribute)) {
				items.setId(hierarchicalStreamReader.getValue());
			} else if (""first-name"".equals(currentAttribute)) {
				items.setFirstName(hierarchicalStreamReader.getValue());
			} else if (""last-name"".equals(currentAttribute)) {
				items.setLastName(hierarchicalStreamReader.getValue());
			} else if (""address"".equals(currentAttribute)) {
				items.setAddress(hierarchicalStreamReader.getValue());
			} else if (""zip"".equals(currentAttribute)) {
				items.setZip(hierarchicalStreamReader.getValue());
			}
			hierarchicalStreamReader.moveUp();
		}
		return items;
	}

	@Override
	public boolean canConvert(Class aClass) {
		return aClass == Items.class;
	}

	public class Items {
		private String id;
		private String firstName;
		private String lastName;
		private String address;
		private String zip;

		public void setId(String id) {
			this.id = id;
		}

		public void setFirstName(String firstName) {
			this.firstName = firstName;
		}

		public void setLastName(String lastName) {
			this.lastName = lastName;
		}

		public void setAddress(String address) {
			this.address = address;
		}

		public void setZip(String zip) {
			this.zip = zip;
		}
	}
}","['Converter', 'HierarchicalStreamWriter', 'UnmarshallingContext', 'MarshallingContext', 'HierarchicalStreamReader']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'com.thoughtworks.xstream.converters.MarshallingContext', 'com.thoughtworks.xstream.io.HierarchicalStreamReader']"
"public class hibernate_class_2 {

	@Entity
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public class Part implements Serializable {

		private int id;
		private String name
		private static final long serialVersionUID = 1L;
		private Part mainPart;
		private List<Part> parts;

		public Part() {
			super();
		}

		@Id
		public int getId() {
			return this.id;
		}

		public void setId(int id) {
			this.id = id;
		}

		@Column(name = ""PART_NAME"")
		public String getName() {
			return this.name;
		}

		public void setName(String name) {
			this.name = name;
		}

		@ManyToOne(cascade = ALL)
		public Part getMainPart() {
			return mainPart;
		}

		public void setMainPart(Part mainPart) {
			this.mainPart = mainPart;
		}

		@OneToMany(cascade = ALL)
		@JoinColumn(name = ""mainPart_id"", referencedColumnName = ""id"")
		@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
		public List<Part> getParts() {
			return parts;
		}

		public void setParts(List<Part> parts) {
			this.parts = parts;
		}

	}
}","['ALL', 'Column', 'List', 'Entity', 'ManyToOne', 'JoinColumn', 'OneToMany', 'Id', 'Cache', 'CacheConcurrencyStrategy', 'Serializable']","['staticjavax.persistence.CascadeType.ALL', 'javax.persistence.Column', 'java.util.List', 'javax.persistence.Entity', 'javax.persistence.ManyToOne', 'javax.persistence.JoinColumn', 'javax.persistence.OneToMany', 'javax.persistence.Id', 'org.hibernate.annotations.Cache', 'org.hibernate.annotations.CacheConcurrencyStrategy', 'java.io.Serializable']"
"public class xstream_class_16 {
	public static void main(String arg[]) {
		XStream xstream = new XStream()
			@Override
			protected MapperWrapper wrapMapper(MapperWrapper next) {
				return new MapperWrapper(next) {
					@Override
					public boolean shouldSerializeMember(Class definedIn, String fieldName) {
						if (definedIn == Object.class) {
							return false;
						}
						return super.shouldSerializeMember(definedIn, fieldName);
					}
				};
			}
		};
	}
}","['XStream', 'MapperWrapper', 'Class', 'Object', 'String']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'java.lang.Class', 'java.lang.Object', 'java.lang.String']"
"public abstract class hibernate_class_29<T> {

	private Class<T> domainClass;

	private SessionFactory sf;

	public hibernate_class_29(Class<T> domainClass) {
		this.domainClass = domainClass;
	}

	public SessionFactory getSessionFactory() {
		return sf;
	}

	public void setSessionFactory(SessionFactory sf) {
		this.sf = sf;
	}

	public void delete(T object) {
		getSession().delete(object);
	}

	@SuppressWarnings(""unchecked"")
	public T load(long id) {
		return (T) getSession().get(domainClass, id);
	}

	public void save(T object) {
		getSession().saveOrUpdate(object);
	}

	@SuppressWarnings(""unchecked"")
	public List<T> findAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		List<T> r = (List<T>) criteria.list();
		return r;
	}

	public int countAll() {
		Criteria criteria = getSession().createCriteria(domainClass);
		criteria.setProjection(Projections.rowCount());
		return (Integer) criteria.uniqueResult()
	}

	public Session getSession() {

		return sf.getCurrentSession();
	}
}","['Class', 'SessionFactory', 'Session', 'Criteria', 'List', 'Projections']","['java.lang.Class', 'org.hibernate.SessionFactory', 'org.hibernate.Session', 'org.hibernate.Criteria', 'java.util.List', 'org.hibernate.criterion.Projections']"
"public class JodaTime32 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = null;
		// TODO Auto-generated method stub
		final DateTime date1 = dtf.parseDateTime(""1979-04-29"");
		final DateTime date2 = dtf.parseDateTime(""1979-05-12"");
		final DateTime date3 = dtf.parseDateTime(""1979-04-02"");
		final DateTime date4 = dtf.parseDateTime(""1979-04-15"");
		System.err.println(date1.toString())
		System.err.println(date2.toString());
		System.err.println(date3.toString());
		System.err.println(date4.toString());
	}

}","['DateTimeFormatter', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.DateTime']"
"public class jdk16 {
    public static void h1(String[] args) {
        SimpleDateFormat sf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        String str3 = ""1927-12-31 23:54:07"";

}

",['SimpleDateFormat'],['java.text.SimpleDateFormat']
"public class ad15 extends Activity {

    private TextView mTextView = null

    public void h1(Bundle savedInstanceState) {
        mTextView = new TextView(this);
    }
}
","['Activity', 'TextView', 'Bundle']","['android.app.Activity', 'android.widget.TextView', 'android.os.Bundle']"
"class Class_20 {
	public static void receive() {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null, 0));
			//read the number of files from the client
			int number = dis.readInt();
			ArrayList<File> files = new ArrayList<File>(number);
			System.out.println(""Number of Files to be received: "" + number);
			//read file names, add files to arraylist
			for (int i = 0; i < number; i++) {
				File file = new File(dis.readUTF());
				files.add(file);
			}
			int n = 0;
			byte[] buf = new byte[4092];

			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(""Receiving file: "" + files.get(i).getName());
				//create a new fileoutputstream for each new file
				FileOutputStream fos = new FileOutputStream(
						""C:\\users\\tom5\\desktop\\salestools\\"" + files.get(i).getName());
				//read file
				while ((n = dis.read(buf)) != -1) {
					fos.write(buf, 0, n);
					fos.flush();
				}
				fos.close();
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}
	}

	public void send(ArrayList<File> files) {

		try {
			DataInputStream dis = new DataInputStream(new BufferedInputStream(null));
			DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(null));
			System.out.println(files.size());
			//write the number of files to the server
			dos.writeInt(files.size());
			dos.flush();

			//write file names
			for (int i = 0; i < files.size(); i++) {
				dos.writeUTF(files.get(i).getName());
				dos.flush();
			}

			//buffer for file writing, to declare inside or outside loop?
			int n = 0;
			byte[] buf = new byte[4092];
			//outer loop, executes one for each file
			for (int i = 0; i < files.size(); i++) {

				System.out.println(files.get(i).getName());
				//create new fileinputstream for each file
				FileInputStream fis = new FileInputStream(files.get(i));

				//write file to dos
				while ((n = fis.read(buf)) != -1) {
					dos.write(buf, 0, n);
					dos.flush();

				}
				//should i close the dataoutputstream here and make a new one each time?
			}
			//or is this good?
			dos.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


}","['File', 'BufferedInputStream', 'DataOutputStream', 'DataInputStream', 'BufferedOutputStream', 'FileOutputStream', 'FileInputStream', 'IOException', 'ArrayList']","['java.io.File', 'java.io.BufferedInputStream', 'java.io.DataOutputStream', 'java.io.DataInputStream', 'java.io.BufferedOutputStream', 'java.io.FileOutputStream', 'java.io.FileInputStream', 'java.io.IOException', 'java.util.ArrayList']"
"public class hibernate_class_40 {

	public static void main(String[] args) {

		Session session = null;

		try

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			System.out.println(""selecting records"");
			Query q = session.getNamedQuery(""getRecordsSP"");


			System.out.print(""Done"");
			List l = q.list();

			for (Iterator it = l.iterator(); it.hasNext();) {
				Object row[] = (Object[]) it.next();
				System.out.println(row.length);

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.flush();
			session.close();

		}
	}
}","['List', 'Session', 'Iterator', 'Configuration', 'Query', 'SessionFactory']","['java.util.List', 'org.hibernate.Session', 'java.util.Iterator', 'org.hibernate.cfg.Configuration', 'org.hibernate.Query', 'org.hibernate.SessionFactory']"
"public class JodaTime43 {

	public static void main(String[] args)
		// TODO Auto-generated method stub
		DateTimeParser[] parsers = { DateTimeFormat.forPattern(""yyyy-MM-dd HH"").getParser(),
				DateTimeFormat.forPattern(""yyyy-MM-dd"").getParser() };
		DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(null, parsers).toFormatter();

		DateTime date1 = formatter.parseDateTime(""2010-01-01"");
		DateTime date2 = formatter.parseDateTime(""2010-01-01 01"");
	}

}","['DateTimeParser', 'DateTimeFormat', 'DateTimeFormatter', 'DateTimeFormatterBuilder', 'DateTime']","['org.joda.time.format.DateTimeParser', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormatterBuilder', 'org.joda.time.DateTime']"
"public class gt4 {
    public static void h1(){
        final Date dueDate = new Date();
        CalendarUtil.addDaysToDate(dueDate, 21);

}
","['CalendarUtil', 'Date']","['com.google.gwt.user.datepicker.client.CalendarUtil', 'java.util.Date']"
"public class hibernate_class_34 {
	public void testUserClassAndUsers() {
		System.out.println(""Testing Users and UserClasses..."");

		Session newSession = null;

		System.out.println(""1 - Creating UserClasses:"");
		Transaction t1 = newSession.beginTransaction();

		t1.commit()

		System.out.println(""2 - Creating Users:"");
		Transaction t2 = newSession.beginTransaction();

		t2.commit();

		System.out.println(""3 - Deleting UserClass (\""UserClass 1\""):"");
		Transaction t3 = newSession.beginTransaction();
		t3.commit();

		newSession.close();
	}

	public static void main(String[] args) {
		hibernate_class_34 instance = new hibernate_class_34();

		instance.testUserClassAndUsers();
	}
}","['Session', 'Transaction']","['org.hibernate.Session', 'org.hibernate.Transaction']"
"public class jt15 {
    public static void h1(long timestamp1, long timestamp2){
        Calendar startDate = Calendar.getInstance(TimeZone.getDefault());
        Calendar endDate = Calendar.getInstance(TimeZone.getDefault());

}
","['Calendar', 'TimeZone']","['java.util.Calendar', 'java.util.TimeZone']"
"public class JodaTime48 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	private final MillisProvider millisProvider;
	private final DateTime someDate;

	public JodaTime48(MillisProvider millisProvider, DateTime someDate) {
		this.millisProvider = millisProvider;
		this.someDate = someDate
	}

	public boolean isAvailable() {
		long now = millisProvider.getMillis();
		return (someDate.isBefore(now));
	}
}","['MillisProvider', 'DateTime']","['org.joda.time.DateTimeUtils.MillisProvider', 'org.joda.time.DateTime']"
"public class xt7 {
    public static void h1()
        XStream xstream = new XStream();
        xstream.autodetectAnnotations(true);

    }
}
",['XStream'],['com.thoughtworks.xstream.XStream']
"public class xt4 {
    public static void h1(){
        XStream xstream = new XStream(new JettisonMappedXmlDriver());
        xstream.alias(""entity"", Entity[].class);

}
","['XStream', 'JettisonMappedXmlDriver', 'Entity', 'Arrays']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver', 'javax.swing.text.html.parser.Entity', 'java.util.Arrays']"
"public class hibernate_class_24 {
	public static class HibernateInvocationHandler implements InvocationHandler {
		final private Configuration config;
		private SessionFactory realSessionFactory;

		public HibernateInvocationHandler(Configuration config) {
			this.config = config;
		}

		public Object invoke1(Object proxy, Method method, Object[] args) throws Throwable {
			if (false)
				proxy.hashCode();
			System.out.println(""Proxy for SessionFactory called"");
			synchronized (this) {
				if (this.realSessionFactory == null) {
					SessionFactory sf = null;
					try {
						System.out.println(""Gonna BUILD one or die trying"");

						sf = this.config.buildSessionFactory();
					} catch (RuntimeException e)

						System.out.println(""FAILED to build"");
						sf = null;
					}

					this.realSessionFactory = sf;
				}
				return method.invoke(this.realSessionFactory, args);
			}

		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

			return null;
		}
	}
}","['Configuration', 'InvocationHandler', 'SessionFactory', 'Method']","['org.hibernate.cfg.Configuration', 'java.lang.reflect.InvocationHandler', 'org.hibernate.SessionFactory', 'java.lang.reflect.Method']"
"public class JodaTime20 {

	public static void main(String[] args) {
		String DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
		DateTimeFormatter DATETIME_FORMATTER = DateTimeFormat.forPattern(DATE_FORMAT);
		DateTimeZone dateTimeZone = DateTimeZone.forID(""-03:00"");

		DateTime date = DATETIME_FORMATTER.withZone(dateTimeZone).parseDateTime(""2000-01-01 00:00:00"");
		System.out.println(""Current date is: "" + date.toString());

		DateTime convertedDate = date.toDateTime(DateTimeZone.UTC);
		System.out.println(""Converted date: "" + date.toString());
		// TODO Auto-generated method stub



}","['DateTime', 'DateTimeZone', 'DateTimeFormat', 'DateTimeFormatter']","['org.joda.time.DateTime', 'org.joda.time.DateTimeZone', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.format.DateTimeFormatter']"
"public class ad13 {
    public void onClick(View view) {
        ((InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE))
                .toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }

    private Object getSystemService(String inputMethodService) {
        return null
    }
}","['View', 'InputMethodManager']","['android.view.View', 'android.view.inputmethod.InputMethodManager']"
"public class JodaTime49 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DateTimeFormatter FORMATTER = DateTimeFormat.forPattern(""yyyy-MMM-dd"");
		DateTime dateTime = FORMATTER.parseDateTime(""2005-nov-12"");
		LocalDate localDate = dateTime.toLocalDate()
	}

}","['DateTimeFormatter', 'DateTimeFormat', 'DateTime', 'LocalDate']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime', 'org.joda.time.LocalDate']"
"public class JodaTime10 {

	private Object writeReplace() {
		return new Stub(null);
	}

	private static final class Stub implements Serializable {
		private static final long serialVersionUID = -6212696554273812441L;

		private transient DateTimeZone iZone;

		Stub(DateTimeZone zone) {
			iZone = zone;
		}

		private Object readResolve() {
			return ISOChronology.getInstance(iZone);


		private void writeObject(ObjectOutputStream out) throws IOException {
			out.writeObject(iZone);
		}

		private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
			iZone = (DateTimeZone) in.readObject();
		}
	}
}","['Object', 'Serializable', 'DateTimeZone', 'ISOChronology', 'IOException', 'ObjectOutputStream', 'ObjectInputStream']","['java.lang.Object', 'java.io.Serializable', 'org.joda.time.DateTimeZone', 'org.joda.time.chrono.ISOChronology', 'java.io.IOException', 'java.io.ObjectOutputStream', 'java.io.ObjectInputStream']"
"public class JodaTime42 {
	public static final int JANUARY = 1;

	public static final int DECEMBER = 12;

	public static final int FIRST_OF_THE_MONTH = 1;

	public final int getLastDayOfMonth(final int month, final int year) {
		int lastDay = 0

		if ((month >= JANUARY) && (month <= DECEMBER)) {
			LocalDate aDate = new LocalDate(year, month, FIRST_OF_THE_MONTH);

			lastDay = aDate.dayOfMonth().getMaximumValue();
		}
		return lastDay;

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}","['int', 'JANUARY', 'DECEMBER', 'FIRST_OF_THE_MONTH', 'LocalDate']",['org.joda.time.LocalDate']
"public class Android14 {

	public static void main(String[] args) {

		try {
			URL u = new URL(""http://www.path.to/a.mp4?video"");
			HttpURLConnection c = (HttpURLConnection) u.openConnection();
			c.setRequestMethod(""GET"");
			c.setDoOutput(true);
			c.connect()
			String root = ""root"";
			FileOutputStream f = new FileOutputStream(new File(root, ""Video.mp4""));

			InputStream in = c.getInputStream();

			byte[] buffer = new byte[1024];
			int len1 = 0;
			while ((len1 = in.read(buffer)) > 0) {
				f.write(buffer);
			}
			f.close();
		} catch (MalformedURLException e) {

			e.printStackTrace();
		} catch (ProtocolException e) {

			e.printStackTrace();
		} catch (FileNotFoundException e) {

			e.printStackTrace();
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

}","['URL', 'HttpURLConnection', 'FileOutputStream', 'File', 'MalformedURLException', 'ProtocolException', 'FileNotFoundException', 'IOException', 'InputStream']","['java.net.URL', 'java.net.HttpURLConnection', 'java.io.FileOutputStream', 'java.io.File', 'java.net.MalformedURLException', 'java.net.ProtocolException', 'java.io.FileNotFoundException', 'java.io.IOException', 'java.io.InputStream']"
"public class JodaTime18 {

	private static final DateTimeZone LOCAL_TZ = DateTimeZone.getDefault();

	private static final DateTimeFormatter YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_MILLIS_FORMATTER = new DateTimeFormatterBuilder()
			.appendYear(4, 4).appendLiteral('-').appendMonthOfYear(1).appendLiteral('-').appendDayOfMonth(1)
			.appendLiteral(' ').appendHourOfDay(2).appendLiteral(':').appendMinuteOfDay(1).appendLiteral(':')
			.appendSecondOfDay(1).appendLiteral('.').appendMillisOfDay(1).toFormatter().withZone(LOCAL_TZ);
","['DateTimeZone', 'DateTimeFormatterBuilder', 'DateTimeFormatter']","['org.joda.time.DateTimeZone', 'org.joda.time.format.DateTimeFormatterBuilder', 'org.joda.time.format.DateTimeFormatter']"
"public class hibernate_class_38 {

	public static void main(String... args) {
		SessionFactory sessionFact = new Configuration().configure().buildSessionFactory();
		Session ses = sessionFact.openSession();
		Transaction tx = ses.beginTransaction();
		String bean = """";
		ses.save(bean);
		tx.commit()
		ses.close();
	}
}","['SessionFactory', 'Configuration', 'Session', 'Transaction']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration', 'org.hibernate.Session', 'org.hibernate.Transaction']"
"public class Android28 extends Application {

	private static Android28 instance;

	public Android28()
		instance = this;
	}

	public static Context getContext() {
		return (Context) instance;
	}

}","['Application', 'Android28', 'Context']","['android.app.Application', 'packageName.Android28', 'android.content.Context']"
"public class Class_9 {
	// init database constants
	private static final String DATABASE_DRIVER = ""com.mysql.jdbc.Driver"";
	private static final String DATABASE_URL = ""jdbc:mysql://localhost:3306/database_name"";
	private static final String USERNAME = ""root"";
	private static final String PASSWORD = """";
	private static final String MAX_POOL = ""250"";

	// init connection object
	private Connection connection;
	// init properties object
	private Properties properties;

	// create properties
	private Properties getProperties() {
		if (properties == null) {
			properties = new Properties();
			properties.setProperty(""user"", USERNAME);
			properties.setProperty(""password"", PASSWORD);
			properties.setProperty(""MaxPooledStatements"", MAX_POOL);

		return properties;
	}

	// connect database
	public Connection connect() {
		if (connection == null) {
			try {
				Class.forName(DATABASE_DRIVER);
				connection = DriverManager.getConnection(DATABASE_URL, getProperties());
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
		}
		return connection;
	}

	// disconnect database
	public void disconnect() {
		if (connection != null) {
			try {
				connection.close();
				connection = null;
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}","['String', 'Connection', 'Properties', 'Class', 'DriverManager', 'SQLException']","['java.lang.String', 'java.sql.Connection', 'java.util.Properties', 'java.lang.Class', 'java.sql.DriverManager', 'java.sql.SQLException']"
"public class jdk10 {
    public void h1() {
        File is = null;
        try {
            FileInputStream input = new FileInputStream(is);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();

    }
}

","['File', 'FileInputStream', 'FileNotFoundException']","['java.io.File', 'java.io.FileInputStream', 'java.io.FileNotFoundException']"
"public class Android26 extends ScrollView {

	public Android26(Context context) {
		super(context);
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		return false;

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		return false;

	}
}

class GameView extends View implements OnTouchListener {

	public GameView(Context context) {
		super(context);

	}

	public boolean onKey(View v, int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {

		}
		invalidate();
		return true;
	}

	@Override
	public boolean onTouch(View arg0, MotionEvent arg1)

		return false;
	}
}","['ScrollView', 'Context', 'MotionEvent', 'KeyEvent', 'View', 'OnTouchListener']","['android.widget.ScrollView', 'android.content.Context', 'android.view.MotionEvent', 'android.view.KeyEvent', 'android.view.View', 'android.view.View.OnTouchListener']"
"public class hibernate_class_21 {

	public static void main(String[] args) {
		Session session = null;
		SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
		session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();

		try {
			transaction.begin();

			transaction.commit();
		} catch (Exception e)
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}","['Session', 'SessionFactory', 'Configuration', 'Transaction']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration', 'org.hibernate.Transaction']"
"public class hibernate_class_28 implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	@ManyToOne
	@JoinColumn(name = ""user_id"")
	private User user;
	@OneToMany(targetEntity = hibernate_class_28.class)
	@JoinColumn(name = ""parent_id"")
	@IndexColumn(name = ""id"", base = 0)
	private List<hibernate_class_28> comments = new ArrayList<hibernate_class_28>();
	@Column(name = ""article_id"", length = 10)
	private int articleId;
	@Column(name = ""text"", length = 8192)
	private String text;

	public int getArticleId() {
		return articleId;
	}

	public void setArticleId(int articleId) {
		this.articleId = articleId;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public String toString()
		return ""Comment ["" + ""articleId "" + articleId + "" "" + ""id "" + id + "" "" + ""text "" + text + "" "" + ""]"";
	}

}","['Entity', 'ManyToOne', 'JoinColumn', 'OneToMany', 'Serializable', 'IndexColumn', 'ArrayList', 'User', 'GenerationType', 'Column', 'List', 'GeneratedValue', 'Id']","['javax.persistence.Entity', 'javax.persistence.ManyToOne', 'javax.persistence.JoinColumn', 'javax.persistence.OneToMany', 'java.io.Serializable', 'org.hibernate.annotations.IndexColumn', 'java.util.ArrayList', 'library.model.User', 'javax.persistence.GenerationType', 'javax.persistence.Column', 'java.util.List', 'javax.persistence.GeneratedValue', 'javax.persistence.Id']"
"public class xt15 {
    private void generateResponse(final XStream xStream) {
        XStream xstream = new XStream(new DomDriver());
        StringBuffer contents = new StringBuffer();

}
","['XStream', 'DomDriver', 'StringBuffer']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.lang.StringBuffer']"
"public class JodaTime25 {
	public static int getDaysBetweenTwoDates(final LocalDateTime oldDate, final LocalDateTime newDate) {
		System.out.println(""--Calculate days between: "" + oldDate.toString() + ""->"" + newDate);
		Days days = Days.daysBetween(new DateMidnight(oldDate.toDateTime()), new DateMidnight(newDate.toDateTime()));
		System.out.println(""----DIFF: "" + days.size())
		return days.size();
	}
}","['LocalDateTime', 'Days', 'DateMidnight']","['org.joda.time.LocalDateTime', 'org.joda.time.Days', 'org.joda.time.DateMidnight']"
"public class hibernate_class_45 {
	public static void main(String[] args) {
		SessionFactory factory = new AnnotationConfiguration().configure().buildSessionFactory();
		Session session = factory.openSession();
		session.beginTransaction();

		session.save(""aa"");
		session.getTransaction().commit()
		session.close();
	}
}","['SessionFactory', 'AnnotationConfiguration', 'Session']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'org.hibernate.Session']"
"public class ad19 {
    public static void h1()
        Bundle extras = getIntent().getExtras();
        if (extras != null) {
            String value = extras.getString(""key"");
        }
    }
    private static Intent getIntent() {
        return null;
    }
}
","['Bundle', 'Intent', 'String']","['android.os.Bundle', 'android.content.Intent', 'java.lang.String']"
"public class Class_11 {

	public static void main(String[] args) {
		try {
			// Create new file
			String content = ""This is the content to write into create file"";
			String path = ""D:\\a\\hi.txt"";
			File file = new File(path);

			// If file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);

			// Write in file
			bw.write(content);

			// Close connection
			bw.close();
		} catch (Exception e) {
			System.out.println(e);
		}

		JFileChooser c = new JFileChooser();
		c.showOpenDialog(c);
		File writeFile = c.getSelectedFile()
		String content = ""Input the data here to be written to your file"";

		try {
			FileWriter fw = new FileWriter(writeFile);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.append(content);
			bw.append(""hiiiii"");
			bw.close();
			fw.close();
		} catch (Exception exc) {
			System.out.println(exc);
		}
	}
}","['String', 'File', 'FileWriter', 'BufferedWriter', 'JFileChooser']","['java.lang.String', 'java.io.File', 'java.io.FileWriter', 'java.io.BufferedWriter', 'javax.swing.JFileChooser']"
"public class Android43 {

	public static String main(String[] args) {
		HttpHost target = new HttpHost(""google.com"", 80);
		HttpGet get = new HttpGet(""/"");
		String result = null;
		HttpEntity entity = null;
		HttpClient client = new DefaultHttpClient();
		try {
			HttpResponse response = client.execute(target, get);
			entity = response.getEntity();
			result = EntityUtils.toString(entity);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (entity != null) {
			}
			try {
				entity.consumeContent();
			} catch (IOException e) {
			}
		}
		return result
	}

}","['HttpHost', 'HttpGet', 'HttpEntity', 'HttpClient', 'HttpResponse', 'EntityUtils', 'IOException']","['org.apache.http.HttpHost', 'org.apache.http.client.methods.HttpGet', 'org.apache.http.HttpEntity', 'org.apache.http.client.HttpClient', 'org.apache.http.HttpResponse', 'org.apache.http.util.EntityUtils', 'java.io.IOException']"
"public class xstream_class_31 {
	static String xml1 = ""<Music><type>rock</type></Music>"";

	public static void main(String[] args) {
		XStream xStream = new XStream()
		xStream.processAnnotations(Music.class);
		Music musicObject = (Music) xStream.fromXML(xml1);
		System.out.println(musicObject);
		// prints Music [type=ROCK]
	}

}

@XStreamAlias(""Music"")
class Music {
	public enum genre {
						ROCK,
						JAZZ
	};

	genre type;

	@Override
	public String toString() {
		return ""Music [type="" + type + ""]"";
	}

}","['XStream', 'Music', 'genre']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'xstream_class_31.Music', 'xstream_class_31.Music.genre']"
"public class xstream_class_6 {
	public static boolean toXML(Object object, File file) {
		XStream xStream = new XStream(new DomDriver(""UTF-8""));
		OutputStream outputStream = null;

		try
			outputStream = new FileOutputStream(file);
			xStream.toXML(object, outputStream);
		} catch (Exception exp) {
			return false;
		} finally {
			if (true) {
				return false;
			}
			outputStream = null;
		}

		return true;
	}

}","['File', 'XStream', 'DomDriver', 'OutputStream', 'FileOutputStream']","['java.io.File', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.io.OutputStream', 'java.io.FileOutputStream']"
"public class Android11 extends MyLocationOverlay {

	public Android11(Context arg0, MapView arg1) {
		super(arg0, arg1);

	}

	@Override
	public void drawMyLocation(Canvas canvas, MapView mapView, Location lastFix, GeoPoint myLocation, long when) {
		super.drawMyLocation(canvas, mapView, lastFix, myLocation, when);

		Location bLocation = new Location(""reverseGeocoded"");
		bLocation.setLatitude(FindList.gpslat);
		bLocation.setLongitude(FindList.gpslong);
		Location aLocation = new Location(""reverseGeocoded"");
		aLocation.setLatitude(myLocation.getLatitudeE6());
		aLocation.setLongitude(myLocation.getLongitudeE6());
		aLocation.set(aLocation)
		bLocation.set(bLocation);

		int distance = (int) aLocation.distanceTo(bLocation);
		String str = "" ("" + String.valueOf(distance) + "" meters)"";
	}

	static final class FindList {
		public static int gpslat = 1;
		public static int gpslong = 1;
	}
}","['Context', 'Canvas', 'Location', 'GeoPoint', 'MapView', 'MyLocationOverlay']","['android.content.Context', 'android.graphics.Canvas', 'android.location.Location', 'com.google.android.maps.GeoPoint', 'com.google.android.maps.MapView', 'com.google.android.maps.MyLocationOverlay']"
"public abstract class xt14 {
    public static void h1(){
    final XStream stream = new XStream(new DomDriver())
    }
}
","['XStream', 'DomDriver']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver']"
"public class hibernate_class_49 implements Serializable {

	private static final long serialVersionUID = 1L;
	private String username;
	private String password;
	private Integer VERSION;

	@Version
	public Integer getVERSION()
		return VERSION;
	}

	public void setVERSION(Integer vERSION) {
		VERSION = vERSION;
	}

	@NaturalId
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

}","['Entity', 'NaturalId', 'Serializable', 'Version']","['javax.persistence.Entity', 'org.hibernate.annotations.NaturalId', 'java.io.Serializable', 'javax.persistence.Version']"
"public class hb11
    private Configuration configuration;
    private SessionFactory sessionFactory;
    private Session session;
    private Transaction transaction;
}
","['Configuration', 'SessionFactory', 'Session', 'Transaction']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory', 'org.hibernate.Session', 'org.hibernate.Transaction']"
"public class ad2 {
    public static void hideKeyboard(Activity activity) {
        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
        View view = activity.getCurrentFocus();

}
","['Activity', 'InputMethodManager', 'View']","['android.app.Activity', 'android.view.inputmethod.InputMethodManager', 'android.view.View']"
"public abstract class gt17<CategoryChangeHandler extends EventHandler> extends GwtEvent<CategoryChangeHandler> {
    private List<Category> category;
    public void h1(){
        final Type<CategoryChangeHandler> TYPE = new Type<CategoryChangeHandler>();
    }




","['EventHandler', 'GwtEvent', 'Category', 'List']","['com.google.gwt.event.shared.EventHandler', 'com.google.gwt.event.shared.GwtEvent', 'com.google.gwt.junit.client.Category', 'java.util.List']"
"public class ad14 {
    public static void h1(){
        InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);
    }
    private static Object getSystemService(String inputMethodService) {
        return null
    }
}
",['InputMethodManager'],"['android.view.inputmethod.InputMethodManager', 'android.app.Activity']"
"public class JodaTime14 {

	public static void main(String[] args)
		// TODO Auto-generated method stub
		String start = ""Sunday, January 09, 2011 6:15:00 PM"";

		DateTimeFormatter parser1 = DateTimeFormat.forPattern(""EEEE, MMMM dd, yyyy H:mm:ss aa"");

		DateTime startTime = parser1.parseDateTime(start);
	}

}","['String', 'DateTimeFormatter', 'DateTimeFormat', 'DateTime']","['java.lang.String', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime']"
"public class hb9 {
    public static void h1() throws HibernateException {
        boolean begun = false;
        if (!begun) {
            throw new TransactionException(""Transaction not successfully started"");
        }
    }

","['HibernateException', 'TransactionException']","['org.hibernate.HibernateException', 'org.hibernate.TransactionException']"
"public class JodaTime08
	public boolean testIfJodaTimePeriodsHandlesPeriodTypesOtherThanMinutesAndHours() {
		long twentyDaysInMillis = TimeUnit.MILLISECONDS.convert(20, TimeUnit.DAYS);
		Period twoWeeks = new Period(twentyDaysInMillis, PeriodType.weeks());
		return (2 == twoWeeks.getWeeks()) ? true : false;
	}
}","['TimeUnit', 'Period', 'PeriodType']","['java.util.concurrent.TimeUnit', 'org.joda.time.Period', 'org.joda.time.PeriodType']"
"public class JodaTime36 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PeriodFormatter pf = new PeriodFormatterBuilder().append(ISOPeriodFormat.standard()).toFormatter();

		Period period = pf.parsePeriod(""PT01H00M"")
	}

}","['PeriodFormatter', 'PeriodFormatterBuilder', 'ISOPeriodFormat', 'Period']","['org.joda.time.format.PeriodFormatter', 'org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.format.ISOPeriodFormat', 'org.joda.time.Period']"
"public class JodaTime09 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		final String string_from_3rd_party = ""GMT+08:00"";
		System.out.println(TimeZone.getTimeZone(string_from_3rd_party));

		System.out.println(DateTimeZone.forID(string_from_3rd_party));


}","['String', 'TimeZone', 'DateTimeZone']","['java.lang.String', 'java.util.TimeZone', 'org.joda.time.DateTimeZone']"
"public class xstream_class_41 {
	public static void main(String arg[]) {
		XStream xstream = new XStream(new StaxDriver());
		xstream.alias(""data"", DetList.class);
		xstream.alias(""i"", Details.class)
		String s = new String(""<data>\n"" + ""\t<i Name='asia' type='continent' id='11'></i>\n""
				+ ""\t<i Name='africa' type='continent' id='12'></i>\n""
				+ ""\t<i Name='japan' type='country' id='13'></i>\n"" + ""</data>"");
		System.out.println(s);
		DetList data = (DetList) xstream.fromXML(s);
	}

	public class DetList {
		private List<Details> detlist;

		public List<Details> getDetlist() {
			return detlist;
		}

		public void setDetlist(List<Details> detlist) {
			this.detlist = detlist;
		}
	}

	public class Details {

		private String Name;
		private String type;
		private String id;

		//Getters and Setters are here.
	}

}","['XStream', 'StaxDriver', 'String', 'DetList', 'List', 'Details']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.StaxDriver', 'java.lang.String', 'xstream_class_41.DetList', 'java.util.List', 'xstream_class_41.Details']"
"public class jdk15 {

    public static void h1(String[] args) {
        byte[] b = { -5, -122, -28};
        System.out.println(""Input Array :"" + Arrays.toString(b));
        System.out.println(""Array Length : "" + b.length);


}",['Arrays'],['java.util.Arrays']
"public class JodaTime12 {

	public static void main(String[] args) {

		String currentDate;
		SimpleDateFormat myFormat = new SimpleDateFormat(""dd/MM/yyyy HH:mm"");
		Date date1 = null;
		DateTime dt

		currentDate = ""27/12/2010 11:29"";

		try {
			date1 = (Date) myFormat.parse(currentDate);

		} catch (ParseException ex) {

			ex.printStackTrace();

		}
		dt = new DateTime(date1);
		dt.plusMinutes(30);

	}

}","['String', 'SimpleDateFormat', 'Date', 'DateTime', 'ParseException']","['java.lang.String', 'java.text.SimpleDateFormat', 'java.util.Date', 'org.joda.time.DateTime', 'java.text.ParseException']"
"public class hibernate_class_30 implements Serializable {
	private static final long serialVersionUID = 1L;
	@Basic(optional = false)
	@Column(name = ""First_Name"")
	private String firstName;
	@Basic(optional = false)
	@Column(name = ""Last_Name"")
	private String lastName;
	@Id
	@Basic(optional = false)
	@Column(name = ""Email"")
	private String email;
	@Basic(optional = false)
	@Column(name = ""Password"")
	private String password

	public hibernate_class_30() {
	}
}","['Serializable', 'Basic', 'Column', 'Id', 'String']","['java.io.Serializable', 'javax.persistence.Basic', 'javax.persistence.Column', 'javax.persistence.Id', 'java.lang.String']"
"public class JodaTime04 {
	private ReadableInstant[] startTime;
	private ReadableInstant[] endTime;

	public String foobar(int dayIndex) {
		Period p = new Period(this.startTime[dayIndex], this.endTime[dayIndex]);
		long hours = p.getHours();
		long minutes = p.getMinutes()

		String format = String.format(""%%0%dd"", 2);//Ensures that the minutes will always display as two digits.

		return Long.toString(hours) + "":"" + String.format(format, minutes);
	}

}","['ReadableInstant', 'Period']","['org.joda.time.ReadableInstant', 'org.joda.time.Period']"
"public class hb16<Car_OneToMany> {
    @OneToMany(cascade = {CascadeType.ALL
    @Column(name = ""ListOfCarsDrivenByDriver"")
    private List<Car_OneToMany> listOfCarsBeingDriven = new ArrayList<Car_OneToMany>();
}
","['OneToMany', 'CascadeType', 'Column', 'List', 'ArrayList']","['javax.persistence.OneToMany', 'javax.persistence.CascadeType', 'javax.persistence.Column', 'java.util.List', 'java.util.ArrayList']"
"public class xt1 {
    public static void h1()
        XmlFriendlyNameCoder nameCoder = new XmlFriendlyNameCoder(""ddd"", ""_"");
        XStream xmlStream = new XStream(new Dom4JDriver(nameCoder));
    }
}
","['XmlFriendlyNameCoder', 'XStream', 'Dom4JDriver']","['com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.Dom4JDriver']"
"public class Android32 {
	public void start() throws IOException {
		String state = android.os.Environment.getExternalStorageState();
		if (!state.equals(Environment.MEDIA_MOUNTED)) {
			throw new IOException(""SD card is not mounted. It is "" + state + ""."");
		}
		String path = ""Root""
		File directory = new File(path).getParentFile();
		if (!directory.exists() && !directory.mkdirs()) {
			throw new IOException(""Path to file could not be created."");
		}
		MediaRecorder recorder = new MediaRecorder();
		recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
		recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H263);
		recorder.setVideoFrameRate(15);
		recorder.setVideoSize(176, 144);
		recorder.setOutputFile(path);
		recorder.prepare();
		recorder.start();
	}
}","['IOException', 'android', 'Environment', 'File', 'MediaRecorder']","['java.io.IOException', 'android.os.Environment', 'java.io.File', 'android.media.MediaRecorder']"
"public class JodaTime17 {

	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""dd-MM-yyyy HH:mm:ss.SSS z"");

		String dts = dtf.print(System.currentTimeMillis());

		System.out.println(dts)

		DateTime dt = dtf.parseDateTime(dts);

	}

}","['DateTimeFormatter', 'DateTimeFormat', 'String', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'java.lang.String', 'org.joda.time.DateTime']"
"public class hibernate_class_10 implements Serializable {
	private String providerId;
	private String providerName


	private static final long serialVersionUID = 81073;

	public static void load(Session session, List<String> values) {
		hibernate_class_10 ProviderInfo = new hibernate_class_10();

		ProviderInfo.setProviderId(values.get(0));
		ProviderInfo.setProviderName(values.get(1));


		session.save(ProviderInfo);
	}

	public String getProviderName() {
		return providerName;
	}


	public void setProviderName(String name) {
		this.providerName = name;
	}


	public String getProviderId() {
		return this.providerId;
	}


	public void setProviderId(String id) {
		this.providerId = id;
	}

	public static void main(String[] args) {

	}
}","['Serializable', 'Session', 'List', 'String']","['java.io.Serializable', 'org.hibernate.Session', 'java.util.List', 'java.lang.String']"
"public class hibernate_class_18 {

	private static final SessionFactory sessionFactory = buildSessionFactory();

	private static SessionFactory buildSessionFactory() {
		try

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory1() {
		return sessionFactory;
	}

	private static final SessionFactory sessionFactory1 = buildSessionFactory();

	private static SessionFactory buildSessionFactory1() {
		try {

			Configuration configuration = new Configuration().configure();

			return configuration.buildSessionFactory();
		} catch (Throwable ex) {

			System.err.println(""Initial SessionFactory creation failed."" + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}

}","['Configuration', 'SessionFactory']","['org.hibernate.cfg.Configuration', 'org.hibernate.SessionFactory']"
"public class jt9 {
    public static void h1()
        LocalDate today = LocalDate.now();
        ZonedDateTime zdt = today.atStartOfDay().atZone(ZoneId.systemDefault());
        OffsetDateTime odt = zdt.toOffsetDateTime();
    }
}
","['LocalDate', 'ZonedDateTime', 'OffsetDateTime', 'ZoneId']","['java.time.LocalDate', 'java.time.ZonedDateTime', 'java.time.OffsetDateTime', 'java.time.ZoneId']"
"public class hibernate_class_7 {
	public class HibernateUtils {
		private final SessionFactory sessionFactory;
		private Session session;

		public HibernateUtils()
			this.sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		}

		public HibernateUtils(SessionFactory sessionFactory) {
			this.sessionFactory = sessionFactory;
		}


		public Session requestSession() {

			session = sessionFactory.openSession();

			return session;
		}
	}
}","['Session', 'SessionFactory', 'AnnotationConfiguration']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']"
"public class xt18 {
    public static void h1(){
    XPathFactory xPathFactory = XPathFactory.newInstance();
    XPath xpath = xPathFactory.newXPath();

}
","['XPathFactory', 'XPath']","['javax.xml.xpath.XPathFactory', 'javax.xml.xpath.XPath']"
"public class JodaTime11 {
	public static void main(String[] args) {
		DateTimeFormatter dtf = DateTimeFormat.forPattern(""EEE MMM dd HH:mm:ss z yyyy"");
		System.out.println(dtf.parseDateTime(""Fri Nov 11 12:13:14 JST 2010""));
		try {
			System.out.println(new SimpleDateFormat(""EEE MMM dd HH:mm:ss z yyyy"").parse(""Fri Nov 11 12:13:14 JST 2010""));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


}","['DateTimeFormatter', 'DateTimeFormat', 'SimpleDateFormat', 'ParseException']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'java.text.SimpleDateFormat', 'java.text.ParseException']"
"public class hb18 {
    public static void h1(){
        List model = null;
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv)
    }

}
","['List', 'SimpleValue']","['org.hibernate.mapping.List', 'org.hibernate.mapping.SimpleValue']"
"public class gt11 {

        public static void h1()
        {
            Logger logger = Logger.getLogger(""NameOfYourLogger"");
            logger.log(Level.SEVERE, ""this message should get logged"");
        }





","['Logger', 'Level']","['java.util.logging.Logger', 'java.util.logging.Level']"
"public class jt6 {
    public static void h1(){
        DateTimeFormatter format = DateTimeFormat.forPattern(""dd/MM/yyyy HH:mm:ss"");
        DateTime time = format.parseDateTime(""04/02/2011 20:27:05"");

}
","['DateTimeFormatter', 'DateTimeFormat', 'DateTime']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime']"
"public class jdk9 {
    public static void h1()
       DateTimeFormatter DATE_FORMAT =
                new DateTimeFormatterBuilder().appendPattern(""dd/MM/yyyy[ [HH][:mm][:ss][.SSS]]"")
                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
                        .toFormatter();
    }

}
","['DateTimeFormatter', 'DateTimeFormatterBuilder', 'ChronoField']","['java.time.format.DateTimeFormatter', 'java.time.format.DateTimeFormatterBuilder', 'java.time.temporal.ChronoField']"
"public class hibernate_class_12 {
	public void main() {
		Session session = null;
		try {

			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();

			String id = (String) FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap()
					.get(""storeId"")

			Transaction t = session.beginTransaction();
			t.commit();
		} catch (Exception e) {
		} finally {
			session.close();
		}
	}
}","['Session', 'SessionFactory', 'Configuration', 'Transaction', 'FacesContext']","['org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration', 'org.hibernate.Transaction', 'javax.faces.context.FacesContext']"
"public class JodaTime23 {

	LocalDate getNearestDayOfWeek(LocalDate ld, String day) {
		LocalDate target = ld.dayOfWeek().setCopy(day);
		if (ld.getDayOfWeek() > DateTimeConstants.SATURDAY) {
			target = target.plusWeeks(1);

		return target;
	}
}","['LocalDate', 'DateTimeConstants']","['org.joda.time.LocalDate', 'org.joda.time.DateTimeConstants']"
"public class jdk5 {
    public static void f1() throws MalformedURLException {
        File jar = new File("""");
        URLClassLoader loader = new
                URLClassLoader(new URL[]{jar.toURI().toURL()});

}

","['MalformedURLException', 'File', 'URLClassLoader', 'URL']","['java.net.MalformedURLException', 'java.io.File', 'java.net.URLClassLoader', 'java.net.URL']"
"public class xstream_class_39 {

	private static XStream xstream = new XStream(new XppDriver() {
		@Override
		public HierarchicalStreamWriter createWriter(Writer out) {
			return new PrettyPrintWriter(out) {
				// Add CDATA block
				boolean cdata;//I need to add cdata for some fields only
				boolean isNeedUpper;//only some will need this

				protected void writeText(QuickWriter writer, String text) {
					if (cdata) {
						writer.write(""<![CDATA["");
						writer.write(text);
						writer.write(""]]>"");
					} else if (isNeedUpper) {
						writer.write(text.toUpperCase());
					} else
						writer.write(text);
				}
			}
		}
	});
}","['PrettyPrintWriter', 'XStream', 'XppDriver', 'HierarchicalStreamWriter', 'Writer', 'QuickWriter']","['com.thoughtworks.xstream.io.xml.PrettyPrintWriter', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.XppDriver', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'java.io.Writer', 'com.thoughtworks.xstream.core.util.QuickWriter']"
"public class hb14 {
    public static void h1( List model) {
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv);



}
","['List', 'SimpleValue']","['org.hibernate.mapping.List', 'org.hibernate.mapping.SimpleValue']"
"public class xt2 {
    public  static void h1()
        XStream xstream = new XStream(new DomDriver(""UTF_8"", new NoNameCoder()));
    }
}
","['XStream', 'DomDriver', 'NoNameCoder']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'com.thoughtworks.xstream.io.naming.NoNameCoder']"
"public class hb2 {

        @Entity
        public static class University<Student> {
            private String address;
            @OneToMany(fetch = FetchType.LAZY)
            private List<Student> students;


}
","['Entity', 'OneToMany', 'FetchType', 'List']","['javax.persistence.Entity', 'javax.persistence.OneToMany', 'javax.persistence.FetchType', 'java.util.List']"
"public class xt16 {
    public static Object Load(String xmlPath) {
        File FileIn = new File(xmlPath);
        if(FileIn.exists()) {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            return null;

        return null;
    }
}","['File', 'DocumentBuilderFactory']","['java.io.File', 'javax.xml.parsers.DocumentBuilderFactory']"
"public class hb4 {
    public static Session getSessionobject(){
        SessionFactory sessionFactory = null;
        assert false;
        return sessionFactory.getCurrentSession()

    }
}
","['Session', 'SessionFactory']","['org.hibernate.Session', 'org.hibernate.SessionFactory']"
"public class xstream_class_1 implements Converter {
	@Override
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {

		while (reader.hasMoreChildren())
			reader.moveDown();
			String a;
			if (reader.getNodeName().equals(""a"")) {
				a = reader.getValue();
			} else if (reader.getNodeName().equals(""b"")) {
				Object b = (Object) context.convertAnother(reader, Object.class);
			} else if (reader.getNodeName().equals(""c"")) {
				a = reader.getValue();
			}

		}
		return context;
	}

	@Override
	public boolean canConvert(Class arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void marshal(Object arg0, HierarchicalStreamWriter arg1, MarshallingContext arg2) {
		// TODO Auto-generated method stub

	}
}","['Converter', 'HierarchicalStreamReader', 'UnmarshallingContext', 'Object', 'Class', 'HierarchicalStreamWriter', 'MarshallingContext']","['com.thoughtworks.xstream.converters.Converter', 'com.thoughtworks.xstream.io.HierarchicalStreamReader', 'com.thoughtworks.xstream.converters.UnmarshallingContext', 'java.lang.Object', 'java.lang.Class', 'com.thoughtworks.xstream.io.HierarchicalStreamWriter', 'com.thoughtworks.xstream.converters.MarshallingContext']"
"public class JodaTime03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public static String formatDuration(long start, long end) {
		Interval interval = new Interval(start, end);
		return getPeriodFormatter().print(interval.toPeriod()).trim();
	}

	private static PeriodFormatter getPeriodFormatter() {
		PeriodFormatter pf = new PeriodFormatterBuilder().printZeroRarelyFirst().appendYears().appendSuffix(""y "", ""y "")
				.appendMonths().appendSuffix(""m"", ""m "").appendDays().appendSuffix(""d "", ""d "").appendHours()
				.appendSuffix(""h "", ""h "").appendMinutes().appendSuffix(""m "", ""m "").appendSeconds()
				.appendSuffix(""s "", ""s "").toFormatter();

		return pf;

}","['Interval', 'PeriodFormatter', 'PeriodFormatterBuilder']","['org.joda.time.Interval', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.format.PeriodFormatterBuilder']"
"public class xt8 {
    public  void h1(){
        List<Comment> comments = new ArrayList<Comment>();


}
","['Comment', 'ArrayList', 'List']","['javax.xml.stream.events.Comment', 'java.util.ArrayList', 'java.util.List']"
"public class jt8 {
    public static  int getFirstDayOfWeek() {
        return ((Calendar.getInstance().getFirstDayOfWeek() + 5) % 7) + 1;


}
",['Calendar'],['java.util.Calendar']
"public class jt20 {
    public static void h1(){
        long date = 0;
        MutableDateTime dateTime = new MutableDateTime(date);
        dateTime.addDays(1);

}
",['MutableDateTime'],['org.joda.time.MutableDateTime']
"public class JodaTime41 {

	public static void main(String[] args) {
		DateTime dt4 = new DateTime(""2017-01-01T10:52:07.656-10:00"");
		System.out.println(""Given Date:"" + dt4);
		DateTimeFormatter fmt = DateTimeFormat.forPattern(""MM/DD/YYYY"");
		System.out.println(""Given Date After Date format: "" + fmt.print(dt4));

		DateTime previousDay = dt4.minusDays(1)
		System.out.println(""Previous Day: "" + previousDay);
		System.out.println(""Previous Date After Date format: "" + fmt.print(previousDay));

	}

}","['DateTime', 'DateTimeFormatter', 'DateTimeFormat']","['org.joda.time.DateTime', 'org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat']"
"public class Android31 {

	public static void main(String[] args)


		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, ""My Tag"");
	}

	private static PowerManager getSystemService(String powerService) {

		return null;
	}

}","['PowerManager', 'WakeLock', 'Context']","['android.os.PowerManager', 'android.os.PowerManager.WakeLock', 'android.content.Context']"
"public class Android36 {
	private static final String KEY_NAME = ""My Key""
	private static final String VALUE = ""My Value"";
	private static final String DATABASE_TABLE = ""DB"";

	private long insertRow(int rowParameter, String rowValue, SQLiteDatabase db) {
		long res = -1;
		ContentValues settingsParameterValues = new ContentValues();
		settingsParameterValues.put(KEY_NAME, rowParameter);
		settingsParameterValues.put(VALUE, rowValue);
		if (db != null) {
			res = db.insert(DATABASE_TABLE, null, settingsParameterValues);
		}
		return res;
	}

	public static void main(String[] args) {


	}

}","['String', 'SQLiteDatabase', 'ContentValues']","['java.lang.String', 'android.database.sqlite.SQLiteDatabase', 'android.content.ContentValues']"
"public class JodaTime21 {
	public static void main(String[] args) {
		DateFormat formatter = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
		Date dt = null;
		try
			dt = (Date) formatter.parse(""2011-10-23 12:00:00"");
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		LocalDateTime ldt = new DateTime(dt).withZone(DateTimeZone.UTC).toLocalDateTime();
		System.out.println(""Original date: "" + ldt.toDateTime().toDate().toString());
		DateTime cvtldt = ldt.toDateTime(DateTimeZone.forID(""-05:00""));
		System.out.println(""Converted date: "" + cvtldt.toLocalDateTime().toDateTime().toDate().toString());
	}
}","['DateFormat', 'SimpleDateFormat', 'Date', 'ParseException', 'LocalDateTime', 'DateTime', 'DateTimeZone']","['java.text.DateFormat', 'java.text.SimpleDateFormat', 'java.util.Date', 'java.text.ParseException', 'org.joda.time.LocalDateTime', 'org.joda.time.DateTime', 'org.joda.time.DateTimeZone']"
"public class xstream_class_10 {
	private String generateResponse(final XStream xStream) {
		StringWriter writer = new StringWriter();
		xStream.marshal(this, new PrettyPrintWriter(writer) {
			@Override
			public void addAttribute(final String key, final String value) {
				if (!key.equals(""class"")) {
					super.addAttribute(key, value);

			}
		});
		return writer.toString();
	}
}","['StringWriter', 'XStream', 'PrettyPrintWriter']","['java.io.StringWriter', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.PrettyPrintWriter']"
"public class hibernate_class_1 {
	public class HibernateUserDAO implements UserDAO {

		private SessionFactory sessionFactory;

		public HibernateUserDAO()
			AnnotationConfiguration annotConf = new AnnotationConfiguration();
			annotConf.addAnnotatedClass(User.class);
			annotConf.configure();
			sessionFactory = annotConf.buildSessionFactory();
		}

		public void store(User user) {
			Session session = sessionFactory.openSession();
			Transaction tx = session.getTransaction();
			try {
				tx.begin();
				session.saveOrUpdate(user);
				tx.commit();
			} catch (RuntimeException e) {
				tx.rollback();
				throw e;
			} finally {
				session.close();
			}
		}

		@Override
		public User getUser(int arg0) {

			return null;
		}

		@Override
		public User getUserByFirstLastName(String arg0, String arg1) {

			return null;
		}

		@Override
		public User getUserByUsername(String arg0) {

			return null;
		}

		@Override
		public int saveUser(User arg0) {

			return 0;
		}
	}
}","['UserDAO', 'Session', 'SessionFactory', 'AnnotationConfiguration', 'User', 'Transaction']","['library.dao.UserDAO', 'org.hibernate.Session', 'org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration', 'library.model.User', 'org.hibernate.Transaction']"
"public class hibernate_class_4 {
	private static final SessionFactory sessionFactory;

	static {
		try {
			sessionFactory = new Configuration().configure().buildSessionFactory();
		} catch (HibernateException he) {
			System.err.println(he)
			throw new ExceptionInInitializerError(he);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}","['Session Factory', 'Configuration', 'HibernateException']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.Configuration', 'org.hibernate.HibernateException']"
"public class JodaTime35 {

	// TODO Auto-generated method stub

	private final static PeriodFormatter DURATION_FORMATTER = new PeriodFormatterBuilder().appendYears()
			.appendSuffix(""year"", ""years"").appendSeparator("" "").appendMonths().appendSuffix(""month"", ""months"")
			.appendSeparator("" "").appendDays().appendSuffix(""day"", ""days"").appendSeparator("" "").appendHours()
			.appendSuffix(""hour"", ""hours"").appendSeparator("" "").appendMinutes().appendSuffix(""minute"", ""minutes"")
			.appendSeparator("" "").appendSeconds().appendSuffix(""second"", ""seconds"").toFormatter();

	public static String format(Date start) {
		StringBuffer result = new StringBuffer();
		DURATION_FORMATTER.printTo(result, (ReadablePeriod) new Period(new DateTime(start), new DateTime()));
		return result.toString();
	}

	public static String format(Date start, Date end) {
		StringBuffer result = new StringBuffer()
		DURATION_FORMATTER.printTo(result,
				new Period(new DateTime(start), end == null ? new DateTime() : new DateTime(end)));
		return result.toString();
	}

}","['Date', 'PeriodFormatter', 'PeriodFormatterBuilder', 'ReadablePeriod', 'Period', 'DateTime', 'StringBuffer']","['java.util.Date', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.ReadablePeriod', 'org.joda.time.Period', 'org.joda.time.DateTime', 'java.lang.StringBuffer']"
"public class xstream_class_32 {
	public static XStream instanciateXstreamForHibernate() {
		XStream xstream1 = new XStream() {
			protected MapperWrapper wrapMapper(final MapperWrapper next) {
				return new HibernateMapper(next);

		};
		xstream1.registerConverter(new HibernateProxyConverter());
		xstream1.registerConverter(new HibernatePersistentCollectionConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedMapConverter(xstream1.getMapper()));
		xstream1.registerConverter(new HibernatePersistentSortedSetConverter(xstream1.getMapper()));
		return xstream1;
	}

}","['XStream', 'MapperWrapper', 'HibernateMapper', 'HibernatePersistentMapConverter', 'HibernatePersistentCollectionConverter', 'HibernatePersistentSortedSetConverter', 'HibernateProxyConverter', 'HibernatePersistentSortedMapConverter']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.mapper.MapperWrapper', 'com.thoughtworks.xstream.hibernate.mapper.HibernateMapper', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentMapConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentCollectionConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedSetConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernateProxyConverter', 'com.thoughtworks.xstream.hibernate.converter.HibernatePersistentSortedMapConverter']"
"public class xstream_class_13 {
	public class MyClassAliasingMapper extends ClassAliasingMapper {

		public MyClassAliasingMapper(Mapper wrapped) {
			super(wrapped)
		}

		@Override
		public Class realClass(String elementName) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.realClass(elementName);
		}

		@Override
		public String serializedClass(Class type) {
			try {
			} catch (Exception e) {
				// do nothing we fall back on super's implementation
			}
			return super.serializedClass(type);
		}
	}
}","['ClassAliasingMapper', 'Mapper', 'Class', 'String', 'Exception']","['com.thoughtworks.xstream.mapper.ClassAliasingMapper', 'com.thoughtworks.xstream.mapper.Mapper', 'java.lang.Class', 'java.lang.String', 'java.lang.Exception']"
"public class JodaTime34 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Locale.setDefault(Locale.GERMAN)
		final PeriodFormatter periodFormatter = PeriodFormat.wordBased(Locale.ENGLISH);
		final Period period = new Period(6, 5, 4, 3);
		final String s = period.toString(periodFormatter);
		System.out.println(""s = "" + s);
	}

}","['Locale', 'PeriodFormatter', 'Period', 'PeriodFormat']","['java.util.Locale', 'org.joda.time.format.PeriodFormatter', 'org.joda.time.Period', 'org.joda.time.format.PeriodFormat']"
"public class ad12 {
public static void hideKeyboardFrom() {
    Activity activity = null
    Resources resources = activity.getResources();
    Configuration config = resources.getConfiguration();
}
}
","['Activity', 'Resources', 'Configuration']","['android.app.Activity', 'android.content.res.Resources', 'android.content.res.Configuration']"
"public class JodaTime13 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Test
	public void second() {
		assertEquals(""00:00:01"", OurDateTimeFormatter.format(1000));
	}

	@Test
	public void minute() {
		assertEquals(""00:01:00"", OurDateTimeFormatter.format(1000 * 60));
	}

	@Test
	public void hour() {
		assertEquals(""01:00:00"", OurDateTimeFormatter.format(1000 * 60 * 60));
	}

	@Test
	public void almostMidnight() {
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""23:59:59"", OurDateTimeFormatter.format(1000 * (secondsInDay - 1)));
	}

	@Test
	public void twoDaysAndAHalf()
		final int secondsInDay = 60 * 60 * 24;
		assertEquals(""12:00:00 and 2 days"", OurDateTimeFormatter.format(1000 * secondsInDay * 5 / 2));
	}

	public static class OurDateTimeFormatter {
		public OurDateTimeFormatter() {
		}

		private final static PeriodFormatter dateFormat = new PeriodFormatterBuilder().appendDays()
				.appendSuffix("" day"", "" days"").appendSeparator("" "").appendHours().appendSeparator("":"").appendMinutes()
				.minimumPrintedDigits(2).appendSeparator("":"").appendSeconds().minimumPrintedDigits(2).toFormatter();

		public static String format(long millis) {
			return dateFormat.print(new Period(millis).normalizedStandard());
		}
	}
}","['Test', 'assertEquals', 'PeriodFormatterBuilder', 'Period']","['org.junit.Test', 'org.junit.Assert.assertEquals', 'org.joda.time.format.PeriodFormatterBuilder', 'org.joda.time.Period']"
"public class HibernateUtil {
	private static final SessionFactory sessionFactory;

	static {
		try {
			// Create the SessionFactory from hibernate.cfg.xml
			sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
		} catch (Throwable e) {
			System.err.println(""Initial sessionFactory creation failed.  "" + e);
			throw new ExceptionInInitializerError(e);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;

}","['SessionFactory', 'AnnotationConfiguration']","['org.hibernate.SessionFactory', 'org.hibernate.cfg.AnnotationConfiguration']"
"public class xstream_class_38 {
	XStream xstream = new XStream();

	@XStreamAlias(""bookdetails"")
	public class BookDetails {
		private int bookId;
		private String bookName;
		private int amount
	}

	@XStreamAlias(""Books"")
	public class Books {
		private List<BookDetails> bookDetails = new ArrayList<BookDetails>();
	}

	public BookDetails convertXml(String xml) {
		xstream.processAnnotations(Books.class);
		xstream.processAnnotations(BookDetails.class);
		xstream.addImplicitCollection(Books.class, ""bookDetails"");
		Books b = (Books) xstream.fromXML(xml);
		// and now you can return your BookDetails element (in case you want only first one)
		return b.bookDetails.get(0);
	}
}","['XStream', 'XStreamAlias', 'List', 'ArrayList', 'String']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.annotations.XStreamAlias', 'java.util.List', 'java.util.ArrayList', 'java.lang.String']"
"public class Android27 extends BaseAdapter {

	private Context context;
	private String[] texts = { ""aaa"", ""bbb"", ""ccc"", ""ddd"", ""eee"", ""fff"", ""eee"", ""hhh"", ""iii"" };

	public Android27(Context context)
		this.context = context;
	}

	public int getCount() {
		return 9;
	}

	public Object getItem(int position) {
		return null;
	}

	public long getItemId(int position) {
		return 0;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		TextView tv;
		if (convertView == null) {
			tv = new TextView(context);
			tv.setLayoutParams(new GridView.LayoutParams(85, 85));
		} else {
			tv = (TextView) convertView;
		}

		tv.setText(texts[position]);
		return tv;
	}
}","['Context', 'String', 'Android27', 'BaseAdapter', 'TextView', 'GridView']","['android.content.Context', 'java.lang.String', 'Android27', 'android.widget.BaseAdapter', 'android.widget.TextView', 'android.widget.GridView']"
"public class JodaTime29 {

	private static final int FIELD_COUNT = 10;

	public static void main(String[] args) {

	}

	public DateTime parseDateTime(final String text) {
		DateTimeFormatter formatters[] = new DateTimeFormatter[20];
		if (text.isEmpty())
			return null;
		int field = 0;
		DateTime dateTime = null;
		IllegalArgumentException exception = null;
		for (; field < FIELD_COUNT; ++field) {
			if (null != formatters[field]) {
				try
					dateTime = formatters[field].parseDateTime(text);
					break;
				} catch (final IllegalArgumentException e) {
					exception = null != exception ? exception : e;
				}
			}
		}
		if (dateTime == null) {
			throw exception;
		}
		return dateTime;
	}
}","['String', 'DateTime', 'DateTimeFormatter', 'IllegalArgumentException']","['java.lang.String', 'org.joda.time.DateTime', 'org.joda.time.format.DateTimeFormatter', 'java.lang.IllegalArgumentException']"
"public class Class_3 {

	private static final String SYMBOL_INFINITE = ""\u221e"";
	private static final char SYMBOL_MINUS = '-';
	private static final char SYMBOL_ZERO = '0';
	private static final int DECIMAL_LEADING_GROUPS = 10;
	private static final int EXPONENTIAL_INT_THRESHOLD = 1000000000; // After this value switch to exponential notation
	private static final double EXPONENTIAL_DEC_THRESHOLD = 0.0001; // Below this value switch to exponential notation

	private DecimalFormat decimalFormat;
	private DecimalFormat decimalFormatLong;
	private DecimalFormat exponentialFormat;

	private char groupSeparator;

	public void NumberFormatter(int decimalPlaces) {
		configureDecimalPlaces(decimalPlaces);
	}

	public void configureDecimalPlaces(int decimalPlaces) {
		if (decimalPlaces <= 0) {
			throw new IllegalArgumentException(""Invalid decimal places"");
		}

		DecimalFormatSymbols separators = new DecimalFormatSymbols(Locale.getDefault());
		separators.setMinusSign(SYMBOL_MINUS);
		separators.setZeroDigit(SYMBOL_ZERO);

		groupSeparator = separators.getGroupingSeparator();

		StringBuilder decimal = new StringBuilder();
		StringBuilder exponential = new StringBuilder(""0."");

		for (int i = 0; i < DECIMAL_LEADING_GROUPS; i++) {
			decimal.append(""###"").append(i == DECIMAL_LEADING_GROUPS - 1 ? ""."" : "","");
		}

		for (int i = 0; i < decimalPlaces; i++) {
			decimal.append(""#"");
			exponential.append(""0"");
		}

		exponential.append(""E0"");

		decimalFormat = new DecimalFormat(decimal.toString(), separators);
		decimalFormatLong = new DecimalFormat(decimal.append(""####"").toString(), separators);
		exponentialFormat = new DecimalFormat(exponential.toString(), separators);

		decimalFormat.setRoundingMode(RoundingMode.HALF_UP);
		decimalFormatLong.setRoundingMode(RoundingMode.HALF_UP);
		exponentialFormat.setRoundingMode(RoundingMode.HALF_UP);
	}

	public String format(double value) {
		String result;
		if (Double.isNaN(value))
			result = """";
		} else if (Double.isInfinite(value)) {
			result = String.valueOf(SYMBOL_INFINITE);
		} else {
			double absValue = Math.abs(value);
			if (absValue >= 1) {
				if (absValue >= EXPONENTIAL_INT_THRESHOLD) {
					value = Math.floor(value);
					result = exponentialFormat.format(value);
				} else {
					result = decimalFormat.format(value);
				}
			} else if (absValue < 1 && absValue > 0) {
				if (absValue >= EXPONENTIAL_DEC_THRESHOLD) {
					result = decimalFormat.format(value);
					if (result.equalsIgnoreCase(""0"")) {
						result = decimalFormatLong.format(value);
					}
				} else {
					result = exponentialFormat.format(value);
				}
			} else {
				result = ""0"";
			}
		}
		return result;
	}

	public String formatWithoutGroupSeparators(double value) {
		return removeGroupSeparators(format(value));
	}

	public double parse(String value, double defValue) {
		try {
			return decimalFormat.parse(value).doubleValue();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return defValue;
	}

	private String removeGroupSeparators(String number) {
		return number.replace(String.valueOf(groupSeparator), """");
	}

}","['DecimalFormat', 'DecimalFormatSymbols', 'Locale', 'RoundingMode', 'Math', 'ParseException']","['java.text.DecimalFormat', 'java.text.DecimalFormatSymbols', 'java.util.Locale', 'java.math.RoundingMode', 'java.lang.Math', 'java.text.ParseException']"
"public class JodaTime28 {
	public static void main(String[] args) {
		DateTimeFormatter dateFromatter = DateTimeFormat.forPattern(""MM/dd/yyyy"");

		DateTime startDate = dateFromatter.parseDateTime(""01/02/2012"");
		DateTime endDate = dateFromatter.parseDateTime(""01/31/2012"");

		List<LocalDate> dates = new ArrayList<LocalDate>();

		int days = Days.daysBetween(startDate, endDate).getDays();

}","['DateTimeFormatter', 'DateTimeFormat', 'DateTime', 'LocalDate', 'List', 'ArrayList', 'Days']","['org.joda.time.format.DateTimeFormatter', 'org.joda.time.format.DateTimeFormat', 'org.joda.time.DateTime', 'org.joda.time.LocalDate', 'java.util.List', 'java.util.ArrayList', 'org.joda.time.Days']"
"public class gt6 {
    public static void h1(){
        long time = System.currentTimeMillis();
        long milisPerYear = new BigInteger(""31536000000"").longValue();
        String currentYear = String.valueOf((int) Math.floor(time / milisPerYear) + 1970);

}
","['System', 'BigInteger', 'Math']","['java.lang.System', 'java.math.BigInteger', 'java.lang.Math']"
"public class hb1 {
    public static void h1(){
        Configuration configuration = new Configuration().configure();


}
",['Configuration'],['org.hibernate.cfg.Configuration']
"public class xstream_class_43 {
	public List<Book> books;

	public xstream_class_43(List<Book> books) {
		this.books = books;
	}

	@Override
	public String toString()
		StringBuilder b = new StringBuilder();
		b.append(""Library with "" + books.size() + "" books:\n"");
		for (Book book : books) {
			b.append(book.toString());
			// Skip a line
			b.append(""\n"");
		}
		return b.toString();
	}

	public static class Book {
		private String title;
		private String author;

		public Book(String title, String author) {
			this.title = title;
			this.author = author;
		}

		@Override
		public String toString() {
			return ""\"""" + title + ""\"" by "" + author;
		}
	}

	public static void main(String[] args) {
		List<Book> books = new ArrayList<Book>();
		books.add(new Book(""The Talent Code: Greatness Isn't Born. It's Grown. Here's How"", ""Daniel Coyle""));

		xstream_class_43 lib = new xstream_class_43(books);
		// Handles conversion of our objects into XML
		XStream stream = new XStream(new DomDriver());

		String xml = stream.toXML(lib);
		// fromXML returns a general Object; need to cast it into a Library
		xstream_class_43 lib2 = (xstream_class_43) stream.fromXML(xml);

		System.out.println(xml);
		System.out.println(lib);
		System.out.println(lib2);
		System.out.println(""Libraries equal: "" + lib.toString().equals(lib2.toString()));
	}
}","['List', 'ArrayList', 'StringBuilder', 'String', 'XStream', 'DomDriver']","['java.util.List', 'java.util.ArrayList', 'java.lang.StringBuilder', 'java.lang.String', 'com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver']"
"public class jdk20 {
    private static InputStream inputStream;

    public static void h1() throws IOException {
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        ByteArrayOutputStream buf = new ByteArrayOutputStream();

}
","['InputStream', 'IOException', 'BufferedInputStream', 'ByteArrayOutputStream']","['java.io.InputStream', 'java.io.IOException', 'java.io.BufferedInputStream', 'java.io.ByteArrayOutputStream']"
"public class ad6 {
  public void h1(){
      DisplayMetrics displayMetrics = new DisplayMetrics();
      int height = displayMetrics.heightPixels;
      int width = displayMetrics.widthPixels;
  }

",['DisplayMetrics'],['android.util.DisplayMetrics']
"public class jdk4 {
    public static void h1(String oldDate, String format) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Date dt = sdf.parse(oldDate)
        long epoch = dt. getTime();
    }
}
","['SimpleDateFormat', 'Date']","['java.text.SimpleDateFormat', 'java.util.Date']"
"public class hibernate_class_32 {
	@Id
	@GeneratedValue
	Long id;
	String job;
	String version;
	String schedule;
	String dttmRun;
	int pid
	String command;
	int duration;

}","['@Id', '@GeneratedValue', 'Long', 'String', 'int']","['javax.persistence.Id', 'javax.persistence.GeneratedValue', 'java.lang.Long', 'java.lang.String', 'java.lang.int']"
"class ComponentImageCapture {

	static final String HELP = ""Type Ctrl-0 to get a screenshot of the current GUI.\n""
			+ ""The screenshot will be saved to the current "" + ""directory as 'screenshot.png'."";

	public static BufferedImage getScreenShot(Component component) {

		BufferedImage image = new BufferedImage(component.getWidth(), component.getHeight(),
				BufferedImage.TYPE_INT_RGB);
		// call the Component's paint method, using
		// the Graphics object of the image.
		component.paint(image.getGraphics()); // alternately use .printAll(..)
		return image;
	}

	public static void main(String[] args) {
		Runnable r = new Runnable() {
			public void run() {
				final JFrame f = new JFrame(""Test Screenshot"");

				JMenuItem screenshot = new JMenuItem(""Screenshot"");
				screenshot.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, InputEvent.CTRL_DOWN_MASK));
				screenshot.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent ae) {
						BufferedImage img = getScreenShot(f.getContentPane());
						JOptionPane.showMessageDialog(null,
								new JLabel(new ImageIcon(img.getScaledInstance(img.getWidth(null) / 2,
										img.getHeight(null) / 2, Image.SCALE_SMOOTH))));
						try {
							// write the image as a PNG
							ImageIO.write(img, ""png"", new File(""screenshot.png""))
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				});
				JMenu menu = new JMenu(""Other"");
				menu.add(screenshot);
				JMenuBar mb = new JMenuBar();
				mb.add(menu);
				f.setJMenuBar(mb);

				JPanel p = new JPanel(new BorderLayout(5, 5));
				p.setBorder(new TitledBorder(""Main GUI""));
				p.add(new JScrollPane(new JTree()), BorderLayout.WEST);
				p.add(new JScrollPane(new JTextArea(HELP, 10, 30)), BorderLayout.CENTER);

				f.setContentPane(p);
				f.pack();
				f.setLocationRelativeTo(null);
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				f.setVisible(true);
			}
		};
		SwingUtilities.invokeLater(r);
	}
}","['ActionListener', 'KeyStroke', 'File', 'JMenuBar', 'BufferedImage', 'Image', 'JMenu', 'ActionEvent', 'Component', 'KeyEvent', 'JOptionPane', 'JScrollPane', 'JMenuItem', 'JTree', 'JLabel', 'SwingUtilities', 'TitledBorder', 'JTextArea', 'JFrame', 'JPanel', 'ImageIcon', 'InputEvent', 'ImageIO', 'BorderLayout']","['java.awt.event.ActionListener', 'javax.swing.KeyStroke', 'java.io.File', 'javax.swing.JMenuBar', 'java.awt.image.BufferedImage', 'java.awt.Image', 'javax.swing.JMenu', 'java.awt.event.ActionEvent', 'java.awt.Component', 'java.awt.event.KeyEvent', 'javax.swing.JOptionPane', 'javax.swing.JScrollPane', 'javax.swing.JMenuItem', 'javax.swing.JTree', 'javax.swing.JLabel', 'javax.swing.SwingUtilities', 'javax.swing.border.TitledBorder', 'javax.swing.JTextArea', 'javax.swing.JFrame', 'javax.swing.JPanel', 'javax.swing.ImageIcon', 'java.awt.event.InputEvent', 'javax.imageio.ImageIO', 'java.awt.BorderLayout']"
"public class xt13 {
    public static void h1() throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        XMLWriter xmlWriter = new XMLWriter(outputStream, OutputFormat.createPrettyPrint());
        Object doc = null;
    }

","['IOException', 'ByteArrayOutputStream', 'XMLWriter', 'OutputFormat']","['java.io.IOException', 'java.io.ByteArrayOutputStream', 'org.dom4j.io.XMLWriter', 'org.dom4j.io.OutputFormat']"
"public class jt19 {
   public static void h1(){
      String input = ""04/02/2011 20:27:05"" ;
      DateTimeFormatter f = DateTimeFormatter.ofPattern( ""dd/MM/uuuu HH:mm:ss"" ) ;
      LocalDateTime ldt = LocalDateTime.parse( input , f ) ;

}
","['DateTimeFormatter', 'LocalDateTime']","['java.time.format.DateTimeFormatter', 'java.time.LocalDateTime']"
"public class xstream_class_2 {
	public static void main(String arg[]) throws IOException {
		XStream xstream = new XStream(new DomDriver());
		FileReader fin = new FileReader(""path_to_file.xml"");
		BufferedReader br = new BufferedReader(fin);

		String str = null
		while (br.ready()) {
			str += br.readLine() + ""\n"";
		}

	}
}","['XStream', 'DomDriver', 'FileReader', 'BufferedReader', 'IOException', 'String']","['com.thoughtworks.xstream.XStream', 'com.thoughtworks.xstream.io.xml.DomDriver', 'java.io.FileReader', 'java.io.BufferedReader', 'java.io.IOException', 'java.lang.String']"
